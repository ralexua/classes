//*****************************************************************************
// Описание переменных 
Перем СписокДействий,новый;  // Список действий по документу
Перем СтараяДата;      
Перем НачальнаяДатаДокумента; // Для контроля даты документа
Перем ОстаткиТоваров, РезервыТоваров, ОбщРег;
Перем стНеликвид,стСорт;
Перем дополненияТорговля;
Перем тзТЧ; //для контроля изм партии поставщика пользователем
Перем ПравоПользователяПеремещение;
Перем этоКладовщикШК;

Процедура ГенерироватьСобытиеЗавСкладом()
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	спсВрем = СоздатьОбъект("СписокЗначений");
	спсВрем.ИзСтрокиСРазделителями("5000000032013"); //Ковальчук
	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
	//спсВрем.ИзСтрокиСРазделителями("5000000007011");
	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
	Для сч = 1 По спсВрем.РазмерСписка() Цикл
		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
	КонецЦикла;
КонецПроцедуры // ГенерироватьСобытие

//======================================================================
Процедура ПолучитьДанныеСоСканераШК()
	парам = "";
	Если ВвестиСтроку(парам,"Введите штрихкод",13,0,20) <> 1 Тогда
		Возврат;
	КонецЕсли;
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	Сервис.ВнешнееСобытие(Источник,"BarCodeValue",парам);
КонецПроцедуры // ПолучитьДанныеСоСканераШК()

//Для отладки
Процедура ГенерироватьСобытиеСотр1()
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	спсВрем = СоздатьОбъект("СписокЗначений");
	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
	спсВрем.ИзСтрокиСРазделителями("5000000027019");
	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
	Для сч = 1 По спсВрем.РазмерСписка() Цикл
		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
	КонецЦикла;
КонецПроцедуры // ГенерироватьСобытие

Процедура ГенерироватьСобытиеСотр2()
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	спсВрем = СоздатьОбъект("СписокЗначений");
	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
	спсВрем.ИзСтрокиСРазделителями("5000000007011");
	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
	Для сч = 1 По спсВрем.РазмерСписка() Цикл
		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
	КонецЦикла;
КонецПроцедуры // ГенерироватьСобытие

Процедура ГенерироватьСобытиеСотрВербицкая()
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	спсВрем = СоздатьОбъект("СписокЗначений");
	спсВрем.ИзСтрокиСРазделителями(" 5000000011018"); //Таня Назаренко
	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
	//спсВрем.ИзСтрокиСРазделителями("5000000007011");
	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
	Для сч = 1 По спсВрем.РазмерСписка() Цикл
		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
	КонецЦикла;
КонецПроцедуры // ГенерироватьСобытие


Процедура ГенерироватьСобытиеТовар()
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	спсВрем = СоздатьОбъект("СписокЗначений");
	спсВрем.ИзСтрокиСРазделителями("4820026540139");
	Для сч = 1 По спсВрем.РазмерСписка() Цикл
		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
	КонецЦикла;
КонецПроцедуры // ГенерироватьСобытие

//======================================================================
Процедура ГенерироватьСобытие()
	Источник = "";
	спсВрем = СоздатьОбъект("СписокЗначений");
	спсВрем.ИзСтрокиСРазделителями("4823065814308");
	//спсВрем.ИзСтрокиСРазделителями("4823065814308, 4823065814315, 4823065813882, 4823065813899, 4823065813905");
	Для сч = 1 По спсВрем.РазмерСписка() Цикл
		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
	КонецЦикла;
КонецПроцедуры // ГенерироватьСобытие



Функция ПоставитьЗадачуВCRM()
	спсПарам = СоздатьОбъект("Структура");
	спсПарам.Вставить("Заголовок", " " + ТекущийДокумент());
	спсПарам.Вставить("Описание", СокрЛП(ОписаниеЗадачи));
	спсПарам.Вставить("ДатаНачала", ДатаДок);
	спсПарам.Вставить("ДатаКонца", срокИсполненияЗадачи);
	спсПарам.Вставить("users_id", СотрудникЗадачи);
	спсПарам.Вставить("конт", глВернутьКонтекст(Контекст));
	
	API_CRM = СоздатьОбъект("API_CRM");
	рез = API_CRM.ПоставитьЗадачу_API(спсПарам);
	Если рез <> 0 Тогда
		id_задачиВ_CRM = СокрЛП(id_задачиВ_CRM) + ?(ПустаяСтрока(id_задачиВ_CRM) = 1,"",",") + рез;
		Записать();
	КонецЕсли;
	Возврат рез;  //если 0 то задача не поставлена
КонецФункции // ПоставитьЗадачуВCRM()

//======================================================================
Функция ПоказатьКодТовара()
	Если ПустоеЗначение(Товар) = 0 Тогда
		Возврат Товар.Код;
	КонецЕсли;
	Возврат "";
КонецФункции // ПоказатьКодТовара

Функция ПоказатьАртикулТовара()
	Если ПустоеЗначение(Товар) = 0 Тогда
		Возврат Товар.Артикул ;
	КонецЕсли;
	Возврат "";
КонецФункции // ПоказатьКодТовара

//*****************************************************************************
// "служебные" функции и процедуры 

//*****************************************************************************
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
	Заголовок = "Накладная на перемещение";
	Название = "Перемещение №";
            
	Заголовок = Заголовок + глЗаголовок(Контекст);
	Форма.Заголовок(Заголовок);     
	Возврат Название;
КонецФункции //ЗаголовокФормы

//*****************************************************************************
// функции и процедуры, вызываемые из формул элементов диалога

//******************************************************************************
Процедура ПересчетРегистров()
	ОбщРег=СоздатьОбъект("Регистры");
	ОстаткиТоваров=ОбщРег.ОстаткиТоваров;
	РезервыТоваров=ОбщРег.РезервыТоваров;
	Если ДатаДок<ПолучитьДатуТА() Тогда
	    ОстаткиТоваров.ВременныйРасчет();
		РезервыТоваров.ВременныйРасчет();
		Если Проведен() = 1 Тогда
			ОбщРег.РассчитатьРегистрыНа(ТекущийДокумент());
		Иначе
			ОбщРег.РассчитатьРегистрыНа(ДатаДок);
		КонецЕсли;
		
	//	ОбщРег.РассчитатьРегистрыПо(ДатаДок);
	КонецЕсли;
КонецПроцедуры   

//******************************************************************************
Процедура ИзмДатаДок()
	глПриИзмененииДатыДокумента(Контекст, СтараяДата);
	Если ПустоеЗначение(Фирма) = 0 Тогда
		НаименованиеФирмы = Фирма.Наименование;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура УстДоступность()       
	Если (ПустоеЗначение(Склад) = 0) и (ПустоеЗначение(НовыйСклад) = 0) Тогда
 		Форма.Предпочтение.Доступность(1);
	КонецЕсли;
	Если (ПустоеЗначение(НовыйСклад) = 0) Тогда
	    Если (НовыйСклад.ВидСклада =Перечисление.ВидыСкладов.Розничный) Тогда
			Форма.ЦенаСНДС.Видимость(1);
			Форма.ВалютаУч.Видимость(1);
		КонецЕсли;
	КонецЕсли;
	Если названиенабораправ()<>"Администратор" Тогда
		текРаспечатан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"распечатан"); //+ralex, 19-12-21 23:02

		Если (текРаспечатан <> 0) или (проведен()=1) ИЛИ (ПометкаУдаления()=1) Тогда  
			форма.толькопросмотр(1);			
			форма.кнПодборПоКаталогу.доступность(0);			
			форма.КомментарийПроверки.Видимость(0);
		КонецЕсли;	
		Форма.ЦенаУчета.Видимость(0);
		Форма.СуммаУчета.Видимость(0);
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кнОК.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнДействия.Доступность(0);
		Форма.кнПодборПоКаталогу.Доступность(0);
		Форма.кнОснование.Доступность(0);
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
КонецПроцедуры

// ===============================
Процедура ИзмСклад()
	УстДоступность();
	Если Склад.Выбран() = 1 Тогда
		ОтвСкладОткуда = Склад.МОЛ;
	КонецЕсли;	
КонецПроцедуры

// ===============================
Процедура ИзмНовыйСклад()
	УстДоступность();
	Если НовыйСклад.Выбран() = 1 Тогда
		ОтвСкладКуда = НовыйСклад.МОЛ;
	КонецЕсли;	
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(новоеСкладскоеМесто) = 0 Тогда
			Если ПустоеЗначение(новоеСкладскоеМесто.Склад) = 0  Тогда
				Если новоеСкладскоеМесто.Склад <> НовыйСклад Тогда
					Сообщить("Складское место в строке " + НомерСтроки + " принадлежит другому складу. выберите складское место.");
					новоеСкладскоеМесто = 0;
				КонецЕсли;
			Иначе
				Сообщить("У складского места " + новоеСкладскоеМесто + " в строке " + НомерСтроки + " не указан склад!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// ===============================
Процедура ВыборПредпочтения()
	
	спОтбор = СоздатьОбъект("СписокЗначений");
	
	спСтатусы=СоздатьОбъект("СписокЗначений");
	спСтатусы.ДобавитьЗначение(Купленный);
	спСтатусы.ДобавитьЗначение(Принятый);
	спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);	
	спОтбор.Установить("Статус",спСтатусы);
	
	спОтбор.Установить("Контекст",глВзятьКонтекст(Контекст));  
	
	ОткрытьФормуМодально("Справочник.Контрагенты.ВыборПредпочтения", спОтбор);
КонецПроцедуры
                                 

//*****************************************************************************
Процедура ВыборФирмы()
	// по кнопке редактирования параметров фирмы в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОфирме", КонтекстДокумента);
	УстДоступность();
КонецПроцедуры	
	                                                    
// ===============================
Процедура ПриВводеНаОсновании(ДокОснование)
	Если ПустоеЗначение(ДокОснование) = 1 Тогда
		Возврат;
	КонецЕсли;
	глЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
	ИзмСклад();                                   
	Если КоличествоСтрок()=0 Тогда
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			Если ДокОснование.Товар.Выбран()=0 Тогда
				Продолжить;
			КонецЕсли;    
			Если ДокОснование.Товар.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда
				Продолжить;
			КонецЕсли;	
			НоваяСтрока();
			Товар=ДокОснование.Товар;
			Единица=ДокОснование.Единица;
			Коэффициент=ДокОснование.Коэффициент;
			Количество=ДокОснование.Количество;
			ЦенаСНДС = ДокОснование.ЦенаСНДС;
			глВыч_суммы_накл(Контекст,1);
			Если (глЕстьРеквизитМнЧ("Набор",Вид())=Да) и (глЕстьРеквизитМнЧ("Набор",ДокОснование.Вид())=Да) Тогда
				Набор=ДокОснование.Набор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

//*****************************************************************************
Процедура ВыборОснования()
	// Процедура по кнопке редактирования основания в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ОснованиеДокумента", КонтекстДокумента);
	Форма.ТекстОснования.Заголовок(СокрП(Основание));               
КонецПроцедуры	

//******************************************************************************
//*ralex, 2018-11-14 11:02:30
//Процедура Печать()                   
//	Если (названиенабораправ()="Продавець") ИЛИ (названиенабораправ()="Менеджер")  ИЛИ (названиенабораправ()="МенеджерТоварищ")Тогда
//		Если новый=1 Тогда
//		    возврат;
//		КонецЕсли;
//	КонецЕсли;                       
//	Если (названиенабораправ()="Продавець") ИЛИ (названиенабораправ()="Менеджер") ИЛИ (названиенабораправ()="МенеджерТоварищ") Тогда
//		Распечатан=1; 		
//		провести();			
//	    //записать();
//		Если проведен()=0 Тогда
//		СТАТУСВОЗВРАТА(0);    
//		КонецЕсли;
//		форма.толькопросмотр(1);
//		Если выбран()=1 Тогда
//		    новый=0;
//		КонецЕсли;		
//	КонецЕсли;	
//	Если Проведен()=0 Тогда
//		Предупреждение ("Документ можно распечатать только после проведения.");
//		Возврат;
//	КонецЕсли;                                     
//	
//	Фирма.ИспользоватьДату(ДатаДок);
//	
//	Таб=СоздатьОбъект("Таблица");
//	
//	Если (Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный) и (НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Розничный) Тогда
//		ПечФорма = "Переоценка";  
//	ИначеЕсли (Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный) или (НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Розничный) Тогда
//		ПечФорма = "Розница";  
//	Иначе
//		ПечФорма = "Опт";
//	КонецЕсли;
//	
//	Язык = глЯзык(ПечФорма); 	
//	Таб.ИсходнаяТаблица(ПечФорма);
//	глУстПропись(Гривня,Язык);
//	//+ralex, 2017-02-16 21:39:57
//	Если неликвид = 1 Тогда
//		тхтНеликвид = ?(Константа.ФормыНаУкраинском = Да,"--- НЕКОНДИЦІЯ ","--- НЕКОНДИЦИЯ ") + Сорт + " ---";
//	Иначе
//		тхтНеликвид = "";
//	КонецЕсли;
//	//+/ralex, 2017-02-16 21:39:57
//	
//	Таб.ВывестиСекцию("Шапка");	
//	
//	поПриходу = 0; // по вновь образованным партиям
//	поРасходу = 0; // по списываемым партиям
//	Если Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный Тогда
//	    поРасходу = 1; // по списываемым партиям
//	КонецЕсли;
//	Если НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Розничный Тогда
//	    поПриходу = 1; // по списываемым партиям
//	КонецЕсли;   
//	Если (Склад.ВидСклада = Перечисление.ВидыСкладов.Оптовый) и (НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Оптовый) тогда 
//	    поРасходу = 1; // по списываемым партиям
//	КонецЕсли;	
//	                                              
//	тбПечать = СоздатьОбъект("ТаблицаЗначений");
//	тбПечать.НоваяКолонка("Флаг");
//	тбПечать.НоваяКолонка("Товар");
//	тбПечать.НоваяКолонка("Количество","Число",14,3);	
//	тбПечать.НоваяКолонка("СуммаУчетная","Число",12,2);
//	тбПечать.НоваяКолонка("СуммаРознНач","Число",12,2);
//	тбПечать.НоваяКолонка("СуммаРознКон","Число",12,2);
//	
//	Если (поПриходу=0) и (поРасходу=0) Тогда
//		ВыбратьСтроки();
//		Пока ПолучитьСтроку()=1 Цикл
//			тбПечать.НоваяСтрока();
//			тбПечать.Флаг = 1;
//			тбПечать.Товар=Товар;                        
//			тбПечать.Количество = Количество*Коэффициент;    
//			
//		КонецЦикла;
//	Иначе
//		ПересчетРегистров();		
//		Рег=СоздатьОбъект("Регистр.ПартииТоваров");
//		Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
//		
//		Пока Рег.ПолучитьДвижение()=1 Цикл  
//			
//			//*ralex, 2018-10-08 22:54:37
//			//Если ТипУчета = Упр Тогда
//			//	Если ПустоеЗначение(Рег.Фирма)=0 Тогда
//			//		Продолжить;
//			//	КонецЕсли;
//			//Иначе
//			//	Если ПустоеЗначение(Рег.Фирма)=1 Тогда
//			//		Продолжить;
//			//	КонецЕсли;
//			//КонецЕсли;
//			//
//			// -------- заменено на:
//			Если ПустоеЗначение(Рег.Фирма)=0 Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			//*/ralex, 2018-10-08 22:54:37
//			НомСтрДок = Рег.НомерСтроки();
//			ПолучитьСтрокуПоНомеру(НомСтрДок);
//			
//			тбПечать.НоваяСтрока();
//			тбПечать.Флаг = 1;
//			тбПечать.Товар=Товар;
//			
//			Если Рег.Расход = 1 Тогда
//				тбПечать.Количество=Рег.ОстатокТовара;
//				тбПечать.СуммаУчетная=Рег.Стоимость;
//			КонецЕсли;
//			
//			Если (Рег.Расход = 1) и (поРасходу = 1) Тогда				
//				тбПечать.СуммаРознНач = тбПечать.СуммаРознНач + Рег.ПродСтоимость
//			КонецЕсли;
//			
//			Если (Рег.Приход = 1) и (поПриходу = 1) Тогда
//				тбПечать.СуммаРознКон = тбПечать.СуммаРознКон + Рег.ПродСтоимость
//			КонецЕсли;
//			
//		КонецЦикла;
//	КонецЕсли;
//	   
//	тбПечать.Свернуть("Флаг,Товар","Количество,СуммаУчетная,СуммаРознНач,СуммаРознКон");
//    Ном=1;                
//	тбПечать.ВыбратьСтроки();
//	Пока тбПечать.ПолучитьСтроку()=1 Цикл   
//		
//		ЦенаУчетная = тбПечать.СуммаУчетная/тбПечать.Количество;
//		ЦенаРознНач = тбПечать.СуммаРознНач/тбПечать.Количество;
//		ЦенаРознКон = тбПечать.СуммаРознКон/тбПечать.Количество;
//		
//		Таб.ВывестиСекцию("Строка");
//		Ном = Ном+1;
//	КонецЦикла;
//             
//	тбПечать.Свернуть("Флаг","СуммаУчетная,СуммаРознНач,СуммаРознКон");
//	тбПечать.ВыбратьСтроки();
//	тбПечать.ПолучитьСтроку();
//	Таб.ВывестиСекцию("Дно");
//	
//	Таб.Опции(0,0,0,0,ПарСтрДок);
//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
//	Таб.ТолькоПросмотр(1);
//	Таб.Показать("Печать накладной",""); 
//		Распечатан=1;
//		записать();		
//КонецПроцедуры
// -------- заменено на:

Функция УстановитьНадписьРаспечатанОтгружен()
	Возврат дополненияТорговля.УстановитьНадписьРаспечатанОтгружен(Контекст);
КонецФункции

Процедура Печать()                   
	Если (названиенабораправ()="Продавець") ИЛИ (названиенабораправ()="Менеджер")  ИЛИ (названиенабораправ()="МенеджерТоварищ")Тогда
		Если новый=1 Тогда
			возврат;
		КонецЕсли;
	КонецЕсли; 
	
	текРаспечатан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"распечатан"); //+ralex, 19-12-21 23:02
	Если (НазваниеНабораПрав() <> "Администратор") и (текРаспечатан > 0) Тогда
		Сообщить("Документ уже распечатан.");
		Возврат;
	КонецЕсли;
	
	Если (названиенабораправ()="Продавець") ИЛИ (названиенабораправ()="Менеджер") ИЛИ (названиенабораправ()="МенеджерТоварищ") Тогда
		Если Проведен() = 0 Тогда
			Если провести()=0 Тогда
				СТАТУСВОЗВРАТА(0);  
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Распечатан=1; 		
		форма.толькопросмотр(1);
		Если выбран()=1 Тогда
			новый=0;
		КонецЕсли;		
	КонецЕсли;	
	Если Проведен()=0 Тогда
		Предупреждение ("Документ можно распечатать только после проведения.");
		Возврат;
	КонецЕсли;  
	
	Фирма.ИспользоватьДату(ДатаДок);
	
	Таб=СоздатьОбъект("Таблица");
	
	Если (Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный) и (НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Розничный) Тогда
		ПечФорма = "Переоценка";  
	ИначеЕсли (Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный) или (НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Розничный) Тогда
		ПечФорма = "Розница";  
	Иначе
		ИмяФайлаПечатнойФормы = КаталогИБ()+"ExtForms\PrnForms\peremezhenie_opt" + ?(текРаспечатан = 0,"","_dubl") + ".mxl";		
		Если ФС.СуществуетФайл(ИмяФайлаПечатнойФормы) = 1 Тогда
			ПечФорма = ИмяФайлаПечатнойФормы;
		Иначе
			ПечФорма = "Опт" + ?(текРаспечатан = 0,"","_Дубликат");
			Язык = глЯзык(ПечФорма); 	
		КонецЕсли;
	КонецЕсли;
	
	Таб.ИсходнаяТаблица(ПечФорма);
	глУстПропись(Гривня,Язык);
	Если неликвид = 1 Тогда
		тхтНеликвид = ?(Константа.ФормыНаУкраинском = Да,"--- НЕКОНДИЦІЯ ","--- НЕКОНДИЦИЯ ") + Сорт + " ---";
	Иначе
		тхтНеликвид = "";
	КонецЕсли;
	
	Если ШтрКод = 0 Тогда
		ШтрКод = СформироватьШтрихКодДокумента(Контекст,ТекущийДокумент());
	КонецЕсли;
	ПечШтрихКод=Строка(ШтрКод);
	
	квоЭкз = ?(текРаспечатан = 0,2,1);
	Для счСтр = 1 По квоЭкз Цикл
		Если текРаспечатан = 0 Тогда
			Если счСтр = 1 Тогда
				чейЭкземпляр = "Экземпляр склада отправителя";
			Иначе
				чейЭкземпляр = "Экземпляр склада получателя";
			КонецЕсли;
		Иначе
			чейЭкземпляр = "";
		КонецЕсли;
		
		Таб.ВывестиСекцию("Шапка");	
		
		поПриходу = 0; // по вновь образованным партиям
		поРасходу = 0; // по списываемым партиям
		Если Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный Тогда
			поРасходу = 1; // по списываемым партиям
		КонецЕсли;
		Если НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Розничный Тогда
			поПриходу = 1; // по списываемым партиям
		КонецЕсли;   
		Если (Склад.ВидСклада = Перечисление.ВидыСкладов.Оптовый) и (НовыйСклад.ВидСклада = Перечисление.ВидыСкладов.Оптовый) тогда 
			поРасходу = 1; // по списываемым партиям
		КонецЕсли;	
		
		тбПечать = СоздатьОбъект("ТаблицаЗначений");
		тбПечать.НоваяКолонка("Флаг");
		тбПечать.НоваяКолонка("Товар");
		тбПечать.НоваяКолонка("МестоОткуда");
		тбПечать.НоваяКолонка("МестоКуда");
		тбПечать.НоваяКолонка("Количество","Число",14,3);	
		тбПечать.НоваяКолонка("СуммаУчетная","Число",12,2);
		тбПечать.НоваяКолонка("СуммаРознНач","Число",12,2);
		тбПечать.НоваяКолонка("СуммаРознКон","Число",12,2);
		
		Если (поПриходу=0) и (поРасходу=0) Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				тбПечать.НоваяСтрока();
				тбПечать.Флаг = 1;
				тбПечать.Товар=Товар;    
				тбПечать.МестоОткуда = СкладскоеМесто;
				тбПечать.МестоКуда = новоеСкладскоеМесто;
				тбПечать.Количество = Количество*Коэффициент;    
				
			КонецЦикла;
		Иначе
			ПересчетРегистров();		
			Рег=СоздатьОбъект("Регистр.ОстаткиТоваров");
			Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
			
			Пока Рег.ПолучитьДвижение()=1 Цикл  
				
				Если ПустоеЗначение(Рег.Фирма)=0 Тогда
					Продолжить;
				КонецЕсли;
				
				НомСтрДок = Рег.НомерСтроки();
				ПолучитьСтрокуПоНомеру(НомСтрДок);
				
				тбПечать.НоваяСтрока();
				тбПечать.Флаг = 1;
				тбПечать.Товар=Товар;
				тбПечать.МестоОткуда = СкладскоеМесто;
				тбПечать.МестоКуда = новоеСкладскоеМесто;

				Если Рег.Расход = 1 Тогда
					тбПечать.Количество=Рег.ОстатокТовара;
					Цена = 0; Валюта = Гривня; //если цена не найдена то для пересчета
					Если глПолучитьЦенуТовара(Константа.Закупочная,Товар,Единица,ДатаДок,Цена,Валюта) <> 0 Тогда
						Цена = глПересчет(Цена,Валюта,ДатаДок,Гривня,ДатаДок);
					КонецЕсли;
					тбПечать.СуммаУчетная= Цена * Количество;
				КонецЕсли;
				
				Если (Рег.Расход = 1) и (поРасходу = 1) Тогда	
					Цена = 0; Валюта = Гривня; //если цена не найдена то для пересчета
					Если глПолучитьЦенуТовара(Константа.РозничнаяКатегорияЦен,Товар,Единица,ДатаДок,Цена,Валюта) <> 0 Тогда
						Цена = глПересчет(Цена,Валюта,ДатаДок,Гривня,ДатаДок);
					КонецЕсли;
					тбПечать.СуммаРознНач = Цена * Количество;
				КонецЕсли;
				
				Если (Рег.Приход = 1) и (поПриходу = 1) Тогда
					Цена = 0; Валюта = Гривня; //если цена не найдена то для пересчета
					Если глПолучитьЦенуТовара(Константа.РозничнаяКатегорияЦен,Товар,Единица,ДатаДок,Цена,Валюта) <> 0 Тогда
						Цена = глПересчет(Цена,Валюта,ДатаДок,Гривня,ДатаДок);
					КонецЕсли;
					тбПечать.СуммаРознКон = Цена * Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		тбПечать.Свернуть("Флаг,Товар,МестоОткуда,МестоКуда","Количество,СуммаУчетная,СуммаРознНач,СуммаРознКон");
		Ном=1;                
		тбПечать.ВыбратьСтроки();
		Пока тбПечать.ПолучитьСтроку()=1 Цикл   
			ЦенаУчетная = тбПечать.СуммаУчетная/тбПечать.Количество;
			ЦенаРознНач = тбПечать.СуммаРознНач/тбПечать.Количество;
			ЦенаРознКон = тбПечать.СуммаРознКон/тбПечать.Количество;
			МестоОткуда = тбПечать.МестоОткуда;
			МестоКуда	= тбПечать.МестоКуда;
			Таб.ВывестиСекцию("Строка");
			Ном = Ном+1;
		КонецЦикла;
		
		тбПечать.Свернуть("Флаг","СуммаУчетная,СуммаРознНач,СуммаРознКон");
		тбПечать.ВыбратьСтроки();
		тбПечать.ПолучитьСтроку();
		Таб.ВывестиСекцию("Дно");
		Если счСтр = 1 Тогда
			Таб.НоваяСтраница();
		КонецЕсли;
	КонецЦикла;
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	
	Если названиенабораправ()<>"Администратор" тогда
		Таб.Напечатать(1); 
	Иначе
		Таб.Показать("Печать накладной",""); 
	КонецЕсли;
	дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"распечатан",текРаспечатан + 1);
КонецПроцедуры
//*/ralex, 2018-11-14 11:02:30

//*****************************************************************************
// Предопределенные процедуры

//******************************************************************************
Процедура ВводНового(Скопирован)
	Если ПравоПользователяПеремещение = 0 Тогда
		Предупреждение("Вам запрещено создавать документы ""Перемещение"".");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	новый=1;  
	распечатан=0;
	глЗаполнитьШапку(Контекст);
	ИзмСклад();
	Если Скопирован=1 Тогда	//копирование документа
		Если ПустоеЗначение(Сорт) = 1 Тогда
			Сорт = КондиционныйТовар;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДатаДок=РабочаяДата();
	//+ralex, 2016-12-05 12:02:55
	Неликвид = 0;
	Если ПустоеЗначение(Сорт) = 1 Тогда
		Сорт = КондиционныйТовар;
	КонецЕсли;
	
	//+/ralex, 2016-12-05 12:02:55
КонецПроцедуры

//******************************************************************************
Процедура ВводНаОсновании(ДокОснование)
	Перем ВидОсн;
	Если ПравоПользователяПеремещение = 0 Тогда
		Предупреждение("Вам запрещено создавать документы ""Перемещение"".");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

    новый=1; 
	распечатан=0;
	ВидОсн = ДокОснование.Вид();
	Сорт = КондиционныйТовар;
	Если (ВидОсн = "ПриходнаяНакладная") 
		ИЛИ (ВидОсн = "ПриходнаяРеализатора") Тогда
		Если ДокОснование.ВидОперации = 1 Тогда
		    СтатусВозврата(0);
			Предупреждение("Документ "+ПредставлениеВида()+" нельзя выписывать"+РазделительСтрок+
			               "на основании документа "+ДокОснование.ПредставлениеВида()+" с признаком возврат!");
			Возврат;
		КонецЕсли;
	Иначе
		Предупреждение("Документ "+ПредставлениеВида()+" не вводят на основании документа "+ДокОснование.ПредставлениеВида()+" !");
		СтатусВозврата(0);
	КонецЕсли;        
	
	Автор = глПользователь;
	ДатаДок=РабочаяДата();                                           
	ПриВводеНаОсновании(ДокОснование);

КонецПроцедуры
                             
//******************************************************************************
Процедура ПриНачалеРедактированияСтроки()
	Если ПустоеЗначение(Предпочтение)=1 Тогда
		Форма.Предпочтение.НазначитьТип("Справочник.Контрагенты");
		Предпочтение=ПустоеЗначение("Справочник.Контрагенты");
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ПриРедактированииНовойСтроки()
	Форма.Предпочтение.НазначитьТип("Справочник.Контрагенты");
	Предпочтение=ПустоеЗначение("Справочник.Контрагенты");
КонецПроцедуры

//======================================================================
Функция получитьСписокПартийПоставщика(выбТовар,возврТЗ = 0)
	тбПартии = 0;
	Если Выбран() = 0 Тогда //новый документ
		//*ralex, 26-05-21 08:17
		//ВремРег = СоздатьОбъект("Регистры");
		//Отбор = СоздатьОбъект("СписокЗначений");
		//Отбор.ДобавитьЗначение(выбТовар,"Товар");
		//глРассчитатьОстаткиПартийПост(Контекст, ВремРег, Отбор);
		//глСформироватьТаблицуПартийПоставщика(Контекст, ВремРег,0,0,тбПартии);
		// -------- заменено на:
		
		//т.к. тут проблемы с ТА то считать будем на момент последнего документа в базе
		врДок = СоздатьОбъект("Документ");
		врДок.ОбратныйПорядок(1);
		врДок.ВыбратьДокументы();
		Пока врДок.ПолучитьДокумент() = 1 Цикл
			Если врДок.Проведен() = 0 Тогда
				Продолжить;
			КонецЕсли;
			выбДата = врДок.ДатаДок;
			Прервать;
		КонецЦикла;
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с выбДата по выбДата;
		|Товар = Регистр.ПартииПоставщика.Товар;
		|ПартияПост = Регистр.ПартииПоставщика.ПартияПост;
		|ОстТов = Регистр.ПартииПоставщика.ОстатокТовара;
		|Функция остатокТовара = КонОст(ОстТов);
		|Группировка Товар без групп;
		|Группировка ПартияПост;
		|Условие(Товар = ВыбТовар);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		тбПартии = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(тбПартии,0,0);
		//*/------------------------
		
		тбПартии.Сортировать("остатокТовара");
		
		Если возврТЗ = 1 Тогда
			Возврат тбПартии;
		КонецЕсли;
		
		ЕдИзм = выбТовар.БазоваяЕдиница;
		
		спсПартии = СоздатьОбъект("СписокЗначений");
		тбПартии.ВыбратьСтроки();
		Пока тбПартии.ПолучитьСтроку() = 1 Цикл
			ост = тбПартии.ОстатокТовара;
			тхтПартияОст = "" + тбПартии.ПартияПост + " = "+ ост + " " + ЕдИзм;
			спсПартии.ДобавитьЗначение(тбПартии.ПартияПост,тхтПартияОст);
		КонецЦикла;
	Иначе
		ВремРег = СоздатьОбъект("Регистры");
		Отбор = СоздатьОбъект("СписокЗначений");
		Отбор.ДобавитьЗначение(выбТовар,"Товар");
		Отбор.ДобавитьЗначение(Склад,"Склад");
		глРассчитатьОстаткиПартийПост(Контекст, ВремРег, Отбор);
		глСформироватьТаблицуПартийПоставщика(Контекст, ВремРег,0,0,тбПартии);
				
		тбПартии.Сортировать("остатокТовара");
		
		Если возврТЗ = 1 Тогда
			Возврат тбПартии;
		КонецЕсли;
		
		ЕдИзм = выбТовар.БазоваяЕдиница;
		
		спсПартии = СоздатьОбъект("СписокЗначений");
		//тзТч = СоздатьОбъект("ТаблицаЗначений");
		//ВыгрузитьТабличнуюЧасть(тзТч);
		
		тбПартии.ВыбратьСтроки();
		Пока тбПартии.ПолучитьСтроку() = 1 Цикл
			ост = тбПартии.ОстатокТовара;
			тхтПартияОст = "" + тбПартии.ПартияПост + " = "+ ост + " " + ЕдИзм;
			спсПартии.ДобавитьЗначение(тбПартии.ПартияПост,тхтПартияОст);
		КонецЦикла;
		
	КонецЕсли;
	Возврат спсПартии;
КонецФункции // получитьСписокПартийПоставщика

//======================================================================
Функция ПолучитьПартиюПостПоКоличеству(выбТовар,кво,коэф, ОстатокПартии = 0)
	тзПартийПост = получитьСписокПартийПоставщика(выбТовар,1);
	Если тзПартийПост.КоличествоСтрок() <> 0 Тогда
		ищемКво = кво * коэф;
		тзПартийПост.ВыбратьСтроки();
		Пока тзПартийПост.ПолучитьСтроку() = 1 Цикл
			Если тзПартийПост.ОстатокТовара >= ищемКво Тогда
				Возврат тзПартийПост.ПартияПост;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Предупреждение("Не найдена партия поставщика для товара " + Товар.Код + " " + Товар + " с необходимым количеством.");
	Возврат 0;
КонецФункции // ПолучитьПартиюПостПоКоличеству

Функция ОткрытьПодборПартииПоставщика(выбТовар)
	спсПартии = получитьСписокПартийПоставщика(выбТовар);
	выбПартия = "";
	Если спсПартии.ВыбратьЗначение(выбПартия,,,15,1) <> 1 Тогда
		Возврат 0;
	КонецЕсли;
	ПартияПост = выбПартия;
	Возврат 1;
КонецФункции // ОткрытьПодборПартииПоставщика

//======================================================================
Функция ОткрытьПодборСкладскогоМеста()	
	выбМесто = ""; текДок = 0;
	Если ТекущийДокумент().Выбран() = 1 Тогда
		текДок = ТекущийДокумент();
	КонецЕсли;
	спсМест = дополненияТорговля.получитьСписокСкладскихМест(Товар,Склад,Единица,Сорт,текДок);
	Если спсМест.ВыбратьЗначение(выбМесто,,,15,1) <> 1 Тогда
		Возврат 0;
	КонецЕсли;
	складскоеМесто = выбМесто;
	Возврат 1;
КонецФункции // ОткрытьПодборПартииПоставщика

//*****************************************************************************
Процедура ПриНачалеВыбораЗначения(Рекв,Флаг)
	Флаг=0;
	Если Рекв="Фирма" Тогда
		ВыборФирмы();
	ИначеЕсли Рекв="Предпочтение" Тогда
		ВыборПредпочтения();
	ИначеЕсли Рекв = "ПартияПост" Тогда
		//проверяем разрешение
		Если Товар.Выбран() = 0 Тогда
			Флаг = 0; Возврат;
		КонецЕсли;
		Если дополненияТорговля.ПолучитьПараметрГруппыСправочника(Товар,"разрешеныПартииПост") = 0 Тогда
			Флаг = 0; Возврат;
		КонецЕсли;
		
		стр = 0;
		Если тзТЧ.НайтиЗначение(Товар,Стр,"Товар") = 1 Тогда
			начПартияПост = тзТЧ.ПолучитьЗначение(стр,"НачПартияПост");
			Если ПустоеЗначение(начПартияПост) = 1 Тогда
				тзТЧ.УстановитьЗначение(стр,"НачПартияПост",ПартияПост);
			КонецЕсли;
		Иначе
			тзТЧ.НоваяСтрока();
			тзТЧ.Товар = Товар;
			тзТЧ.НачПартияПост = ПартияПост;
		КонецЕсли;
		ОткрытьПодборПартииПоставщика(Товар);
		Флаг = 0;
	ИначеЕсли Найти(рекв,"складскоеМесто") <> 0 Тогда
		ОткрытьПодборСкладскогоМеста();
	ИначеЕсли Найти(рекв,"новоеСкладскоеМесто") <> 0 Тогда
		использоватьСкладскиеМеста = дополненияТорговля.ПолучитьПараметрЛюбогоТипаГруппыСправочника(Товар,"флСкладскоеМесто",РабочаяДата());
		Если использоватьСкладскиеМеста = 1 Тогда
			спсПарам = СоздатьОбъект("СписокЗначений");
			спсПарам.ДобавитьЗначение(НовыйСклад,"Склад");
			ОткрытьПодбор("Справочник.складскоеМесто",,спсПарам,0);
		КонецЕсли;
	Иначе
		Флаг=1;
	КонецЕсли;
КонецПроцедуры

Процедура ПриВыбореЗакладки(Ном,Зн)
	Форма.ИспользоватьСлой("Общий," + Зн,2);
КонецПроцедуры

//******************************************************************************
Процедура ПриОткрытии()
	//+ralex, 2017-02-16 17:11:28
	спс = сорт_ПолучитьСписокСортов();
	спс.Выгрузить(спсСорта);
	
	текПоз = спсСорта.НайтиЗначение(Сорт);
	Если текПоз <> 0 Тогда
		спсСорта.ТекущаяСтрока(текПоз);
	КонецЕсли;	
	
	стНеликвид = Неликвид;
	стСорт = Сорт;
	сорт_УстДоступностьРеквизитов(Контекст);
	//+/ralex, 2017-02-16 17:11:28

	НачальнаяДатаДокумента = ДатаДок;
	Если новый<>1 тогда
		новый=0;
	КонецЕсли;  	
	глПроверкаРазрешенияРедактирования(Контекст);
	глУстановкаРеквизитаТип(Контекст); 

	// Формируем информационные строки
	Форма.ТекстОснования.Заголовок(СокрП(Основание));
	//+ralex, 10-02-21 01:27
	Если ПравоПользователяПеремещение = 0 Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	//+/ralex, 10-02-21 01:27
		
	СтараяДата = ДатаДок;
	Форма.ИспользоватьЗакладки(1);

	Форма.Получил.Доступность(0);
	Форма.Отпустил.Доступность(0);
	Если этоКладовщикШК = 0 Тогда
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.ДобавитьЗначение("Основной","Основные");
		Форма.Закладки.ДобавитьЗначение("Склад","Склад");
		Если НазваниеНабораПрав() = "Администратор" Тогда
			Форма.Получил.Доступность(1);
			Форма.Отпустил.Доступность(1);
			//Форма.Закладки.ДобавитьЗначение("CRM","CRM");
		КонецЕсли;
		Форма.ИспользоватьСлой("Общий,Основной",2);  
	Иначе
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.ДобавитьЗначение("Склад","Склад");
		Форма.ИспользоватьСлой("общий,Склад",2);  
	КонецЕсли;
	//*/------------------------

	тзТЧ = СоздатьОбъект("ТаблицаЗначений");
	тзТЧ.НоваяКолонка("Товар","Справочник.Номенклатура");
	тзТЧ.НоваяКолонка("НачПартияПост","Справочник.ПартииТоваровПоставщика");

	УстДоступность();
КонецПроцедуры

Процедура ЗагрузитьСоСканера(Данные)
	// Определение типа штрих-кода
	Лев2 = Лев(Данные,2);
	Если Лев2 = "50" Тогда//сотрудник
		текОтгружен = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"отгружен");
		Если текОтгружен = 1 Тогда
			перемещениеПолучен = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"перемещениеПолучен");
			Если перемещениеПолучен = 1 Тогда
				Предупреждение("По документу уже было получение товара.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		спрСотр = СоздатьОбъект("Справочник.Сотрудники");
		Если спрСотр.НайтиПоРеквизиту("ШтрихКод",Данные,1) = 0 Тогда
			Сообщить("Сотрудник с ШК " + Данные + " не найден.");
			Форма.Закрыть(0);
			Возврат;
		КонецЕсли;
		
		текСотр = спрСотр.ТекущийЭлемент();
		//ищем пользователя
		спрПользователи = СоздатьОбъект("Справочник.Пользователи");
		спрПользователи.ВыбратьЭлементы();
		Пока спрПользователи.ПолучитьЭлемент() = 1 Цикл
			Если спрПользователи.сотрудник = текСотр Тогда
				//*ralex, 10-08-22 00:08
				//Если спрПользователи.флКладовщик = 1 Тогда
				//	Если текОтгружен = 1 Тогда
				//		текДатаОтгрузки = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"датаОтгрузки");
				//		Предупреждение("По документу " + номерДок + " уже было получение " + текДатаОтгрузки + " !!!");
				//		Возврат;
				//	Иначе
				//		дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"отгружен",1);
				//		дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"датаОтгрузки",ТекущаяДата());
				//		дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"времяОтгрузки",ТекущееВремя());
				//		СкладОтгрузки = Склад;
				//		СкладНеОтгрузки = 0;
				//		Отпустил = текСотр;
				//		Если Записать() = 1 Тогда
				//			//Сообщить("Метка ""Отгружено"" установлена.");
				//			Форма.Закрыть(0);
				//		Иначе
				//			Предупреждение("МЕТКА ПОЛУЧЕНИЯ НЕ УСТАНОВЛЕНА. ПОВТОРИТЕ ПОПЫТКУ.");
				//			Возврат;
				//		КонецЕсли;
				//	КонецЕсли;
				//	Возврат;
				//КонецЕсли;
				// -------- заменено на:
				Если спрПользователи.флКладовщик = 1 Тогда
					//Если текОтгружен = 1 Тогда
					//	Если перемещениеПолучен = 1 Тогда
					//		текДатаПолучения = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"перемещениеДатаОтгрузки");
					//		Предупреждение("По документу " + номерДок + " уже было получение " + текДатаПолучения + " !!!");
					//		Возврат;
					//	КонецЕсли;
					//КонецЕсли;
					Если текОтгружен = 0 Тогда
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"отгружен",1);
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"датаОтгрузки",ТекущаяДата());
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"времяОтгрузки",ТекущееВремя());
						СкладОтгрузки = Склад;
						СкладНеОтгрузки = 0;
						Отпустил = текСотр;
						Если Записать() = 1 Тогда
							//Сообщить("Метка ""Отгружено"" установлена.");
							Форма.Закрыть(0);
						Иначе
							Предупреждение("МЕТКА ОТГРУЗКИ НЕ УСТАНОВЛЕНА. ПОВТОРИТЕ ПОПЫТКУ.");
							Возврат;
						КонецЕсли;
					ИначеЕсли перемещениеПолучен = 0 Тогда
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"перемещениеПолучен",1);
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"перемещениеДатаПолучения",ТекущаяДата());
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"перемещениеВремяПолучения",ТекущееВремя());
						//СкладОтгрузки = Склад;
						//СкладНеОтгрузки = 0;
						Получил = текСотр;
						Если Записать() = 1 Тогда
							//Сообщить("Метка ""Отгружено"" установлена.");
							Форма.Закрыть(0);
						Иначе
							Предупреждение("МЕТКА ПОЛУЧЕНИЯ НЕ УСТАНОВЛЕНА. ПОВТОРИТЕ ПОПЫТКУ.");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					Возврат;
				КонецЕсли;
				//*/------------------------
			КонецЕсли;
		КонецЦикла;
					
		Для сч = 1 по 8 Цикл
			текЗн = ПолучитьАтрибут("грузчик" + сч);
			Если ПустоеЗначение(текЗн) = 1 Тогда
				УстановитьАтрибут("грузчик" + сч,текСотр);
				Записать();
				Форма.Закрыть(0);
				Возврат;
			ИначеЕсли текЗн = текСотр Тогда
				Сообщить("Сотрудник " + текСотр + " уже указан.");
				Форма.Закрыть(0);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ШтрихКодИмеетПрефикс=1 Тогда
			Если Найти("MPJS",Лев(Данные,1))<>0 Тогда
				// Штрих-код определяет товар
				Данные=Сред(Данные,2,СтрДлина(Данные)-1);
			Иначе
				Сообщить("Формат считанного штрих-кода не предназначен для товаров");
			КонецЕсли;
		КонецЕсли;
		
		Тов=СоздатьОбъект("Справочник.Номенклатура");
		Упак=СоздатьОбъект("Справочник.Единицы");
		
		нашлиШК = 0;
		
		// Используется основной штрих-код товара
		// или свой внутренний штрих-код товара с префиксом "20,21"
		Если Упак.НайтиПоРеквизиту("ШтрихКод",Данные,1) <> 0 Тогда
			нашлиШК = 1;
			Упаковка=Упак.ТекущийЭлемент();
			Тов=Упаковка.Владелец;
			Сообщить("" + Данные + " " + Тов.Код + " " + Тов.Наименование);
		КонецЕсли;
		
		Если нашлиШК = 0 Тогда
			//Лев2 = Лев(Данные,2);
			//Если Лев2 = "22" Тогда
			//	//вероятно Используется свой внутренний штрих-код товара
			//	//хотя уже нарвались что поставщик на свой товар поставил такие коды :(
			//	// Штрих-код построен по коду товара и весу
			//	Если Тов.НайтиПоКоду(Сред(Данные,3,5))=0 Тогда
			//		Сообщить("Товар с кодом "+Сред(Данные,3,5)+" не найден");
			//		Возврат;
			//	Иначе
			//		Упаковка = Тов.ЕдиницаПоУмолчанию;
			//		Сообщить("" + Данные + " " + Тов.Код + " " + Тов.Наименование);
			//	КонецЕсли;
			//Иначе
				Сообщить("Товар со штрих кодом "+Данные+" не найден");
				Возврат;
			//КонецЕсли;
		КонецЕсли;
		
		тзТЧ = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(тзТЧ);

		стр = 0;
		Если тзТЧ.НайтиЗначение(Тов,стр,"Товар") = 1 Тогда
			тзТЧ.ПолучитьСтрокуПоНомеру(стр);
			//проверяем единицу измерения
			Если тзТЧ.Единица = Упаковка Тогда
				тзТЧ.КвоШК = тзТЧ.КвоШК + 1;
			Иначе
				//пересчет
				врКво =  1/тзТЧ.Единица.Коэффициент * Упаковка.Коэффициент;
				тзТЧ.КвоШК = тзТЧ.КвоШК + врКво;
			КонецЕсли;
		Иначе
			//не нашли
			Сообщить("товар " + Тов.Код + " " + Тов +" не найден в документе!","!!!");
		КонецЕсли;
		ЗагрузитьТабличнуюЧасть(тзТЧ);
		Если стр <> 0 Тогда
			АктивизироватьСтроку(стр);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)	// Предопределенная процедура
	//Сообщить(Данные);
	//+ralex, 01-08-22 21:36
	Если РаботаСоСканеромШтрихКода<>2 Тогда
		Возврат;
	КонецЕсли;
	Если Событие="BarCodeValue"	Тогда
		
		Если Scaner <> 0 Тогда
			Если Scaner.OldVersion<>0 Тогда
				//Работа драйвера совместима с предыдущей версиией
				// Источник="BarCodeScaner" (для других устройств свои названия)
				//Событие="BarCodeValue", Данные=ПолученныеДанные
				//Сообщить("Old Version <> 0");
				//Сообщить("Источник: "+Строка( Источник ));
				//Сообщить("Событие: "+Строка( Событие ));
				//Сообщить(Строка("Данные от устройства: "+ Данные));
			Иначе
				//Работа драйвера не совместима с предыдущей версиией
				// Источник="BarCodeScaner" (для других устройств свои названия)
				////Событие="BarCodeValue", Данные=НомерСобытия
				//Сообщить("Old Version = 0");
				Scaner.EventNumber=Число(Данные);
				//Сообщить("Данные от устройства: "+Scaner.ScanData);
				//Сообщить("Порт: "+Scaner.PortDescription);
				//Сообщить("Модель: "+Scaner.DeviceDescription);
				//Сообщить("Лог. устройство: " + Строка(Scaner.CurrentDeviceNumber) + " | " + Scaner.CurrentDeviceName);
				Scaner.DeleteEvent();
			КонецЕсли;
			Scaner.DataEventEnabled = 1;
			//Сообщить("Количество сообщений "+Строка(Scaner.DataCount));
			Если Константа.Отладка = Нет Тогда
				Данные = Scaner.Данные; //отключить для отладки эмулятором
			КонецЕсли;
		ИначеЕсли СканерШтрихКода <> 0 Тогда
			СканерШтрихКода.ПосылкаДанных = 1;
		КонецЕсли;
		
		ЗагрузитьСоСканера(Данные);
	КонецЕсли;
	//+/------------------------
	
	//-ralex, 01-08-22 21:35
	//Если РаботаСоСканеромШтрихКода=2 Тогда
	//	Если Событие="BarCodeValue" Тогда
	//		ЗагрузитьСоСканера(Данные);
	//	КонецЕсли;
	//	СканерШтрихКода.ПосылкаДанных=1; //выкл при отладке с эмулятором вн. события
	//КонецЕсли;
	//-/------------------------
КонецПроцедуры

//*****************************************************************************
Процедура ОбработкаПодбора(Выб) //Предопределенная процедура	
	//+ralex, 03-01-24 21:14
	Попытка
		Если Выб.Вид() = "СкладскоеМесто" Тогда
			новоеСкладскоеМесто = Выб;
			Возврат;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	//+/------------------------
	глПриОбработкеПодбора(Выб,Контекст);
КонецПроцедуры //Обработка подбора

//*****************************************************************************
Процедура ПриЗаписи() //Предопределенная процедура    
	новый=0;
	Если ШтрКод = 0 Тогда
		ШтрКод = СформироватьШтрихКодДокумента(Контекст,ТекущийДокумент());
	КонецЕсли;

	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;           
	попытка
		ПересчетРегистров();		
		Рег=СоздатьОбъект("Регистр.ПартииТоваров");
		Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
		
		Пока Рег.ПолучитьДвижение()=1 Цикл  
			
			Если ТипУчета = Упр Тогда
				Если ПустоеЗначение(Рег.Фирма)=0 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ПустоеЗначение(Рег.Фирма)=1 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НомСтрДок = Рег.НомерСтроки();
			ПолучитьСтрокуПоНомеру(НомСтрДок);
			
			СуммаУчета=Рег.Стоимость;
			попытка      
				ЦенаУчета=Рег.Стоимость/Рег.ОстатокТовара;
			исключение
			конецпопытки;	
		КонецЦикла;	
	исключение
	КонецПопытки;	
	
	Сорт= сорт_ПолучитьСорт(Контекст);

	//контроль изменения партии поставщика пользователем на партию с большим остатком
	Если тзТЧ.КоличествоСтрок() <> 0 Тогда
		тзТЧ.ВыбратьСтроки();
		Пока тзТЧ.ПолучитьСтроку() = 1 Цикл
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если Товар = тзТЧ.Товар Тогда
					ОстатокМинПартии = 0;
					минПартия = ПолучитьПартиюПостПоКоличеству(Товар,Количество,Коэффициент,ОстатокМинПартии);
					Если (ПартияПост <> минПартия) и (тзТЧ.НачПартияПост <> ПартияПост) Тогда //проверяем была ли она при открытии
						тхтИзм = "нач. партия = " + тзТЧ.НачПартияПост + " изменена на " + ПартияПост + " док: " + НомерДок + " " + Вид();
						ЗаписьЖурналаРегистрации(тхтИзм,,"#измПартииПост",Товар,2);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	ГруппаПользователей = Автор.Родитель;
	//+ralex, 13-12-21 00:02
	Если ПустаяСтрока(id_задачиВ_CRM) = 1 Тогда
		СтатусЗадачиВCRM = 0;
	ИначеЕсли ЗадачаВCRMВыполнена = 0 Тогда
		СтатусЗадачиВCRM = 1;
	ИначеЕсли ЗадачаВCRMВыполнена = 1 Тогда
		СтатусЗадачиВCRM = 2;
	КонецЕсли;
	//+/------------------------
КонецПроцедуры
                                                                        
Форма.Товар.ВыполнятьФормулуТолькоПриИзменении(1);

//*****************************************************************************
//Инициализирум список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|СтруктураПодчиненности,
	|ДвиженияДокумента,
	|ВводНаОсновании,
	|ОткрытьВЖурнале,
	|Подчиненные,
	|ИзмКомментария");

этоКладовщикШК = ?(НазваниеНабораПрав() = "КладовщикШК",1,0);
дополненияТорговля = СоздатьОбъект("дополненияТорговля");	
спрКонтрПрава = СоздатьОбъект("КонтрагентыПрава");
ПравоПользователяПеремещение = спрКонтрПрава.ПолучитьПравоПользователя(,"флПеремещение"); 
ПересчетРегистров();