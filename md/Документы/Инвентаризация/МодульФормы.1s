//*****************************************************************************
// Описание переменных 
Перем Дат;
Перем КодыСтатусов;
Перем СписокПечати;
Перем СписокДействий;
Перем СтараяДата;           
Перем спс,счетчикШК; // для ШК +ralex, 22-06-19 12:20
Перем  Имя,выбКаталог,ПутьКФайлу;
//перем дополненияТорговля;
Перем НачальнаяДатаДокумента; // Для контроля даты документа
Перем ПравоПользователяИнв;
перем складЛенина;

Процедура ЗагрузитьСоСканера(Данные,квоШк = 1,текСорт,текПартияПоставщика = "") Далее

//======================================================================
Функция показатьСоСканера()
	Возврат ?(соСканера = 0,0,1);
КонецФункции // показатьСоСканера

//Для отладки
Процедура ГенерироватьСобытие(выбШК = "")
	Сообщить(ШтрКод);

	Если выбШК = "" Тогда
		выбШК = глВосстановитьЗначение("последнийШК","выбШК",0);
		Если выбШК = 0 Тогда
			выбШК = ШтрКод;
		КонецЕсли;
		Если ВвестиСтроку(выбШК,"введите штрихкод",13) <> 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	Сервис.ВнешнееСобытие(Источник,"BarCodeValue",выбШК);
	глСохранитьЗначение("последнийШК","выбШК",выбШК);
КонецПроцедуры // ГенерироватьСобытие

//======================================================================
Процедура ПолучитьДанныеСоСканераШК()
	парам = "";
	Если ВвестиСтроку(парам,"Введите штрихкод",13,0,20) <> 1 Тогда
		Возврат;
	КонецЕсли;
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	Сервис.ВнешнееСобытие(Источник,"BarCodeValue",парам);
КонецПроцедуры // ПолучитьДанныеСоСканераШК()

Функция ПоставитьЗадачуВCRM()
	спсПарам = СоздатьОбъект("Структура");
	спсПарам.Вставить("Заголовок", " " + ТекущийДокумент());
	спсПарам.Вставить("Описание", СокрЛП(ОписаниеЗадачи));
	спсПарам.Вставить("ДатаНачала", ДатаДок);
	спсПарам.Вставить("ДатаКонца", срокИсполненияЗадачи);
	спсПарам.Вставить("users_id", СотрудникЗадачи);
	спсПарам.Вставить("конт", глВернутьКонтекст(Контекст));
	
	API_CRM = СоздатьОбъект("API_CRM");
	рез = API_CRM.ПоставитьЗадачу_API(спсПарам);
	Если рез <> 0 Тогда
		id_задачиВ_CRM = СокрЛП(id_задачиВ_CRM) + ?(ПустаяСтрока(id_задачиВ_CRM) = 1,"",",") + рез;
		Записать();
	КонецЕсли;
	Возврат рез;  //если о то задача не поставлена
КонецФункции // ПоставитьЗадачуВCRM()

Процедура помощникВводаПартий()
	ОткрытьФорму("Отчет",Контекст,КаталогИБ() + "ExtForms\помощникВводаПартий.ert");
КонецПроцедуры

//*****************************************************************************
// "служебные" функции и процедуры 

//======================================================================
Процедура РассчитатьСтоимостьПоСтроке()
	Перем текЦена,текВалюта;
	Если Количество = 0 Тогда //добавили в ручную
		Если ИнвКоличество = 0 Тогда
			сообщить("Не указано реальное количество. Сумма = 0.");
			СтоимостьРеально=0;
			Возврат;
		КонецЕсли;
		
		Если глПолучитьЦенуТовара(Константа.Закупочная,Товар,Единица,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
			Сообщить("Для товара " + Товар + " не найдена закупочная цена.","!!!");
			СтоимостьРеально=0;
		Иначе
			СтоимостьРеально = глПересчет(ИнвКоличество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
		КонецЕсли;
	Иначе
		СтоимостьРеально = Стоимость/количество*ИнвКоличество;
	КонецЕсли;
КонецПроцедуры // РассчитатьСтоимостьПоСтроке

Процедура РассчитатьСтоимостьПоСтрокеТЗ(тз)
	Перем текЦена,текВалюта;
	Если тз.Количество = 0 Тогда //добавили в ручную
		Если тз.ИнвКоличество = 0 Тогда
			сообщить("Не указано реальное количество. Сумма = 0.");
			тз.СтоимостьРеально=0;
			Возврат;
		КонецЕсли;
		
		Если глПолучитьЦенуТовара(Константа.Закупочная,тз.Товар,тз.Единица,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
			Сообщить("Для товара " + тз.Товар + " не найдена закупочная цена.","!!!");
			тз.СтоимостьРеально=0;
		Иначе
			тз.СтоимостьРеально = глПересчет(тз.ИнвКоличество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
		КонецЕсли;
	Иначе
		тз.СтоимостьРеально = тз.Стоимость/тз.количество*тз.ИнвКоличество;
	КонецЕсли;
КонецПроцедуры // РассчитатьСтоимостьПоСтроке

//======================================================================
Функция ВыбратьФайл()
	Рез =  ФС.ВыбратьФайл(0,Имя,выбКаталог,"Выберите файл со штрих-кодами","(*.txt)|*.txt","txt");
	
	ПутьКФайлу = "";
	Если Прав(выбКаталог,1) <> "\" Тогда
		выбКаталог = выбКаталог + "\";
	КонецЕсли;
	ПутьКФайлу = выбКаталог + Имя;
КонецФункции // ВыбратьФайл

//*****************************************************************************
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
	Заголовок = "Инвентаризация";
	Название  = "Инвентаризация №";
	Заголовок = Заголовок + глЗаголовок(Контекст);
	Форма.Заголовок(Заголовок);     
	Возврат Название;
КонецФункции //ЗаголовокФормы

//******************************************************************************
Процедура ОбновитьНадписи()
	// Формируем информационные строки
	Форма.ТекстВалюты.Заголовок(глСтрокаВалюты(Контекст));
	Форма.ТекстОснования.Заголовок(СокрП(Основание));
КонецПроцедуры

//******************************************************************************
//*ralex, 24-01-22 21:13
//Процедура НаборСпецификацииПоСкладу()
//	УдалитьСтроки();
//	ВремРегистры=СоздатьОбъект("Регистры");
//	Рег=ВремРегистры.ПартииТоваров;
//	Запрос=СоздатьОбъект("Запрос");
//	//*ralex, 05-01-21 22:47
//	//Если ДатаДок>=ПолучитьДатуТА() Тогда
//	//	ДатаДок=ПолучитьДатуТА();
//	//	ТекстЗапроса="";
//	//Иначе
//	//	//*ralex, 05-01-21 22:35
//	//	//ДатаКон=ДатаДок-1;
//	//	//ТекстЗапроса="
//	//	//|ПЕРИОД С ДатаКон По ДатаДок;";
//	//	// -------- заменено на:
//	//	ДатаКон=ДатаДок-1;
//	//	Если Выбран() = 0 Тогда
//	//		Попытка
//	//			Записать();
//	//		Исключение
//	//			Сообщить("Перед заполнением документ должен быть записан.");
//	//			Возврат;
//	//		КонецПопытки;
//	//	КонецЕсли;
//	//	выбДата = СформироватьПозициюДокумента(ТекущийДокумент(),-1);
//	//	ТекстЗапроса="
//	//	|ПЕРИОД С ДатаКон По выбДата;";
//	//	//*/ralex, 05-01-21 22:35
//	//КонецЕсли;
//	// -------- заменено на:
//	ДатаКон=ДатаДок-1;
//	//*ralex, 05-01-21 23:55
//	//Попытка
//	//	Записать();
//	//Исключение
//	//	Сообщить("Перед заполнением документ должен быть записан.");
//	//	Возврат;
//	//КонецПопытки;
//	// -------- заменено на:
//	ДатаКон=ДатаДок-1;
//	Если Выбран() = 0 Тогда
//		Сообщить("Перед заполнением документ должен быть записан.");
//		Возврат;
//	КонецЕсли;
//	Если ДатаДок <> СтараяДата Тогда
//		Сообщить("Перед заполнением документ должен быть записан.");
//		Возврат;
//	КонецЕсли;
//	//*/ralex, 05-01-21 23:55
//	выбДата = СформироватьПозициюДокумента(ТекущийДокумент(),-1);
//	ТекстЗапроса="
//	|ПЕРИОД С ДатаКон По выбДата;";
//	//*/ralex, 05-01-21 22:35
//	//*/ralex, 05-01-21 22:47
//	ТекстЗапроса=ТекстЗапроса+"
//	|ИзмФирма=Регистр.ОстаткиТоваров.Фирма;
//	|ИзмТовар=Регистр.ОстаткиТоваров.Товар;
//	|ИзмСклад=Регистр.ОстаткиТоваров.Склад;
//	|ИзмСорт=Регистр.ОстаткиТоваров.Сорт;
//	|Кол=Регистр.ОстаткиТоваров.ОстатокТовара;";
//	Если ТипУчета>Упр Тогда
//		ТекстЗапроса=ТекстЗапроса+"
//		|Условие (ИзмФирма=Фирма);";
//		
//		Рег.УстановитьЗначениеФильтра("Фирма",Фирма,1);
//	Иначе
//		ТекстЗапроса=ТекстЗапроса+"
//		|Условие (ИзмФирма=глПустаяФирма);";
//		
//		Рег.УстановитьЗначениеФильтра("Фирма",глПустаяФирма,1);
//	КонецЕсли;
//	
//	//+ralex, 22-06-19 12:04
//	Если товарнаяГруппа.Выбран() = 1 Тогда
//		ТекстЗапроса=ТекстЗапроса+"
//		|Условие (измТовар в товарнаяГруппа);";
//	КонецЕсли;
//	//+/ralex, 22-06-19 12:04
//	Если выбСорт.Выбран() = 1 Тогда
//		ТекстЗапроса=ТекстЗапроса+"
//		|Условие (измСорт = выбСорт);";
//	КонецЕсли;
//	ТекстЗапроса=ТекстЗапроса+"
//	|Группировка ИзмТовар Без групп;// Упорядочить по ИзмТовар.Код;
//	|Функция КонКол=КонОст(Кол);
//	|";
//	Если ТипИнвентаризации=2 Тогда
//		//  <по складу>
//		спСтатусы = СоздатьОбъект("СписокЗначений");
//		Если Склад.Выбран()=1 Тогда
//			ТекстЗапроса=ТекстЗапроса+"
//			|Условие (ИзмСклад=Склад);";
//			                                
//			Если Склад.ВидСклада = Перечисление.ВидыСкладов.Оптовый Тогда
//				спСтатусы.ДобавитьЗначение(Купленный);
//				спСтатусы.ДобавитьЗначение(Принятый);
//				спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);
//			ИначеЕсли Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный Тогда
//				спСтатусы.ДобавитьЗначение(РозницаКупленный);
//				спСтатусы.ДобавитьЗначение(РозницаПринятый);
//				спСтатусы.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);				
//			КонецЕсли;			
//		Иначе
//			спСтатусы.ДобавитьЗначение(Купленный);
//			спСтатусы.ДобавитьЗначение(Принятый);
//			спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);
//			спСтатусы.ДобавитьЗначение(РозницаКупленный);
//			спСтатусы.ДобавитьЗначение(РозницаПринятый);
//			спСтатусы.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);				
//		КонецЕсли;
//		Рег.УстановитьЗначениеФильтра("Статус",спСтатусы,2);
//	КонецЕсли;
//	Флаг=Запрос.Выполнить(ТекстЗапроса);
//	Если Флаг=0 Тогда
//		Предупреждение("запрос по регистру ОстаткиТоваров не выполнился!");
//		Возврат;
//	КонецЕсли;
//	Если ДатаДок<ПолучитьДатуТА() Тогда
//		Рег.ВременныйРасчет();
//		ВремРегистры.РассчитатьРегистрыНа(ДатаДок);
//	КонецЕсли;
//	Пока Запрос.Группировка("ИзмТовар") = 1 Цикл
//		Если Запрос.ИзмТовар.Выбран()=0 Тогда
//			Продолжить;
//		КонецЕсли;
//		НоваяСтрока();
//		Товар=Запрос.ИзмТовар;
//		Единица = глВернутьБазовуюЕдиницуТовара(Товар);
//		Коэффициент = Единица.Коэффициент;
//		Если ТипУчета>Упр Тогда
//			ВП=Гривня;
//		Иначе
//			ВП=Товар.ВалютаУчета;
//		КонецЕсли;
//		Количество=Запрос.КонКол; 
//		Сорт = Запрос.ИзмСорт;
//		//*ralex, 22-06-19 14:10
//		//ИнвКоличество=Запрос.КонКол;
//		// -------- заменено на:
//		ИнвКоличество=0;
//		//*/ralex, 22-06-19 14:10
//		Рег.УстановитьЗначениеФильтра("Товар",Запрос.ИзмТовар,1);
//		тбИтоги = 0;
//		ОбщаяСтоимость = 0;
//		ОбщееКоличество = 0;
//		Рег.ВыгрузитьИтоги(тбИтоги,1,1);
//		тбИтоги.Свернуть("Товар","ОстатокТовара,Стоимость");
//		
//		//*ralex, 24-12-20 22:55
//		//тбИтоги.ВыбратьСтроки();
//		//Если тбИтоги.ПолучитьСтроку()=1 Тогда
//		//	ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,Дата_Курса,Валюта,Дата_Курса);
//		//	ОбщееКоличество = тбИтоги.ОстатокТовара;
//		//КонецЕсли;
//		//
//		// -------- заменено на:
//		тбИтоги.ВыбратьСтроки();
//		Если тбИтоги.ПолучитьСтроку()=1 Тогда
//			текЦена = 0; текВалюта = "";
//			Если глПолучитьЦенуТовара(Константа.Закупочная,Товар,Единица,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
//				Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
//				ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,Дата_Курса,Валюта,Дата_Курса);
//				ОбщееКоличество = тбИтоги.ОстатокТовара;
//			Иначе
//				ОбщееКоличество = тбИтоги.ОстатокТовара;
//				ОбщаяСтоимость = глПересчет(ОбщееКоличество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
//			КонецЕсли;
//		КонецЕсли;
//		
//		//*/ralex, 24-12-20 22:55
//		Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Количество/ОбщееКоличество);
//	КонецЦикла;
//КонецПроцедуры	// НаборСпецификацииПоСкладу
// -------- заменено на:

Функция ПолучитьНеотгруженныйТоварДляРасшифровки(выбТовар = 0,выбПартияПост = 0)
	Перем Запрос, ТекстЗапроса, Таб, Заг, Заг1;
	
	ВыбКонПериода = ПолучитьДатуТА();
	ВыбНачПериода = ?(Константа.ГлубинаПросмотраДокНеотгруженных = 0,Дата(0),ВыбКонПериода - Константа.ГлубинаПросмотраДокНеотгруженных);
	спсСклады = СоздатьОбъект("СписокЗначений");
	спсСклады.ДобавитьЗначение(Склад);
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ДатаДок;
	|РасходнаяНакладная = Документ.РасходнаяНакладная.ТекущийДокумент;
	|ВидОперации = Документ.РасходнаяНакладная.ВидОперации;
	|Склад = Документ.РасходнаяНакладная.Склад;
	|Товар = Документ.РасходнаяНакладная.Товар;
	|ПартияПост = Документ.РасходнаяНакладная.ПартияПост;
	|Количество = Документ.РасходнаяНакладная.Количество;
	|Коэффициент = Документ.РасходнаяНакладная.Коэффициент;
	|Единица = Документ.РасходнаяНакладная.Единица;
	|ВидТовара = Документ.РасходнаяНакладная.Товар.ВидТовара;
	|Группировка РасходнаяНакладная упорядочить по РасходнаяНакладная.ДатаДок;
	|Группировка Товар без групп;
	|Группировка ПартияПост;
	|Условие(ВидОперации = 0);
	|Условие(ВидТовара <> Перечисление.видыТоваров.Услуга);
	|"//}}ЗАПРОС
	;
	
	Если ПустоеЗначение(Склад) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Склад в спсСклады);";
	КонецЕсли;
	Если ПустоеЗначение(товарнаяГруппа) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Товар в товарнаяГруппа);";
	КонецЕсли;
	Если выбТовар <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Товар = выбТовар);";
	КонецЕсли;
	Если ПустоеЗначение(выбПартияПост) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(ПартияПост = выбПартияПост);";
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	//тзВрем = СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(тзВрем,1,0);
	//тзВрем.ВыбратьСтроку();
	
	тзТМЦ = СоздатьОбъект("ТаблицаЗначений");
	тзТМЦ.НоваяКолонка("ТМЦ","Справочник.Номенклатура");
	тзТМЦ.НоваяКолонка("Док","Документ");
	тзТМЦ.НоваяКолонка("ПартияПост","Справочник");
	тзТМЦ.НоваяКолонка("Кво","Число",12,2);

	спрСост = СоздатьОбъект("Справочник.служ_СостояниеДокумента");

	Пока Запрос.Группировка(1) = 1 Цикл //документ
		Если  спрСост.НайтиПоНаименованию(ЗначениеВСтрокуВнутр(Запрос.РасходнаяНакладная),0,1) = 1 Тогда
			Если спрСост.Отгружен = 1 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Заполнение полей Товар
		Пока Запрос.Группировка(2) = 1 Цикл
			// Заполнение полей партия поставщика
			Пока Запрос.Группировка(3) = 1 Цикл
				тзТМЦ.НоваяСтрока();
				тзТМЦ.ТМЦ = Запрос.Товар;
				тзТМЦ.Кво = Запрос.Количество * Запрос.Коэффициент; //в базовых
				тзТМЦ.Док = Запрос.РасходнаяНакладная;
				тзТМЦ.ПартияПост = Запрос.ПартияПост;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
//	тзТМЦ.ВыбратьСтроку();
	Возврат тзТМЦ;
КонецФункции // ПолучитьНеотгруженныйТоварДляРасшифровки

Функция ПолучитьНеОтгруженныйТовар()
	Перем Запрос, ТекстЗапроса, Таб, Заг, Заг1;
	
	ВыбКонПериода = ПолучитьДатуТА();
	ВыбНачПериода = ?(Константа.ГлубинаПросмотраДокНеотгруженных = 0,Дата(0),ВыбКонПериода - Константа.ГлубинаПросмотраДокНеотгруженных);
	спсСклады = СоздатьОбъект("СписокЗначений");
	спсСклады.ДобавитьЗначение(Склад);
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ДатаДок;
	|РасходнаяНакладная = Документ.РасходнаяНакладная.ТекущийДокумент;
	|Сорт = Документ.РасходнаяНакладная.Сорт;
	|ВидОперации = Документ.РасходнаяНакладная.ВидОперации;
	|Склад = Документ.РасходнаяНакладная.Склад;
	|Товар = Документ.РасходнаяНакладная.Товар;
	|ПартияПост = Документ.РасходнаяНакладная.ПартияПост;
	|Количество = Документ.РасходнаяНакладная.Количество;
	|Коэффициент = Документ.РасходнаяНакладная.Коэффициент;
	|Единица = Документ.РасходнаяНакладная.Единица;
	|ВидТовара = Документ.РасходнаяНакладная.Товар.ВидТовара;
	|Группировка РасходнаяНакладная упорядочить по РасходнаяНакладная.ДатаДок;
	|Группировка Товар без групп;
	|Группировка СтрокаДокумента;
	|Условие(ВидОперации = 0);
	|Условие(ВидТовара <> Перечисление.видыТоваров.Услуга);
	|"//}}ЗАПРОС
	;
	
	Если ПустоеЗначение(Склад) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Склад в спсСклады);";
	КонецЕсли;
	Если ПустоеЗначение(товарнаяГруппа) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Товар в товарнаяГруппа);";
	КонецЕсли;
	Если ПустоеЗначение(выбСорт) = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "Условие(Сорт = выбСорт);";
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	//тзВрем = СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(тзВрем,1,0);
	//тзВрем.ВыбратьСтроку();
	
	тзТМЦ = СоздатьОбъект("ТаблицаЗначений");
	тзТМЦ.НоваяКолонка("ТМЦ","Справочник.Номенклатура");
	тзТМЦ.НоваяКолонка("ПартияПост","Справочник.ПартииТоваровПоставщика");
	тзТМЦ.НоваяКолонка("Док","Документ");
	тзТМЦ.НоваяКолонка("Кво","Число",12,2);

	спрСост = СоздатьОбъект("Справочник.служ_СостояниеДокумента");

	Пока Запрос.Группировка(1) = 1 Цикл //документ
		Если  спрСост.НайтиПоНаименованию(ЗначениеВСтрокуВнутр(Запрос.РасходнаяНакладная),0,1) = 1 Тогда
			Если спрСост.Отгружен = 1 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Заполнение полей Товар
		Пока Запрос.Группировка(2) = 1 Цикл
			// Заполнение полей СтрокаДокумента
			Пока Запрос.Группировка(3) = 1 Цикл
				тзТМЦ.НоваяСтрока();
				тзТМЦ.ТМЦ = Запрос.Товар;
				тзТМЦ.партияПост = Запрос.партияПост;
				тзТМЦ.Кво = Запрос.Количество * Запрос.Коэффициент; //в базовых
				тзТМЦ.Док = Запрос.РасходнаяНакладная;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
//	тзТМЦ.ВыбратьСтроку();
	
	//+ralex, 01-05-23 23:26
	//по документам возможен вариант что учет по партиям отключили для товара а в РН еще стоит партия.
	тзТМЦ.ВыбратьСтроки();
	Пока тзТМЦ.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(тзТМЦ.ПартияПост) = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если дополненияТорговля.ПолучитьПараметрГруппыСправочника(тзТМЦ.ТМЦ,"разрешеныПартииПост") = 0 Тогда
			тзТМЦ.ПартияПост = ПолучитьПустоеЗначение(тзТМЦ.ПартияПост);
		КонецЕсли;
	КонецЦикла;
	тзТМЦ.Свернуть("ТМЦ,ПартияПост","Кво");
	//+/------------------------
	
	итзН = СоздатьОбъект("ИндексированнаяТаблица");
	итзН.Загрузить(тзТМЦ);
	итзН.ДобавитьИндекс("ТоварПартия","ТМЦ,ПартияПост");
	Возврат итзН;
КонецФункции // ПолучитьНеотгруженныйТовар

Функция ПолучитьКвоНеВыдано(тзТМЦ,текТовар,текПартияПост = 0)
	выбПартияПост = ?(текПартияПост = 0,ПолучитьПустоеЗначение("Справочник.ПартииТоваровПоставщика"),текПартияПост);
	стр = 0;
	спс = СоздатьОбъект("СписокЗначений");
	спс.ДобавитьЗначение(текТовар);
	спс.ДобавитьЗначение(выбПартияПост);
	//тзТМЦ.УстаноовитьФильтр(спс,спс,"ТоварПартия");
	
	Если тзТМЦ.НайтиСтроку("ТоварПартия",спс,0,1) = 0 Тогда
		кво = 0;
	Иначе
		кво = тзТМЦ.Кво;
	КонецЕсли;

	Возврат кво;
КонецФункции // ПолучитьКвоНеВыдано(текТовар)

Процедура НаборСпецификацииПоСкладу()

	УдалитьСтроки();
	ВремРегистры=СоздатьОбъект("Регистры");
	Рег=ВремРегистры.ПартииТоваров;
	регППост = ВремРегистры.ПартииПоставщика;
	
	Запрос=СоздатьОбъект("Запрос");
	ДатаКон=ДатаДок-1;
	Если Выбран() = 0 Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	Если ДатаДок <> СтараяДата Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	выбДата = СформироватьПозициюДокумента(ТекущийДокумент(),-1);
	выбДата = Мин(выбДата,ПолучитьПозициюТА());
	
	ТекстЗапроса="
	|ПЕРИОД С выбДата По выбДата;";
	ТекстЗапроса=ТекстЗапроса+"
	|ИзмФирма=Регистр.ОстаткиТоваров.Фирма;
	|ИзмТовар=Регистр.ОстаткиТоваров.Товар;
	|ИзмСклад=Регистр.ОстаткиТоваров.Склад;
	|ИзмСорт=Регистр.ОстаткиТоваров.Сорт;
	|ИзмМесто=Регистр.ОстаткиТоваров.Место;
	|Кол=Регистр.ОстаткиТоваров.ОстатокТовара;";
	Если ТипУчета>Упр Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=Фирма);";
		
		Рег.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=глПустаяФирма);";
		
		Рег.УстановитьЗначениеФильтра("Фирма",глПустаяФирма,1);
	КонецЕсли;
	
	Если товарнаяГруппа.Выбран() = 1 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (измТовар в товарнаяГруппа);";
	КонецЕсли;
	Если выбСорт.Выбран() = 1 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (измСорт = выбСорт);";
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|Группировка ИзмТовар Без групп;// Упорядочить по ИзмТовар.Код;
	|Функция КонКол=КонОст(Кол);
	|";
	
	Если ТипИнвентаризации=2 Тогда
		//  <по складу>
		спСтатусы = СоздатьОбъект("СписокЗначений");
		Если Склад.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмСклад=Склад);";
			
			Если Склад.ВидСклада = Перечисление.ВидыСкладов.Оптовый Тогда
				спСтатусы.ДобавитьЗначение(Купленный);
				спСтатусы.ДобавитьЗначение(Принятый);
				спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);
			ИначеЕсли Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный Тогда
				спСтатусы.ДобавитьЗначение(РозницаКупленный);
				спСтатусы.ДобавитьЗначение(РозницаПринятый);
				спСтатусы.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);				
			КонецЕсли;			
		Иначе
			спСтатусы.ДобавитьЗначение(Купленный);
			спСтатусы.ДобавитьЗначение(Принятый);
			спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);
			спСтатусы.ДобавитьЗначение(РозницаКупленный);
			спСтатусы.ДобавитьЗначение(РозницаПринятый);
			спСтатусы.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);				
		КонецЕсли;
		Рег.УстановитьЗначениеФильтра("Статус",спСтатусы,2);
	КонецЕсли;
	Флаг=Запрос.Выполнить(ТекстЗапроса);
	Если Флаг=0 Тогда
		Предупреждение("запрос по регистру ОстаткиТоваров не выполнился!");
		Возврат;
	КонецЕсли;
	
	Если ДатаДок<ПолучитьДатуТА() Тогда
		Рег.ВременныйРасчет();
		регППост.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	тзТМЦ = ПолучитьНеОтгруженныйТовар();
	
	Пока Запрос.Группировка("ИзмТовар") = 1 Цикл
		текТовар = Запрос.ИзмТовар;
		текЕдиница = глВернутьБазовуюЕдиницуТовара(текТовар);
		Если Запрос.ИзмТовар.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
	
		Если ТипУчета>Упр Тогда
			ВП=Гривня;
		Иначе
			ВП=текТовар.ВалютаУчета;
		КонецЕсли;
		
		Рег.УстановитьЗначениеФильтра("Товар",текТовар,1);
		тбИтоги = 0;
		ОбщаяСтоимость = 0;
		ОбщееКоличество = 0;
	
		Рег.ВыгрузитьИтоги(тбИтоги,1,1);
		тбИтоги.Свернуть("Товар","ОстатокТовара,Стоимость");
		
		тбИтоги.ВыбратьСтроки();
		Если тбИтоги.ПолучитьСтроку()=1 Тогда
			текЦена = 0; текВалюта = "";
			Если глПолучитьЦенуТовара(Константа.Закупочная,текТовар,текЕдиница,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
				Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
				ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,Дата_Курса,Валюта,Дата_Курса);
				ОбщееКоличество = тбИтоги.ОстатокТовара;
			Иначе
				ОбщееКоличество = тбИтоги.ОстатокТовара;
				ОбщаяСтоимость = глПересчет(ОбщееКоличество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
			КонецЕсли;
		КонецЕсли;
		текЦена = глПересчет(текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
		
		тбППост = 0;
		Если дополненияТорговля.ПолучитьПараметрГруппыСправочника(текТовар,"разрешеныПартииПост") = 1 Тогда
			Если (Запрос.ИзмСорт = КондиционныйТовар) и (Склад = складЛенина) Тогда
				регППост.УстановитьЗначениеФильтра("Товар",текТовар,1);
				регППост.ВыгрузитьИтоги(тбППост,1,1);
				тбППост.Свернуть("Товар,ПартияПост","ОстатокТовара");
				Если тбППост.КоличествоСтрок() = 0 Тогда
					тбППост = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если тбППост <> 0 Тогда
			квоВсего = Запрос.КонКол;
			тбППост.ВыбратьСтроки();
			Пока тбППост.ПолучитьСтроку() = 1 Цикл
				пКво = тбППост.ОстатокТовара;
				
				НоваяСтрока();
				Товар=текТовар;
				Единица = глВернутьБазовуюЕдиницуТовара(Товар);
				Коэффициент = Единица.Коэффициент;
				Сорт = Запрос.ИзмСорт;
				ИнвКоличество=0;
				Количество = Мин(квоВсего,пКво);
				складскоеМесто = Запрос.ИзмМесто;
				Если Количество < пКво Тогда //не хватило товара по рег. "Остатки"
					Сообщить("Расхождение в учете. " + Товар.Код + " " + Товар + " остаток товара МЕНЬШЕ на " + (пКво - Количество) +" чем остаток по партиям поставщика.","!!!");
				КонецЕсли;
				тбППост.ОстатокТовара = тбППост.ОстатокТовара - Количество;
				квоВсего = квоВсего - Количество;
				ПартияПост = тбППост.ПартияПост;
				Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Количество/ОбщееКоличество);
				цена = ?(ОбщееКоличество = 0,текЦена,ОбщаяСтоимость/ОбщееКоличество);
				неОтгружено = ПолучитьКвоНеВыдано(тзТМЦ,текТовар,тбППост.ПартияПост);	
			КонецЦикла;
			
			Если квоВсего <> 0 Тогда //по партиям поставщика не хватило товара
				Сообщить("Расхождение в учете. " + Товар.Код + " " + Товар + " остаток товара БОЛЬШЕ чем остаток по партиям поставщика.","!!!");
				НоваяСтрока();
				Товар=текТовар;
				Единица = глВернутьБазовуюЕдиницуТовара(Товар);
				Коэффициент = Единица.Коэффициент;
				Сорт = Запрос.ИзмСорт;
				складскоеМесто = Запрос.ИзмМесто;
				ИнвКоличество=0;
				неОтгружено = ПолучитьКвоНеВыдано(тзТМЦ,текТовар);	
				Количество = квоВсего;
				квоВсего = квоВсего - Количество;
				цена = ?(ОбщееКоличество = 0,текЦена,ОбщаяСтоимость/ОбщееКоличество);
				Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Количество/ОбщееКоличество);
			ИначеЕсли тбППост.Итог("ОстатокТовара") <> 0 Тогда	
				Сообщить("по товару " + Товар.Код + " " + Товар + " осталось не распределено партий поставщика:");
				тбППост.ВыбратьСтроки();
				Пока тбППост.ПолучитьСтроку() = 1 Цикл
					Если тбППост.ОстатокТовара = 0 Тогда
						Продолжить;
					КонецЕсли;
					Сообщить("--- " + тбППост.ПартияПост + " ост = " + тбППост.ОстатокТовара);
				КонецЦикла;
			КонецЕсли;
		
		Иначе //нет партий поставщика
			НоваяСтрока();
			Товар=текТовар;
			Единица = глВернутьБазовуюЕдиницуТовара(Товар);
			Коэффициент = Единица.Коэффициент;
			Количество=Запрос.КонКол; 
			Сорт = Запрос.ИзмСорт;
			складскоеМесто = Запрос.ИзмМесто;
			ИнвКоличество=0;
			неОтгружено = ПолучитьКвоНеВыдано(тзТМЦ,текТовар);	
			цена = ?(ОбщееКоличество = 0,текЦена,ОбщаяСтоимость/ОбщееКоличество);
			Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Количество/ОбщееКоличество);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// НаборСпецификацииПоСкладу
//*/------------------------

//======================================================================
//т.к. запрос возвращает остаток в базовой единице а нам нужно в той, которая в табличной части
Функция ПолучитьЕдиницуИзмеренияИзТЧ(текТовар,текСорт,текПартия = 0)
	текПартия = ?(текПартия = 0,ПолучитьпустоеЗначение("Справочник.ПартииТоваровПоставщика"),текПартия);
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если (Товар = текТовар) и (сорт = текСорт)  и (текПартия = ПартияПост) Тогда
			Возврат Единица;
		КонецЕсли;
	КонецЦикла;
	Возврат гл_ВернутьЕдиницуИзмеренияТовара(текТовар.БазоваяЕдиница,текТовар,0); //не нашли такойнабор данных. Возвращаем единицу базовую.
КонецФункции // ПолучитьЕдиницуИзмеренияИзТЧ(текТовар,Запрос.ИзмСорт);

//======================================================================
Процедура ПерезаполнитьПоСкладу()
	//+ralex, 24-04-23 22:46
	Если Выбран() = 0 Тогда
		Сообщить("Документ должен быть записан. Запишите документ и повторите попытку.");
		Возврат;
	КонецЕсли;
	//+/------------------------
	тзТЧ = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тзТЧ);
//	итз.Загрузить(тзТЧ);
	тзТЧ.Заполнить(0,,,"Стоимость,Количество,неОтгружено");
	//итз.ДобавитьИндекс("ТмцСорт","Товар,Сорт,ПартияПост");
	//+ralex, 24-04-23 23:37
	тзТЧ.ВыбратьСтроки();
	Пока тзТЧ.ПолучитьСтроку() = 1 Цикл
		Если дополненияТорговля.ПолучитьПараметрГруппыСправочника(тзТЧ.Товар,"разрешеныПартииПост") = 0 Тогда
			тзТЧ.ПартияПост = 0;
		КонецЕсли;
	КонецЦикла;
	//+/------------------------
	
	ВремРегистры=СоздатьОбъект("Регистры"); //+ralex, 24-04-23 23:37
	Рег=ВремРегистры.ПартииТоваров;
	регППост = ВремРегистры.ПартииПоставщика;

	//Запрос по регистру Остатки
	Запрос=СоздатьОбъект("Запрос");
	
	//+ralex, 24-04-23 22:46
	Если Проведен() = 1 Тогда
		ДатаКон = СформироватьПозициюДокумента(ТекущийДокумент(),0);
		выбДата = ДатаКон;
	Иначе
		ДатаКон = СформироватьПозициюДокумента(ТекущийДокумент(),-1);
		выбДата = ДатаКон;
	КонецЕсли;
	//+/------------------------
	
	Если Выбран() = 0 Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	Если ДатаДок <> СтараяДата Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	ТекстЗапроса="
	|ПЕРИОД С ДатаКон По выбДата;";
	ТекстЗапроса=ТекстЗапроса+"
	|ИзмФирма=Регистр.ОстаткиТоваров.Фирма;
	|ИзмТовар=Регистр.ОстаткиТоваров.Товар;
	|ИзмСклад=Регистр.ОстаткиТоваров.Склад;
	|измСорт = Регистр.ОстаткиТоваров.Сорт;
	|Кол=Регистр.ОстаткиТоваров.ОстатокТовара;";
	Если ТипУчета>Упр Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=Фирма);";
		
		Рег.УстановитьЗначениеФильтра("Фирма",Фирма,1);
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=глПустаяФирма);";
		
		Рег.УстановитьЗначениеФильтра("Фирма",глПустаяФирма,1);
	КонецЕсли;
	
	Если товарнаяГруппа.Выбран() = 1 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (измТовар в товарнаяГруппа);";
	Иначе
		вртзТЧ = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(вртзТЧ);
		спсТовары = СоздатьОбъект("СписокЗначений");
		вртзТЧ.Выгрузить(спсТовары,,,"Товар");
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (измТовар в спсТовары);";
		вртзТЧ = 0;
	КонецЕсли;
	Если выбСорт.Выбран() = 1 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (измСорт = выбСорт);";
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|Группировка ИзмТовар Без групп;// Упорядочить по ИзмТовар.Код;
	|Группировка ИзмСорт Без групп;// 
	|Функция КонКол=КонОст(Кол);
	|";
	Если ТипИнвентаризации=2 Тогда
		//  <по складу>
		спСтатусы = СоздатьОбъект("СписокЗначений");
		Если Склад.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмСклад=Склад);";
			
			Если Склад.ВидСклада = Перечисление.ВидыСкладов.Оптовый Тогда
				спСтатусы.ДобавитьЗначение(Купленный);
				спСтатусы.ДобавитьЗначение(Принятый);
				спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);
			ИначеЕсли Склад.ВидСклада = Перечисление.ВидыСкладов.Розничный Тогда
				спСтатусы.ДобавитьЗначение(РозницаКупленный);
				спСтатусы.ДобавитьЗначение(РозницаПринятый);
				спСтатусы.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);				
			КонецЕсли;			
		Иначе
			спСтатусы.ДобавитьЗначение(Купленный);
			спСтатусы.ДобавитьЗначение(Принятый);
			спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);
			спСтатусы.ДобавитьЗначение(РозницаКупленный);
			спСтатусы.ДобавитьЗначение(РозницаПринятый);
			спСтатусы.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);				
		КонецЕсли;
		Рег.УстановитьЗначениеФильтра("Статус",спСтатусы,2);
	КонецЕсли;
	Флаг=Запрос.Выполнить(ТекстЗапроса);
	Если Флаг=0 Тогда
		Предупреждение("запрос по регистру ОстаткиТоваров не выполнился!");
		Возврат;
	КонецЕсли;
	//Конец Запрос по регистру Остатки
	
	Если ДатаДок<ПолучитьДатуТА() Тогда
		Рег.ВременныйРасчет();
		регППост.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыНа(ДатаДок);
	КонецЕсли;
	
	//******************************************************
	тзТМЦ = ПолучитьНеОтгруженныйТовар();
	
	Пока Запрос.Группировка("ИзмТовар") = 1 Цикл
		текТовар=Запрос.ИзмТовар;
		текЕдиница = глВернутьБазовуюЕдиницуТовара(текТовар);
		Если текТовар.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Запрос.Группировка("ИзмСорт") = 1 Цикл
			текСорт = Запрос.ИзмСорт;
			
			тбППост = 0;
			Если дополненияТорговля.ПолучитьПараметрГруппыСправочника(текТовар,"разрешеныПартииПост") = 1 Тогда
				Если (текСорт = Константа.КондиционныйТовар) и (Склад = складЛенина) Тогда //смотрим есть ли партии поставщика
					Если (Запрос.ИзмСорт = КондиционныйТовар)  Тогда
						регППост.УстановитьЗначениеФильтра("Товар",текТовар,1);
						регППост.ВыгрузитьИтоги(тбППост,1,1);
						тбППост.Свернуть("Товар,ПартияПост","ОстатокТовара");
						Если тбППост.КоличествоСтрок() = 0 Тогда
							тбППост = 0;
						КонецЕсли;
					КонецЕсли;				
				КонецЕсли;
			Иначе
				
			КонецЕсли;
			
			Если  тбППост = 0 Тогда //нет партий поставщика
				//добавляем строку
				тзТЧ.НоваяСтрока();
				тзТЧ.Товар=текТовар;
				текЕдиница = ПолучитьЕдиницуИзмеренияИзТЧ(текТовар,Запрос.ИзмСорт);
				тзТЧ.Единица = текЕдиница;
				тзТЧ.Коэффициент = текЕдиница.Коэффициент;
				Если ТипУчета>Упр Тогда
					ВП=Гривня;
				Иначе
					ВП=Товар.ВалютаУчета;
				КонецЕсли;
				тзТЧ.Количество = Запрос.КонКол * текЕдиница.коэффициент; //пресчет в ту единицу измерения кот. была указана в ТЧ документа (могли например ввести факт в упаковках)
				тзТЧ.Сорт = Запрос.ИзмСорт;
				тзТЧ.ИнвКоличество=0;
				тзТЧ.неОтгружено = ПолучитьКвоНеВыдано(тзТМЦ,текТовар);	
				тзТЧ.ПартияПост = 0;
				//считаем стоимость остатка товара
				Рег.УстановитьЗначениеФильтра("Товар",текТовар,1);
				тбИтоги = 0;
				ОбщаяСтоимость = 0;
				ОбщееКоличество = 0;
				Рег.ВыгрузитьИтоги(тбИтоги,1,1);
				тбИтоги.Свернуть("Товар","ОстатокТовара,Стоимость");
				
				тбИтоги.ВыбратьСтроки();
				Если тбИтоги.ПолучитьСтроку()=1 Тогда
					текЦена = 0; текВалюта = "";
					Если глПолучитьЦенуТовара(Константа.Закупочная,текТовар,текЕдиница,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
						Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
						ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,Дата_Курса,Валюта,Дата_Курса);
						ОбщееКоличество = тбИтоги.ОстатокТовара;
					Иначе
						ОбщееКоличество = тбИтоги.ОстатокТовара;
						ОбщаяСтоимость = глПересчет(ОбщееКоличество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
					КонецЕсли;
				КонецЕсли;
				
				тзТЧ.Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Запрос.КонКол/ОбщееКоличество); //кво в базовой единице измерения
				//конец считаем стоимость остатка товара
				
			Иначе //есть партии поставщика
				//считаем стоимость остатка товара
				//тзТЧ.ВыбратьСтроку();

				Рег.УстановитьЗначениеФильтра("Товар",текТовар,1);
				тбИтоги = 0;
				ОбщаяСтоимость = 0;
				ОбщееКоличество = 0;
				Рег.ВыгрузитьИтоги(тбИтоги,1,1);
				тбИтоги.Свернуть("Товар","ОстатокТовара,Стоимость");
				
				тбИтоги.ВыбратьСтроки();
				Если тбИтоги.ПолучитьСтроку()=1 Тогда
					текЦенаБаз = 0; текВалюта = "";
					Если глПолучитьЦенуТовара(Константа.Закупочная,текТовар,Единица,ДатаДок,текЦенаБаз,текВалюта) = 0 Тогда //нет закупочной цены
						Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
						ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,Дата_Курса,Валюта,Дата_Курса);
						ОбщееКоличество = тбИтоги.ОстатокТовара;
						текЦенаБаз = ?(ОбщееКоличество = 0,0,ОбщаяСтоимость/ОбщееКоличество);
					Иначе
						ОбщееКоличество = тбИтоги.ОстатокТовара;
						ОбщаяСтоимость = глПересчет(ОбщееКоличество * текЦенаБаз,текВалюта,Дата_Курса,Валюта,Дата_Курса);
					КонецЕсли;
				КонецЕсли;
				
				//конец считаем стоимость остатка товара
				//СтоимостьТовараВсего = ОбщаяСтоимость;
				Остаток = Запрос.КонКол; //остаток по рег. Остатки
				тбППост.Свернуть("Товар,ПартияПост","ОстатокТовара");
				ОстатокПП = тбППост.Итог("ОстатокТовара");
				///проверяем на совпадение количества по ПП и Остатки
				Если ОстатокПП <> Остаток Тогда
					тхтСообщения = "по товару " + текТовар.Код + " " + текТовар + " не совпадает остаток по рег. ""Партиии поставщика"" и рег. ""Остатки""";
					Сообщить(тхтСообщения,"!!!");
					ЗаписьЖурналаРегистрации(тхтСообщения,"ошибки",,текТовар);
				КонецЕсли;
				
				тбППост.ВыбратьСтроки();
				Пока тбППост.ПолучитьСтроку() = 1 Цикл
					//добавляем строку
					тзТЧ.НоваяСтрока();
					тзТЧ.Товар=текТовар;
					текЕдиница = ПолучитьЕдиницуИзмеренияИзТЧ(текТовар,Запрос.ИзмСорт,тбППост.ПартияПост);
					тзТЧ.Единица = текЕдиница;
					тзТЧ.Коэффициент = текЕдиница.Коэффициент;
					Если ТипУчета>Упр Тогда
						ВП=Гривня;
					Иначе
						ВП=Товар.ВалютаУчета;
					КонецЕсли;
					тзТЧ.Сорт = Запрос.ИзмСорт;
					тзТЧ.ИнвКоличество=0;
					тзТЧ.ПартияПост = тбППост.ПартияПост;
					текКво = Мин(тбППост.ОстатокТовара,Остаток); //тут количество в базовой единице /если по партиям поставщика остаток больше то мы нго просто отбрасываем. Об ошибке предупредили ранее.
					Остаток = Остаток - текКво;
					тзТЧ.Количество = текКво * текЕдиница.коэффициент; 
					текСтоимость = текЦенаБаз * текКво; //кво в баз единице
					тзТЧ.Стоимость= ?(Остаток = 0,ОбщаяСтоимость,текСтоимость);
					ОбщаяСтоимость = ОбщаяСтоимость - текСтоимость;
					тзТЧ.неОтгружено = ПолучитьКвоНеВыдано(тзТМЦ,текТовар,тбППост.ПартияПост);	
				КонецЦикла;
				//проверяем на остаток без партии
				Если Остаток <> 0 Тогда
					тзТЧ.НоваяСтрока();
					тзТЧ.Товар=текТовар;
					текЕдиница = гл_ВернутьЕдиницуИзмеренияТовара(текТовар.БазоваяЕдиница,текТовар,0);
					тзТЧ.Коэффициент = текЕдиница.Коэффициент;
					Если ТипУчета>Упр Тогда
						ВП=Гривня;
					Иначе
						ВП=Товар.ВалютаУчета;
					КонецЕсли;
					тзТЧ.Сорт = Запрос.ИзмСорт;
					тзТЧ.ИнвКоличество=0;
					
					тзТЧ.Количество = Остаток; 
					тзТЧ.Стоимость=ОбщаяСтоимость;					
				КонецЕсли;
			КонецЕсли;

			//Иначе //корректируем данные из учета
			//	ПолучитьСтрокуПоНомеру(стр);
			//	//Единица = глВернутьБазовуюЕдиницуТовара(Товар);
			//	Коэффициент = текЕдиница.Коэффициент;
			//	Если ТипУчета>Упр Тогда
			//		ВП=Гривня;
			//	Иначе
			//		ВП=Товар.ВалютаУчета;
			//	КонецЕсли;
			//	Количество=Запрос.КонКол; 
			//	
			//	Рег.УстановитьЗначениеФильтра("Товар",текТовар,1);
			//	тбИтоги = 0;
			//	ОбщаяСтоимость = 0;
			//	ОбщееКоличество = 0;
			//	Рег.ВыгрузитьИтоги(тбИтоги,1,1);
			//	тбИтоги.Свернуть("Товар","ОстатокТовара,Стоимость");
			//	
			//	тбИтоги.ВыбратьСтроки();
			//	Если тбИтоги.ПолучитьСтроку()=1 Тогда
			//		текЦена = 0; текВалюта = "";
			//		Если глПолучитьЦенуТовара(Константа.Закупочная,текТовар,текЕдиница,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
			//			Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
			//			ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,Дата_Курса,Валюта,Дата_Курса);
			//			ОбщееКоличество = тбИтоги.ОстатокТовара;
			//		Иначе
			//			ОбщееКоличество = тбИтоги.ОстатокТовара;
			//			ОбщаяСтоимость = глПересчет(ОбщееКоличество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
			//		КонецЕсли;
			//	КонецЕсли;
			//	
			//	Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Количество/ОбщееКоличество);
			//КонецЕсли;
		КонецЦикла;
		//РассчитатьСтоимостьПоСтроке();
	КонецЦикла;
	//тзТЧ.ВыбратьСтроку();
	тзТЧ.Свернуть("Товар,Единица,коэффициент,Сорт,ПартияПост","Количество,ИнвКоличество,Стоимость,СтоимостьРеально,неОтгружено,соСканера");
	ЗагрузитьТабличнуюЧасть(тзТЧ);	
КонецПроцедуры // Перезаполнить
//*/------------------------

//******************************************************************************
Процедура НаборСпецификацииПоФирме()

	УдалитьСтроки();

	Запрос=СоздатьОбъект("Запрос");

	ДатаКон=ДатаДок-1;
	Если Выбран() = 0 Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	Если ДатаДок <> СтараяДата Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	выбДата = СформироватьПозициюДокумента(ТекущийДокумент(),-1);
	выбДата = Мин(выбДата,ПолучитьПозициюТА());
	
	ТекстЗапроса="
	|ПЕРИОД С ДатаКон По выбДата;";

	ТекстЗапроса=ТекстЗапроса+"
	|ИзмТовар=Регистр.ПартииТоваров.Товар;
	|ИзмФирма=Регистр.ПартииТоваров.Фирма;
	|Статус=Регистр.ПартииТоваров.Статус;
	|Поставщик=Регистр.ПартииТоваров.Поставщик;
	|ИзмКонтрагент=Регистр.ПартииТоваров.Контрагент;
	|ИзмСтоимость=Регистр.ПартииТоваров.Стоимость;
	|Кол=Регистр.ПартииТоваров.ОстатокТовара;";
	ТекстЗапроса=ТекстЗапроса+"
	|Группировка ИзмТовар Без групп;// Упорядочить по ИзмТовар.Код;
	|Функция КонКол=КонОст(Кол);
	|Функция КонСтоим=КонОст(ИзмСтоимость);
	|";

	Если ТипУчета>Упр Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=Фирма);";
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=глПустаяФирма);";
	КонецЕсли;
	//+ralex, 22-06-19 12:04
	Если товарнаяГруппа.Выбран() = 1 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (измТовар в товарнаяГруппа);";
	КонецЕсли;
	//+/ralex, 22-06-19 12:04

	Если ТипИнвентаризации=1 Тогда
		//  <по фирме в целом>
		// без условий
		КодыСтатусов=СоздатьОбъект("СписокЗначений");
		КодыСтатусов.ДобавитьЗначение(Купленный);
		КодыСтатусов.ДобавитьЗначение(Принятый);
		КодыСтатусов.ДобавитьЗначение(ПринятыйБезПраваПередачи);
		КодыСтатусов.ДобавитьЗначение(РозницаКупленный);
		КодыСтатусов.ДобавитьЗначение(РозницаПринятый);
		КодыСтатусов.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(Статус в КодыСтатусов);";
		
	ИначеЕсли ТипИнвентаризации=3 Тогда
		//  <по реализатору>
		КодыСтатусов=СоздатьОбъект("СписокЗначений");
		КодыСтатусов.ДобавитьЗначение(ОтданныйКупленный);
		КодыСтатусов.ДобавитьЗначение(ОтданныйПринятый);
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(Статус в КодыСтатусов);";
		Если Контрагент.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмКонтрагент=Контрагент);";
		КонецЕсли;
	ИначеЕсли ТипИнвентаризации=4 Тогда
		//  <по комитенту>
		КодыСтатусов=СоздатьОбъект("СписокЗначений");
		КодыСтатусов.ДобавитьЗначение(Принятый);
		КодыСтатусов.ДобавитьЗначение(ПринятыйБезПраваПередачи);
		КодыСтатусов.ДобавитьЗначение(ОтданныйПринятый);
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(Статус в КодыСтатусов);";
		Если Контрагент.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (Поставщик=Контрагент);";
		КонецЕсли;
	КонецЕсли;

	Флаг=Запрос.Выполнить(ТекстЗапроса);
	Если Флаг=0 Тогда
		Предупреждение("запрос по регистру ПартииТоваров не выполнился!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка("ИзмТовар") = 1 Цикл
		Если Запрос.ИзмТовар.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока();
		Товар=Запрос.ИзмТовар;
		Единица = глВернутьБазовуюЕдиницуТовара(Товар);
		Коэффициент = Единица.Коэффициент;
		Если ТипУчета>Упр Тогда
			ВП=Гривня;
		Иначе
			ВП=Товар.ВалютаУчета;
		КонецЕсли;
		Количество=Запрос.КонКол;
		//*ralex, 22-06-19 14:11
		//ИнвКоличество=Запрос.КонКол;
		// -------- заменено на:
		ИнвКоличество=0;
		//*/ralex, 22-06-19 14:11
		//*ralex, 25-12-20 11:39
		//Стоимость=глПересчет(Запрос.КонСтоим,ВП,Дата_Курса,Валюта,Дата_Курса);
		// -------- заменено на:
			текЦена = 0; текВалюта = "";
			Если глПолучитьЦенуТовара(Константа.Закупочная,Товар,Единица,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
				Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
				Стоимость=глПересчет(Запрос.КонСтоим,ВП,Дата_Курса,Валюта,Дата_Курса);
			Иначе
				Стоимость = глПересчет(Количество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
			КонецЕсли;
		//*/ralex, 25-12-20 11:39
	КонецЦикла;
КонецПроцедуры	// НаборСпецификацииПоФирме()

Процедура ПерезаполнитьПоФирме()
	тз = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тз);
	
	Запрос=СоздатьОбъект("Запрос");
	
	//*ralex, 05-01-21 23:02
	//Если ДатаДок>ПолучитьДатуТА() Тогда
	//	ДатаДок=ПолучитьДатуТА();
	//	ТекстЗапроса="";
	//Иначе
	//	ДатаКон=ДатаДок-1;
	//	ТекстЗапроса="
	//	|ПЕРИОД С ДатаКон По ДатаДок;";
	//КонецЕсли;
	// -------- заменено на:
	ДатаКон=ДатаДок-1;
	Если Выбран() = 0 Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	Если ДатаДок <> СтараяДата Тогда
		Сообщить("Перед заполнением документ должен быть записан.");
		Возврат;
	КонецЕсли;
	
	//Попытка
	//	Записать();
	//Исключение
	//	Сообщить("Перед заполнением документ должен быть записан.");
	//	Возврат;
	//КонецПопытки;
	выбДата = СформироватьПозициюДокумента(ТекущийДокумент(),-1);
	ТекстЗапроса="
	|ПЕРИОД С ДатаКон По выбДата;";
	//*/ralex, 05-01-21 23:02
	
	ТекстЗапроса=ТекстЗапроса+"
	|ИзмТовар=Регистр.ПартииТоваров.Товар;
	|ИзмФирма=Регистр.ПартииТоваров.Фирма;
	|Статус=Регистр.ПартииТоваров.Статус;
	|Поставщик=Регистр.ПартииТоваров.Поставщик;
	|ИзмКонтрагент=Регистр.ПартииТоваров.Контрагент;
	|ИзмСтоимость=Регистр.ПартииТоваров.Стоимость;
	|Кол=Регистр.ПартииТоваров.ОстатокТовара;";
	ТекстЗапроса=ТекстЗапроса+"
	|Группировка ИзмТовар Без групп;// Упорядочить по ИзмТовар.Код;
	|Функция КонКол=КонОст(Кол);
	|Функция КонСтоим=КонОст(ИзмСтоимость);
	|";
	
	Если ТипУчета>Упр Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=Фирма);";
	Иначе
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмФирма=глПустаяФирма);";
	КонецЕсли;
	//+ralex, 22-06-19 12:04
	Если товарнаяГруппа.Выбран() = 1 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (измТовар в товарнаяГруппа);";
	КонецЕсли;
	//+/ralex, 22-06-19 12:04
	
	Если ТипИнвентаризации=1 Тогда
		//  <по фирме в целом>
		// без условий
		КодыСтатусов=СоздатьОбъект("СписокЗначений");
		КодыСтатусов.ДобавитьЗначение(Купленный);
		КодыСтатусов.ДобавитьЗначение(Принятый);
		КодыСтатусов.ДобавитьЗначение(ПринятыйБезПраваПередачи);
		КодыСтатусов.ДобавитьЗначение(РозницаКупленный);
		КодыСтатусов.ДобавитьЗначение(РозницаПринятый);
		КодыСтатусов.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(Статус в КодыСтатусов);";
		
	ИначеЕсли ТипИнвентаризации=3 Тогда
		//  <по реализатору>
		КодыСтатусов=СоздатьОбъект("СписокЗначений");
		КодыСтатусов.ДобавитьЗначение(ОтданныйКупленный);
		КодыСтатусов.ДобавитьЗначение(ОтданныйПринятый);
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(Статус в КодыСтатусов);";
		Если Контрагент.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмКонтрагент=Контрагент);";
		КонецЕсли;
	ИначеЕсли ТипИнвентаризации=4 Тогда
		//  <по комитенту>
		КодыСтатусов=СоздатьОбъект("СписокЗначений");
		КодыСтатусов.ДобавитьЗначение(Принятый);
		КодыСтатусов.ДобавитьЗначение(ПринятыйБезПраваПередачи);
		КодыСтатусов.ДобавитьЗначение(ОтданныйПринятый);
		ТекстЗапроса=ТекстЗапроса+"
		|Условие(Статус в КодыСтатусов);";
		Если Контрагент.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (Поставщик=Контрагент);";
		КонецЕсли;
	КонецЕсли;
	
	Флаг=Запрос.Выполнить(ТекстЗапроса);
	Если Флаг=0 Тогда
		Предупреждение("запрос по регистру ПартииТоваров не выполнился!");
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка("ИзмТовар") = 1 Цикл
		Если Запрос.ИзмТовар.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		текТовар=Запрос.ИзмТовар;
		стр = 0;
		Если тз.НайтиЗначение(текТовар,стр,"Товар") = 0 Тогда //добавляем строку
			НоваяСтрока();
			Товар=Запрос.ИзмТовар;
			Единица = глВернутьБазовуюЕдиницуТовара(Товар);
			Коэффициент = Единица.Коэффициент;
			Если ТипУчета>Упр Тогда
				ВП=Гривня;
			Иначе
				ВП=Товар.ВалютаУчета;
			КонецЕсли;
			Количество=Запрос.КонКол;
			ИнвКоличество=0;
			
			текЦена = 0; текВалюта = "";
			Если глПолучитьЦенуТовара(Константа.Закупочная,Товар,Единица,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
				Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
				Стоимость=глПересчет(Запрос.КонСтоим,ВП,Дата_Курса,Валюта,Дата_Курса);
			Иначе
				Стоимость = глПересчет(Количество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
			КонецЕсли;
		Иначе
			ПолучитьСтрокуПоНомеру(стр);
			Единица = глВернутьБазовуюЕдиницуТовара(Товар);
			Коэффициент = Единица.Коэффициент;
			Если ТипУчета>Упр Тогда
				ВП=Гривня;
			Иначе
				ВП=Товар.ВалютаУчета;
			КонецЕсли;
			Количество=Запрос.КонКол;
			текЦена = 0; текВалюта = "";
			Если глПолучитьЦенуТовара(Константа.Закупочная,Товар,Единица,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
				Сообщить("Для товара " + Товар + " не найдена закупочная цена. Применена цена из партий.","!!!");
				Стоимость=глПересчет(Запрос.КонСтоим,ВП,Дата_Курса,Валюта,Дата_Курса);
			Иначе
				Стоимость = глПересчет(Количество * текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// ПерезаполнитьПоФирме()

//*************************************************************************
//------------------------------  П Р О Ц Е Д У Р Ы    П Е Ч А Т И  -------
//*************************************************************************
Процедура ПечатьСверки()
	Перем СтрТип;
	
	Таб=СоздатьОбъект("Таблица");
	
	ПечФорма = "СверкаНаличия";
	//+ralex, 13-01-21 00:23
	горСекция = "|Общий";
	Если НазваниеНабораПрав() = "Администратор" Тогда
		горСекция = "";
	КонецЕсли;
	//+/ralex, 13-01-21 00:23
	Язык = глЯзык(ПечФорма); 	
	Таб.ИсходнаяТаблица(ПечФорма);
	глУстПропись(Гривня,Язык);
	
	Заг="";
	Заг=Заг+?(Язык="у","По фірмі ","По фирме ")+Фирма+". ";
	
	Если Язык = "у" Тогда
		Если ТипИнвентаризации = 1 Тогда
			СтрТип = "по фірмі";
		ИначеЕсли ТипИнвентаризации = 2 Тогда
			СтрТип = "по складу";
		ИначеЕсли ТипИнвентаризации = 3 Тогда
			СтрТип = "по реалізатору";
		ИначеЕсли ТипИнвентаризации = 4 Тогда
			СтрТип = "по комітенту";
		КонецЕсли;
	Иначе
		А=ТипыИнвентаризации.ПолучитьЗначение(ТипИнвентаризации,СтрТип);
		СтрТип = СокрЛП(Сред(СтрТип,2,СтрДлина(СтрТип)-2));
	КонецЕсли;
	
	Заг=Заг+?(Язык="у","Заповнено ","Заполнено ")+СтрТип+". ";
	Если ТипИнвентаризации=2 Тогда
		Если Склад.Выбран()=1 Тогда
			Заг=Заг+?(Язык="у","По складу ","По складу ")+Склад+". ";
		Иначе
			Заг=Заг+?(Язык="у","По всіх складах","По всем складам")+". ";
		КонецЕсли;
	ИначеЕсли ТипИнвентаризации>2 Тогда
		Если Контрагент.Выбран()=1 Тогда
			Заг=Заг+?(Язык="у","По контрагенту ","По контрагенту ")+Контрагент+". ";
		Иначе
			Заг=Заг+?(Язык="у","По всіх контрагентах. ","По всем контрагентам. ");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(товарнаяГруппа) = 0 Тогда
		Заг = Заг + РазделительСтрок + "по группе товаров """ + товарнаяГруппа + """";
	КонецЕсли;
	Если ПустоеЗначение(выбСорт) = 0 Тогда
		Заг = Заг + РазделительСтрок + "сорт: """ + выбСорт + """";
	КонецЕсли;
	
	Таб.ИсходнаяТаблица(ПечФорма);
	
	Таб.ВывестиСекцию("Шапка"+горСекция);
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),,ПарСтрДок);
	Ном=0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;
		//*ralex, 14-02-23 15:40
		//тхтТовар = СокрЛП(Товар.ШтрихКод)+" * " + СокрЛП(Товар.ПолнНаименование);
		// -------- заменено на:
		товарШК = ?(Число(Товар.ШтрихКод) = 0,"",СокрЛП(Товар.ШтрихКод));
		тхтТовар = СокрЛП(Товар.ПолнНаименование);
		//*/------------------------
		СтоимостьРазница = СтоимостьРеально - Стоимость;
		
		//+ralex, 16-02-23 21:26
		//нужно показать количество еще и в упаковках.
		ЕдИзмМесто = дополненияТорговля.ПолучитьЕдиницуИзмеренияТовараПоКлассификатору(Товар,гл_ПолучитьЗначениеДопКонстанты("упаковка"));
		Если ЕдИзмМесто <> 0 Тогда
			Если Единица <> ЕдИзмМесто Тогда
				остМесто = Количество/Единица.коэффициент / ЕдИзмМесто.Коэффициент;
				остМесто = СокрЛП(Формат(Окр(остМесто,2),глФорматКоличестваВформах));
				тхтКоличество = "" + Количество + " " + Единица.Единица + РазделительСтрок + остМесто + " " + ЕдИзмМесто.Единица;
			Иначе
				тхтКоличество = "" + Количество + " " + Единица.Единица;
			КонецЕсли;
		Иначе
			тхтКоличество = "" + Количество + " " + Единица.Единица;
		КонецЕсли;
		//+/------------------------
		
		Если ПустоеЗначение(ПартияПост) = 1 Тогда
			Таб.ВывестиСекцию("Строка"+горСекция);
		Иначе
			Таб.ВывестиСекцию("Строка_Партия"+горСекция);
		КонецЕсли;
	КонецЦикла;
	ИтогНеОтгружено = Итог("неОтгружено");
	квоРазница =  Окр(Итог("ИнвКоличество") - Итог("Количество"),2);
//	Если НазваниеНабораПрав() = "Администратор" Тогда //-ralex, 13-02-23 23:24
		СтоимостьРазница = Итог("СтоимостьРеально") - Итог("Стоимость");
		Таб.ВывестиСекцию("Итого");
//	КонецЕсли; //-ralex, 13-02-23 23:24
	
	//Таб.ВывестиСекцию("ШапкаРасписка");
	//спрПольз = СоздатьОбъект("Справочник.Пользователи");
	//спрПольз.ВыбратьЭлементыПоРеквизиту("флМенеджер",1,0,0);
	//Пока спрПольз.ПолучитьЭлемент() = 1 Цикл
	//	Если спрПольз.ПометкаУдаления() = 1 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Менеджер = глФИО(спрПольз.Сотрудник,2);
	//	Таб.ВывестиСекцию("стрРасписка");
	//КонецЦикла;
	//Таб.ВывестиСекцию("Подписи");
	
	Если ПустаяСтрока(Примечание) = 0 Тогда
		Таб.ВывестиСекцию("Примечание");
	КонецЕсли;
	
	Если ПустоеЗначение(ПредседательКомиссии) = 0 Тогда
		Менеджер = глФИО(ПредседательКомиссии,2);
		Таб.ВывестиСекцию("стрРасписка");
	КонецЕсли;
	
	Если ПустоеЗначение(ПровелПроверку) = 0 Тогда
		Менеджер = глФИО(ПровелПроверку,2);
		Таб.ВывестиСекцию("стрРасписка");
	КонецЕсли;
	
	Если ПустоеЗначение(ПредседательКомиссии) = 0 Тогда
		Таб.ВывестиСекцию("Комиссия");
	КонецЕсли;
	Если  ПустоеЗначение(ЧленКомиссии1) = 0 Тогда
		тхтЧленКомиссии = ""+ ЧленКомиссии1;
		Таб.ВывестиСекцию("членКомиссии");
	КонецЕсли;
	Если  ПустоеЗначение(ЧленКомиссии2) = 0 Тогда
		тхтЧленКомиссии = ""+ ЧленКомиссии2;
		Таб.ВывестиСекцию("членКомиссии");
	КонецЕсли;
	Если  ПустоеЗначение(ЧленКомиссии3) = 0 Тогда
		тхтЧленКомиссии = ""+ ЧленКомиссии3;
		Таб.ВывестиСекцию("членКомиссии");
	КонецЕсли;
	
	//Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(0);
	Таб.Показать("Сверка наличия товаров","");
	текРаспечатан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"распечатан"); //+ralex, 19-12-21 23:06
	дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"распечатан",текРаспечатан + 1);
КонецПроцедуры

//*****************************************************************************
Процедура ПечатьАкта()
	
	Таб = СоздатьОбъект("Таблица");
	ПечФорма = "Таблица";
	
	Язык = глЯзык(ПечФорма); 	
	Таб.ИсходнаяТаблица(ПечФорма);
	глУстПропись(Гривня,Язык);
	
	КоличествоНаименований = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()>0 Цикл
		КоличествоНаименований = КоличествоНаименований + 1;
	КонецЦикла;
	Таб.ПараметрыСтраницы(1,,,,,,,,,1);
	Таб.Опции(0,0,0,0);
	ИтСуммаПоФакту = ?(Итог("Количество") = 0,Итог("ИнвКоличество") * (Итог("Стоимость")),Итог("ИнвКоличество") * (Итог("Стоимость")/Итог("Количество")));	
	//*ralex, 24-12-20 23:59
	//ИтСуммаРазницы = ?(Итог("Количество") = 0,(Итог("Количество") - Итог("ИнвКоличество")) * Итог("Стоимость"),(Итог("Количество") - Итог("ИнвКоличество")) * (Итог("Стоимость")/Итог("Количество")));
	// -------- заменено на:
	ИтСуммаРазницы = Итог("СтоимостьРеально") - Итог("Стоимость");
	//*/ralex, 24-12-20 23:59
	Заг="";
	Заг=Заг+?(Язык="у","По фірмі ","По фирме ")+Фирма+". ";
	Таб.ВывестиСекцию("ПерваяСтраница");
	Таб.ВывестиСекцию("Раздел2");
	Таб.ВывестиСекцию("Шапка");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ЦенаБезНДС = ?(Количество = 0,0,Стоимость/Количество);
		СуммаПоФакту = ?(Количество = 0,ИнвКоличество * Стоимость,ИнвКоличество * (Стоимость/Количество));
		//*ralex, 25-12-20 00:01
		//СуммаРазницы = ?(Количество = 0,(Количество - ИнвКоличество) * Стоимость,(Количество - ИнвКоличество) * (Стоимость/Количество));
		// -------- заменено на:
		СуммаРазницы = СтоимостьРеально - Стоимость;
		//*/ralex, 25-12-20 00:01
		Если ПустоеЗначение(ПартияПост) = 1 Тогда
			Таб.ВывестиСекцию("Строка");
		Иначе
			Таб.ВывестиСекцию("Строка_Партия");
		КонецЕсли;
	КонецЦикла;
	Таб.ВывестиСекцию("Итоги");
	Таб.ВывестиСекцию("Подписи");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Акт инвентаризации №"+Строка(НомерДок)+" от "+Строка(ДатаДок));
	текРаспечатан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"распечатан"); //+ralex, 19-12-21 23:06
	дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"распечатан",текРаспечатан + 1);
КонецПроцедуры

Функция УстановитьНадписьРаспечатанОтгружен()
	Возврат дополненияТорговля.УстановитьНадписьРаспечатанОтгружен(Контекст);
КонецФункции

//*****************************************************************************
// функции и процедуры, вызываемые из формул элементов диалога

//******************************************************************************
Процедура ВыборСбособаПечати()
	Перем Значение;
	
    Если СписокПечати.ВыбратьЗначение(Значение,,,,1) = 0 Тогда
		Возврат;
    КонецЕсли;
	
	Если Значение = "Печать сверки" Тогда
		ПечатьСверки();
	ИначеЕсли Значение = "Печать акта" Тогда
		ПечатьАкта();
		//ПечатьИнвентаризационнаяОпись();
	//ИначеЕсли Значение = "Печать слич. ведомости" Тогда
	//	ПечатьСличительнойВедомость();
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура НаборСпецификации()
	Если Фирма.Выбран()=0 Тогда
		Предупреждение("Выберите фирму!");
		Возврат;
	КонецЕсли;
	Если выбСорт.Выбран()=0 Тогда
		Предупреждение("Выберите сорт товара!");
		Возврат;
	КонецЕсли;

	Если ДатаДок>ПолучитьДатуТА() Тогда
		Предупреждение("Нельзя устанавливать дату документа больше Точки Актуальности!");
		Возврат;
	КонецЕсли;

    // Здесь формируется отчет, который использует регистры, критичные к
    // последовательности проведения документов
    // поэтому сравним установленные даты периода формируемого отчета с ГП
    глПроверкаАктуальностиОтчета('01.01.1980',ДатаДок,"Фин",Фирма,1);

	Если Выбран() = 0 Тогда
		Если Вопрос("Документ должен быть записан. Записать?",4,15) = 6 Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	//*ralex, 04-12-22 22:06
	//Если НазваниеНабораПрав() = "Администратор" Тогда
	//	Зн = 0;
	//	спсМеню = СоздатьОбъект("СписокЗначений");
	//	спсМеню.ДобавитьЗначение(1,"Заполнить");
	//	спсМеню.ДобавитьЗначение(2,"Перезаполнить данные из учета");
	//	Если спсМеню.ВыбратьЗначение(Зн,,,10,1) <> 1 Тогда
	//		Возврат;
	//	КонецЕсли;	
	//Иначе
	//	Зн = 1;
	//КонецЕсли;
	// -------- заменено на:
	Зн = 0;
	спсМеню = СоздатьОбъект("СписокЗначений");
	спсМеню.ДобавитьЗначение(1,"Заполнить");
	спсМеню.ДобавитьЗначение(2,"Перезаполнить данные из учета");
	Если спсМеню.ВыбратьЗначение(Зн,,,10,1) <> 1 Тогда
		Возврат;
	КонецЕсли;	
	//*/------------------------
	
    //*ralex, 03-10-22 15:30
    //Если ТипИнвентаризации=2 Тогда
    //		//  <по складу>
    //		Если ПустоеЗначение(Склад) = 0 Тогда
    //			Если зн = 1 Тогда
    //				НаборСпецификацииПоСкладу();
    //			Иначе
    //				ПерезаполнитьПоСкладу();
    //			КонецЕсли;
    //		Иначе
    //			Предупреждение("Не задан склад");
    //		КонецЕсли;
    //	Иначе
    //		Если зн = 1 Тогда
    //			НаборСпецификацииПоФирме();
    //		Иначе
    //			ПерезаполнитьПоФирме();
    //		КонецЕсли;
    //	КонецЕсли;
    // -------- заменено на:
	Если зн = 1 Тогда
		НаборСпецификацииПоСкладу();
	Иначе
		ПерезаполнитьПоСкладу();
	КонецЕсли;
    //*/------------------------
КонецПроцедуры

//======================================================================
Процедура измТовар()
	Перем текЦена, текЕдиница,текВалюта;
	Если ПустоеЗначение(выбСорт) = 1 Тогда
		Предупреждение("Выберите сорт товара в шапке документа.");
		Товар = 0;
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Единица = глВернутьБазовуюЕдиницуТовара(Товар);
	Коэффициент = Единица.Коэффициент;
	Сорт = выбСорт;
	Если глПолучитьЦенуТовара(Константа.Закупочная,Товар,текЕдиница,ДатаДок,текЦена,текВалюта) = 0 Тогда //нет закупочной цены
		Цена = 0;
	Иначе
		цена = глПересчет(текЦена,текВалюта,Дата_Курса,Валюта,Дата_Курса);
	КонецЕсли;
	
	РассчитатьСтоимостьПоСтроке();
КонецПроцедуры // гл

//******************************************************************************
Процедура ИзмДата()
	глПриИзмененииДатыДокумента(Контекст, СтараяДата);
	ОбновитьНадписи();
КонецПроцедуры

//======================================================================
Процедура ИзмКвоРеально()
	РассчитатьСтоимостьПоСтроке();
КонецПроцедуры // ИзмКвоРеально

//*****************************************************************************
Процедура ВыборФирмы()
	// по кнопке редактирования параметров фирмы в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОфирме", КонтекстДокумента);
	ОбновитьНадписи();
КонецПроцедуры	
	
//*****************************************************************************
Процедура ВыборОплаты()
	// Процедура по кнопке редактирования параметров оплаты в докумнете
	Перем КонтекстДокумента;
	Валюта_Прежн = Валюта;
	Курс_Прежн = Курс;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	// Теперь надо пересчитать 
	Если КонтекстДокумента.КоличествоСтрок()>0 Тогда
		КонтекстДокумента.ВыбратьСтроки();
		Пока КонтекстДокумента.ПолучитьСтроку()>0 Цикл

			ВалютаТовара=Товар.ВалютаУчета;

			Если Валюта = Валюта_Прежн Тогда
				// если валюта не менялась (поменялся курс)
				
				Если Курс_Прежн = 0 Тогда
					Курс_Прежн = 1;
				КонецЕсли;
				Если Курс = 0 Тогда
					Курс = 1;
				КонецЕсли;
				Если ВалютаТовара=Валюта Тогда
				ИначеЕсли  ВалютаТовара=Гривня  Тогда
					Стоимость=(Стоимость*Курс_Прежн)/Курс;
				ИначеЕсли  Валюта = Гривня  Тогда
					Стоимость=(Стоимость*Курс)/Курс_Прежн;
				Иначе
					Стоимость=(Стоимость*Курс)/Курс_Прежн;
				КонецЕсли;
			Иначе   // Валюта поменялась, но  (курс не менялся)
				Стоимость=глПересчет(Стоимость,Валюта_Прежн,Курс_Прежн,Валюта,Курс);
			КонецЕсли;
			// для гривень цену округляем
			Если Валюта=Гривня Тогда
				Стоимость=Окр(Стоимость,Константа.КоэффОкрГрнЦены,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОбновитьНадписи();
КонецПроцедуры	

//*****************************************************************************
Процедура ВыборОснования()
	// Процедура по кнопке редактирования основания в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ОснованиеДокумента", КонтекстДокумента);
	ОбновитьНадписи();
КонецПроцедуры	

//******************************************************************************
Процедура ПриВыбореТипаИнвентаризации()
	Если ТипИнвентаризации>2 Тогда
	    Форма.Контрагент.Доступность(1);
	Иначе                               
		Если ПустоеЗначение(Контрагент)=0 Тогда
			Контрагент = 0;
		КонецЕсли;
	    Форма.Контрагент.Доступность(0);
	КонецЕсли; 
	Если ТипИнвентаризации = 1 Тогда //по фирме в целом
		Форма.Склад.Доступность(0);
		Склад = 0;
	Иначе
		Форма.Склад.Доступность(1);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ПриИзмененииТипаИнвентаризации()       
	Если ТипИнвентаризации<>ТипыИнвентаризации.ТекущаяСтрока() Тогда
		ТипИнвентаризации=ТипыИнвентаризации.ТекущаяСтрока();
		ПриВыбореТипаИнвентаризации();
		Если КоличествоСтрок() > 0 Тогда
			Если Вопрос("Изменился тип инвентаризации. Перезаполнить табличную часть?",4) = 6 Тогда
				НаборСпецификации();
			КонецЕсли;	
		КонецЕсли;	                                                       
	КонецЕсли;		
КонецПроцедуры	

//*****************************************************************************
// Предопределенные процедуры
Процедура ПриУдаленииСтроки()
	Если НазваниеНабораПрав() <> "Администратор" Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры    

Процедура ПриРедактированииНовойСтроки()
	ИнвКоличество = 0;
	Количество = 0;
	ПартияПост = 0;
	Стоимость = 0;
	СтоимостьРеально = 0;
КонецПроцедуры

//======================================================================
Процедура ПриНачалеРедактированияСтроки()
	текКолонка = Форма.текущаяколонка();
	Если текКолонка = "неОтгружено" Тогда
		тз = ПолучитьНеотгруженныйТоварДляРасшифровки(Товар,ПартияПост);
		спсМеню = СоздатьОбъект("СписокЗначений");
		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1 Цикл
			спсМеню.ДобавитьЗначение(тз.Док,"" + тз.Док + " " + тз.Док.автор +"  кво = " + тз.Кво);
		КонецЦикла;
		выбЗн = 0;
		Если спсМеню.ВыбратьЗначение(выбЗн,,,,1) <> 1 Тогда
			Возврат;
		КонецЕсли;
		ОткрытьФорму(выбЗн);
	КонецЕсли;
КонецПроцедуры // ПриНачалеРедактированияСтроки

//Процедура ПриОкончанииРедактированияСтроки()
//	АктивизироватьСтроку(НомерСтроки);
//КонецПроцедуры

//======================================================================
Функция ОткрытьПодборСкладскогоМеста()	
	выбМесто = "";
	спсМест = дополненияТорговля.получитьСписокСкладскихМест(Товар,Склад,Единица,Сорт,Контекст); //+ralex, 08-11-23 00:54
	Если спсМест.размерСписка() <> 0 Тогда
		Если спсМест.ВыбратьЗначение(выбМесто,,,15,1) = 1 Тогда
			складскоеМесто = выбМесто;
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции // ОткрытьПодборПартииПоставщика

//*****************************************************************************
Процедура ПриНачалеВыбораЗначения(Рекв,Флаг)
	Флаг=0;
	Если (Рекв="Фирма") или (Рекв="Склад") Тогда
		ВыборФирмы();  
	ИначеЕсли (Рекв = "Товар") и (ПустоеЗначение(Единица) = 0) Тогда //единицу проверяем чтобы понять что это новая строка
		Если НазваниеНабораПрав() = "Администратор" Тогда
			Флаг = 1;
		КонецЕсли;
	ИначеЕсли Рекв = "ПартияПост" Тогда
		Если дополненияТорговля.ПолучитьПараметрГруппыСправочника(Товар,"разрешеныПартииПост") = 0 Тогда
			Флаг = 0; Возврат;
		КонецЕсли;
		
		конт = глВернутьКонтекст(Контекст);
		ОткрытьПодбор("ПартииТоваровПоставщика","ДляПодбора",конт);
		Флаг = 0;
	ИначеЕсли Найти(рекв,"складскоеМесто") <> 0 Тогда
		ОткрытьПодборСкладскогоМеста();
	Иначе
		Флаг=1;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ВводНового(Скопирован)
	Если (НазваниеНабораПрав() <> "Администратор") Тогда
		Если ПравоПользователяИнв = 0 Тогда
			Предупреждение("Вам запрещено создавать документы ""Инвентаризация"".");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Автор=глПользователь;
	глЗаполнитьШапку(Контекст);
	Если Скопирован=1 Тогда	//копирование документа
		Возврат;
	КонецЕсли;

	//*ralex, 16-12-22 23:59
	//ДатаДок=ПолучитьДатуТА();
	// -------- заменено на:
	ДатаДок=РабочаяДата();
	//*/------------------------
	Валюта=Гривня;
	Дата_Курса=ДатаДок;
	Курс=глКурсДляВалюты(Валюта,Дата_Курса);
	ТипИнвентаризации=2;

	ПриВыбореТипаИнвентаризации();
КонецПроцедуры

//******************************************************************************
Процедура ВводНаОсновании(ДокОснование)
		Предупреждение("Этот документ нельзя вводить на основании других документов!!!");
		СтатусВозврата(0);
КонецПроцедуры

//******************************************************************************
Процедура ПриОткрытии()
	НачальнаяДатаДокумента = ДатаДок;
	                       
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной","Основные сведения");
	Форма.Закладки.ДобавитьЗначение("Доп","Дополнительно");
	Если НазваниеНабораПрав() = "Администратор" Тогда
		Форма.Закладки.ДобавитьЗначение("CRM","CRM");
	КонецЕсли;
	Форма.ИспользоватьСлой("Основной, Общий",2);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнДействия.Доступность(0);
		Форма.кнОснование.Доступность(0);
		Форма.кнВалюта.Доступность(0);
		//+ralex, 08-02-21 22:58
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнЗагрузитьШК.Доступность(0);
		//+/ralex, 08-02-21 22:58
	Иначе
		Форма.Закладки.ДобавитьЗначение("пакетДанныхШК","ввод ШК");
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Если ПустоеЗначение(ТипИнвентаризации)=1 Тогда
		ТипыИнвентаризации.ТекущаяСтрока(1);
	Иначе
		ТипыИнвентаризации.ТекущаяСтрока(ТипыИнвентаризации.НайтиЗначение(ТипИнвентаризации));
	КонецЕсли;
	
	ПриВыбореТипаИнвентаризации();
	
	ОбновитьНадписи();
	СтараяДата = ДатаДок;
	Форма.товарнаяГруппа.ВыборГруппы(1);
	спс = СоздатьОбъект("СписокЗначений"); // для ШК +ralex, 22-06-19 12:21
	счетчикШК = 0;
	
	глВосстановитьЗначение(Контекст,"выбКаталог","");
	глВосстановитьЗначение(Контекст,"Имя","");
	
	Если НазваниеНабораПрав() = "Администратор" Тогда
		флВидимость = 1;
	Иначе
		флВидимость = 0;
	КонецЕсли;
	Форма.тКомментарийАдм.Видимость(флВидимость);
	Форма.КомментарийАдм.Видимость(флВидимость);
	Если ПравоПользователяИнв = 0 Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
КонецПроцедуры

Процедура УстКомандыПровести()
	Если (НазваниеНабораПрав() <> "Администратор") Тогда
		СтрокаДействийФормы = "#Записать Закрыть";
	Иначе
		СтрокаДействийФормы = "#Записать Провести Закрыть?";
	КонецЕсли;
КонецПроцедуры 

//******************************************************************************
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
	Если ИдентЭлемДиалога = "Товар" Тогда
		ФлагСтандОбр = 0;
		Если ВыбЗнач.ВидТовара = Перечисление.ВидыТоваров.Набор Тогда
			Предупреждение("Наборы добавлять нельзя!");
		ИначеЕсли ВыбЗнач.ВидТовара = Перечисление.ВидыТоваров.Услуга Тогда
			Предупреждение("Услуги добавлять нельзя!");
		Иначе
			Товар = ВыбЗнач;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
                       
//******************************************************************************
Процедура ПриВыбореЗакладки(Ном,Значен);
	Форма.ИспользоватьСлой(Значен+", Общий",2);
КонецПроцедуры  

//******************************************************************************
Процедура ПриЗаписи()
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	//+ralex, 13-12-21 00:02
	Если ПустаяСтрока(id_задачиВ_CRM) = 1 Тогда
		СтатусЗадачиВCRM = 0;
	ИначеЕсли ЗадачаВCRMВыполнена = 0 Тогда
		СтатусЗадачиВCRM = 1;
	ИначеЕсли ЗадачаВCRMВыполнена = 1 Тогда
		СтатусЗадачиВCRM = 2;
	КонецЕсли;
	//+/------------------------
КонецПроцедуры

//######################################################################################
//======================================================================
Процедура ШтрихКодВСписок(Данные)
	спс.ДобавитьЗначение(Данные,Данные);
	счетчикШК = счетчикШК + 1;
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)	// Предопределенная процедура
	Если выбСорт.Выбран() = 0 Тогда
		Предупреждение("Не выбран сорт товара.",15);
		Возврат;
	КонецЕсли;
	
	Сообщить(Данные);
	
	Если РаботаСоСканеромШтрихКода=2 Тогда
		Если Событие="BarCodeValue" Тогда
			//глУстановкаШтрихКода(Контекст,Данные);
			//ШтрихКодВСписок(Данные);
			ЗагрузитьСоСканера(Данные,,выбСорт);
		КонецЕсли;
		Попытка
			СканерШтрихКода.ПосылкаДанных=1;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

//*ralex, 01-12-22 00:38
//Процедура ЗагрузитьСоСканера(Данные,квоШк = 1,текСорт)
//	тзТЧ = СоздатьОбъект("ТаблицаЗначений");
//	ВыгрузитьТабличнуюЧасть(тзТЧ);
//	// Определение типа штрих-кода
//	Если ШтрихКодИмеетПрефикс=1 Тогда
//		Если Найти("MPJS",Лев(Данные,1))<>0 Тогда
//			// Штрих-код определяет товар
//			Данные=Сред(Данные,2,СтрДлина(Данные)-1);
//		Иначе
//			Сообщить("Формат считанного штрих-кода не предназначен для товаров");
//		КонецЕсли;
//	КонецЕсли;
//	
//	Тов=СоздатьОбъект("Справочник.Номенклатура");
//	Упак=СоздатьОбъект("Справочник.Единицы");
//	нашлиШК = 0;
//	
//	// Используется основной штрих-код товара
//	// или свой внутренний штрих-код товара с префиксом "20,21"
//	Если Упак.НайтиПоРеквизиту("ШтрихКод",Данные,1) <> 0 Тогда
//		нашлиШК = 1;
//		едШК=Упак.ТекущийЭлемент();
//		Тов=едШК.Владелец;
//	КонецЕсли;
//	
//	Если нашлиШК = 0 Тогда
//		//Ищем  Шк в самом товаре
//		Если Тов.НайтиПоРеквизиту("ШтрихКод",Данные,1) <> 0 Тогда
//			нашлиШК = 1;
//			Тов=Тов.текущийЭлемент();
//		Иначе
//			Сообщить("Товар со штрих кодом "+Данные+" не найден");
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	стр = 0;
//	Если тзТЧ.НайтиЗначение(Тов,стр,"Товар") = 1 Тогда
//		тзТЧ.ПолучитьСтрокуПоНомеру(стр);
//		//проверяем единицу измерения
//		Если тзТЧ.Единица = едШК Тогда
//			тзТЧ.ИнвКоличество = тзТЧ.ИнвКоличество + квоШк;
//		Иначе
//			//пересчет
//			врКво =  квоШк/тзТЧ.Единица.Коэффициент * едШК.Коэффициент;
//			тзТЧ.ИнвКоличество = тзТЧ.ИнвКоличество + врКво;
//		КонецЕсли;
//		тзТЧ.соСканера = 1;
//		РассчитатьСтоимостьПоСтрокеТЗ(тзТЧ);
//	Иначе
//		//не нашли
//		тзТЧ.НоваяСтрока();
//		тзТЧ.Товар = Тов;
//		тзТЧ.Единица = едШК;
//		тзТЧ.Сорт = текСорт;
//		тзТЧ.Количество = 0;
//		тзТЧ.Коэффициент = едШК.Коэффициент;
//		тзТЧ.ИнвКоличество = квоШк;
//		тзТЧ.соСканера = 1;
//		РассчитатьСтоимостьПоСтрокеТЗ(тзТЧ);
//	КонецЕсли;
//	тзТЧ.Сортировать("Товар");
//	ЗагрузитьТабличнуюЧасть(тзТЧ);
//КонецПроцедуры
// -------- заменено на:

//======================================================================
Функция ПодготовитьСтрокуПартияПоставщикаДляПоиска(Знач стр)
		стр = СтрЗаменить(стр,".","");
		стр = СтрЗаменить(стр,",","");
		стр = СтрЗаменить(стр," ","");
		Возврат стр;
КонецФункции // ПодготовитьСтрокуПартияПоставщикаДляПоиска

Процедура ЗагрузитьСоСканера(Данные,квоШк = 1,текСорт,текПартияПоставщика = "")
	Если текПартияПоставщика = "" Тогда
		текПартияПоставщика = ПолучитьПустоеЗначение("Справочник.ПартииТоваровПоставщика");
	КонецЕсли;
	итзТЧ = СоздатьОбъект("ИндексированнаяТаблица");
	тзТЧ = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тзТЧ);
	итзТЧ.Загрузить(тзТЧ);
	//итзТЧ.Показать();
	итзТЧ.ДобавитьИндекс("ИндексТовара","Товар,Сорт,ПартияПост");
	тзТЧ.Очистить();
	
	// Определение типа штрих-кода
	Если ШтрихКодИмеетПрефикс=1 Тогда
		Если Найти("MPJS",Лев(Данные,1))<>0 Тогда
			// Штрих-код определяет товар
			Данные=Сред(Данные,2,СтрДлина(Данные)-1);
		Иначе
			Сообщить("Формат считанного штрих-кода не предназначен для товаров");
		КонецЕсли;
	КонецЕсли;
	
	Тов=СоздатьОбъект("Справочник.Номенклатура");
	ЕдТовара=СоздатьОбъект("Справочник.Единицы");
	нашлиШК = 0;
	
	// Используется основной штрих-код товара
	// или свой внутренний штрих-код товара с префиксом "20,21"
	Если ЕдТовара.НайтиПоРеквизиту("ШтрихКод",Данные,1) <> 0 Тогда
		нашлиШК = 1;
		едШК=ЕдТовара.ТекущийЭлемент();
		Тов=едШК.Владелец;
	КонецЕсли;
	
	Если нашлиШК = 0 Тогда
		//Ищем  Шк в самом товаре
		Если Тов.НайтиПоРеквизиту("ШтрихКод",Данные,1) <> 0 Тогда
			нашлиШК = 1;
			Тов=Тов.текущийЭлемент();
			едШК = гл_ВернутьЕдиницуИзмеренияТовара(Тов.БазоваяЕдиница,Тов,0);  
		Иначе
			Сообщить("Товар со штрих кодом "+Данные+" не найден");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если текПартияПоставщика <> "" Тогда
		//ищем партию
		текПартия = ПодготовитьСтрокуПартияПоставщикаДляПоиска(текПартияПоставщика);

		спрПартииПост = СоздатьОбъект("Справочник.ПартииТоваровПоставщика");
		спрПартииПост.ИспользоватьВладельца(Тов);
		спрПартииПост.ВыбратьЭлементы();
		Пока спрПартииПост.ПолучитьЭлемент() = 1 Цикл
			Если текПартия = ПодготовитьСтрокуПартияПоставщикаДляПоиска(спрПартииПост.Наименование) Тогда
				текПартияПоставщика = спрПартииПост.ТекущийЭлемент();
			КонецЕсли;
		КонецЦикла;
		Если ТипЗначения(текПартияПоставщика) <> 11 Тогда //справочник
				Сообщить("Для товара " + Тов.Код + " " + Тов + " не найдена партия поставщика " + текПартияПоставщика,"!!!");
				текПартияПоставщика = ПолучитьПустоеЗначение("Справочник.ПартииТоваровПоставщика");
		КонецЕсли;
	КонецЕсли;
	
	спсИндекс = СоздатьОбъект("СписокЗначений");
	спсИндекс.ДобавитьЗначение(Тов);
	спсИндекс.ДобавитьЗначение(текСорт);
	спсИндекс.ДобавитьЗначение(текПартияПоставщика);
	
	стр = 0;
	Если итзТЧ.НайтиСтроку("ИндексТовара",спсИндекс,,1) <> 0 Тогда
		//проверяем единицу измерения
		Если итзТЧ.Единица = едШК Тогда
			итзТЧ.ИнвКоличество = итзТЧ.ИнвКоличество + квоШк;
		Иначе
			//пересчет
			врКво =  квоШк/итзТЧ.Единица.Коэффициент * едШК.Коэффициент;
			итзТЧ.ИнвКоличество = итзТЧ.ИнвКоличество + врКво;
		КонецЕсли;
		итзТЧ.соСканера = 1;
		РассчитатьСтоимостьПоСтрокеТЗ(итзТЧ);
	Иначе
		//не нашли
		итзТЧ.НоваяСтрока();
		итзТЧ.Товар = Тов;
		итзТЧ.Единица = едШК;
		итзТЧ.Сорт = текСорт;
		итзТЧ.Количество = 0;
		итзТЧ.Коэффициент = едШК.Коэффициент;
		итзТЧ.ПартияПост = текПартияПоставщика;
		итзТЧ.ИнвКоличество = квоШк;
		итзТЧ.соСканера = 1;
		РассчитатьСтоимостьПоСтрокеТЗ(итзТЧ);
	КонецЕсли;
	итзТЧ.Сортировать("Товар");
	итзТЧ.Выгрузить(тзТЧ);
	//тзТЧ.Сортировать("Товар");
	ЗагрузитьТабличнуюЧасть(тзТЧ);
КонецПроцедуры
//*/------------------------

//======================================================================
Процедура ЗагрузитьШКИзФайлаВСтроку()
	Если ПустаяСтрока(ПутьКФайлу) = 0 Тогда
		Если ФС.СуществуетФайл(ПутьКФайлу) = 0 Тогда
			Предупреждение("Файл " + ПутьКФайлу + " не найден!",10);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Если спсШК.размерСписка() = 0 Тогда
	//	Предупреждение("Файл не содержит штрих-кодов.",10);
	//	Возврат;
	//КонецЕсли;

	//тхт = СоздатьОбъект("Текст");
	
	//допишу потом. Это не срочное 27.11.2022г.
	
		
КонецПроцедуры // ЗагрузитьШКИзФайлаВСтроку

//======================================================================
Функция ДанныеВТЗ()
	//разделитель полей = ";" (код смвола = 59), разделитель данных = коды символов 13 и 10
	кодСимвРазделителя = КодСимв(";");
	тз = СоздатьОбъект("ТаблицаЗначений");
	тз.НоваяКолонка("ШК");
	тз.НоваяКолонка("ПартияПост");
	тз.НоваяКолонка("Кво","число",15,2);
	
	данные = СокрЛП(стрДанныеШК);
	//пробное чтение для выяснения формата 
	счРазделителей = 0;
	Для сч = 1 По СтрДлина(данные) Цикл
		символКод = КодСимв(Сред(данные,сч,1));
		Если символКод = кодСимвРазделителя Тогда //разделитель полей
			счРазделителей = счРазделителей + 1;
		ИначеЕсли символКод = 13 Тогда
			Прервать;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;	
	Сообщить("форматДанных = " + счРазделителей);
	
	текДанные = "";
	Если счРазделителей = 0 Тогда //только ШК
		Для сч = 1 По СтрДлина(данные) Цикл
			Если текДанные = "" Тогда
				тз.НоваяСтрока();
				резСтрока = "";
			КонецЕсли;
			символ = Сред(данные,сч,1);
			Если КодСимв(символ) = 13 Тогда //возврат каретки
				текШК = Число(резСтрока);
				тз.ШК = текШК;
				текДанные = "";
			ИначеЕсли КодСимв(символ) = 10 Тогда //перевод строки
				Продолжить;
			Иначе
				резСтрока = резСтрока + символ;
			КонецЕсли;
			//Сообщить("символ = " + символ + " код символа = " + КодСимв(символ));
		КонецЦикла;	
		
	Иначе //Шк, возможно партия и кво
		текДанные = "";
		Для сч = 1 По СтрДлина(данные) Цикл
			Если сч = 1 Тогда
				тз.НоваяСтрока();
				номерПоля = 1;
			КонецЕсли;
			символ = Сред(данные,сч,1);
			Если (КодСимв(символ) = 13) или (сч = СтрДлина(данные)) Тогда //возврат каретки
				Если сч = СтрДлина(данные) Тогда
					текДанные = текДанные + символ;
				КонецЕсли;
				текКво = Число(текДанные);
				тз.Кво = текКво;
				текДанные = "";
				Если сч < СтрДлина(данные) Тогда
					тз.НоваяСтрока();
					номерПоля = 1;
				КонецЕсли;
			ИначеЕсли КодСимв(символ) = 10 Тогда //перевод строки
				Продолжить;
			ИначеЕсли КодСимв(символ) = кодСимвРазделителя Тогда //разделитель полей
				Если номерПоля = 1 Тогда //ШК
					тз.ШК = Число(текДанные);
					текДанные = "";
					номерПоля = номерПоля + 1;
				ИначеЕсли номерПоля = 2 Тогда
					тз.ПартияПост = текДанные;
					текДанные = "";
					номерПоля = номерПоля + 1;
				КонецЕсли;
			Иначе
				текДанные = текДанные + символ;
			КонецЕсли;
			//Сообщить("символ = " + символ + " код символа = " + КодСимв(символ));
		КонецЦикла;	
	КонецЕсли;
	//тз.ВыбратьСтроку();
	Возврат тз;
КонецФункции // ДанныеВТЗ

//======================================================================
//3 формата данных: 1. - только ШК, 2- ШК;кво - ШК и количество, 3 - ШК,партия,кво
Процедура ЗагрузитьСписокШК()
	Перем спсШК;
	Если ПустаяСтрока(стрДанныеШК) = 1 Тогда
		//Предупреждение("Выберите файл со штрих-кодами или загрузите со сканера в поле ввода.",10);
		Возврат;
	КонецЕсли;
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Табличная часть документа будет очищена. Продолжить?",4,15) <> 6 Тогда
			Возврат;
		Иначе
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
	
	Если выбСорт.Выбран() = 0 Тогда
		Предупреждение("Не выбран сорт товаров.",15);
		Возврат;
	КонецЕсли;
	тз = ДанныеВТЗ();	
	
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		текШК = тз.ШК;
		текКво = тз.Кво;
		текПартияПоставщика = тз.ПартияПост; 
		текСорт = выбСорт;
		ЗагрузитьСоСканера(текШК,текКво,текСорт,?(пустоеЗначение(текПартияПоставщика) = 1,"",текПартияПоставщика));
	КонецЦикла;
	Если КоличествоСтрок() <> 0 Тогда
		ПерезаполнитьПоСкладу(); ///Заполняем данные из учета
	КонецЕсли;
	
	глСохранитьЗначение(Контекст,"выбКаталог",выбКаталог);
	глСохранитьЗначение(Контекст,"Имя",Имя);
	Сообщить("Загрузка завершена");
	Форма.Закладки.ТекущаяСтрока(1);
	ПриВыбореЗакладки(1,Форма.Закладки.ПолучитьЗначение(1,));
	
КонецПроцедуры // ЗагрузитьСписокШК

//######################################################################################

//******************************************************************************
// При входе в Форму запомним промежуточные переменные
ТипыИнвентаризации.ДобавитьЗначение(1,"<по фирме в целом>");
ТипыИнвентаризации.ДобавитьЗначение(2,"<по складу>");
ТипыИнвентаризации.ДобавитьЗначение(3,"<по реализатору>");
ТипыИнвентаризации.ДобавитьЗначение(4,"<по комитенту>");

СписокПечати = СоздатьОбъект("СписокЗначений");
СписокПечати.ДобавитьЗначение("Печать сверки");
СписокПечати.ДобавитьЗначение("Печать акта");
//СписокПечати.ДобавитьЗначение("Печать слич. ведомости");
                                                   
//*****************************************************************************
//Инициализирум список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|СтруктураПодчиненности,
	|ДвиженияДокумента,
	|ОткрытьВЖурнале,
	|ИзмКомментария" + ?(ИмяПользователя() = "1САдм",",фактРавенУчет",""));

	
	//======================================================
 //дополненияТорговля = СоздатьОбъект("дополненияТорговля");
спрКонтрПрава = СоздатьОбъект("КонтрагентыПрава");
ПравоПользователяИнв = спрКонтрПрава.ПолучитьПравоПользователя(,"флИнвентаризация"); 
складЛенина = гл_ПолучитьЗначениеДопКонстанты("складЛенина");

//TODO 28112022 при загрузке со сканера сделать загрузку данных из файла