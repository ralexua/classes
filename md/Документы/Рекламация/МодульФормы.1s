//*****************************************************************************
// Описание переменных 
Перем ДатаОплаты,новый;
Перем СписокДействий;
Перем СтарыйКонтрагент;
Перем СтараяДата;
Перем РезервыТоваров;
Перем НачальнаяДатаДокумента;
Перем стНеликвид,стСорт;
Перем спрКонтрПрава;
Перем стТовар; 
перем текФрейм;
Перем ЗаказДвери;
Перем флОтклКонтрольЦен Экспорт;
Перем этоКладовщикШК;

////#Для отладки
//Процедура ГенерироватьСобытиеСотр1()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
//	спсВрем.ИзСтрокиСРазделителями("5000000027019");
//	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
//Процедура ГенерироватьСобытиеСотр2()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
//	спсВрем.ИзСтрокиСРазделителями("5000000007011");
//	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
//Процедура ГенерироватьСобытиеСотрВербицкая()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	спсВрем.ИзСтрокиСРазделителями(" 5000000011018"); //Таня Назаренко
//	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
//	//спсВрем.ИзСтрокиСРазделителями("5000000007011");
//	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
//
//Процедура ГенерироватьСобытиеТовар()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	спсВрем.ИзСтрокиСРазделителями("4820026540139");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
////======================================================================
//Процедура ГенерироватьСобытие()
//	Источник = "";
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	спсВрем.ИзСтрокиСРазделителями("4823065814308");
//	//спсВрем.ИзСтрокиСРазделителями("4823065814308, 4823065814315, 4823065813882, 4823065813899, 4823065813905");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//

//======================================================================
Процедура ПолучитьДанныеСоСканераШК()
	парам = "";
	Если ВвестиСтроку(парам,"Введите штрихкод",13,0,20) <> 1 Тогда
		Возврат;
	КонецЕсли;
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	Сервис.ВнешнееСобытие(Источник,"BarCodeValue",парам);
КонецПроцедуры // ПолучитьДанныеСоСканераШК()

//======================================================================
//#*** ШК ***
Процедура ЗагрузитьСоСканера(Данные)
	// Определение типа штрих-кода
	Если ШтрихКодИмеетПрефикс=1 Тогда
		Если Найти("MPJS",Лев(Данные,1))<>0 Тогда
			// Штрих-код определяет товар
			Данные=Сред(Данные,2,СтрДлина(Данные)-1);
		Иначе
			Сообщить("Формат считанного штрих-кода не предназначен для товаров");
		КонецЕсли;
	КонецЕсли;
	
	Тов=СоздатьОбъект("Справочник.Номенклатура");
	Упак=СоздатьОбъект("Справочник.Единицы");
	
	Лев2 = Лев(Данные,2);
	
	//Если Лев2 = "22" Тогда
	//	// Используется свой внутренний штрих-код товара
	//	// Штрих-код построен по коду товара и весу
	//	Если Тов.НайтиПоКоду(Сред(Данные,3,5))=0 Тогда
	//		Сообщить("Товар с кодом "+Сред(Данные,3,5)+" не найден");
	//		Возврат;
	//	КонецЕсли;
	//	Упаковка = Тов.ЕдиницаПоУмолчанию;
	Если Лев2 = "50" Тогда//сотрудник
		текОтгружен = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"отгружен");
		Если текОтгружен = 1 Тогда
			Предупреждение("по документу уже была отгрузка.");
			Возврат;
		КонецЕсли;
		спрСотр = СоздатьОбъект("Справочник.Сотрудники");
		Если спрСотр.НайтиПоРеквизиту("ШтрихКод",Данные,1) = 0 Тогда
			Сообщить("Сотрудник с ШК " + Данные + " не найден.");
			Форма.Закрыть(0);
			Возврат;
		КонецЕсли;
		
		//расшФормыПослеСкана = СоздатьОбъект("РасширениеФормы");
		//расшФормыПослеСкана.ОбработкаОжидания("ЗакрытьДокумент",1000); //1 сек = 1000 миллисекунд 
		//расшФормы.ОбработкаОжидания("ЗакрытьДокумент",0);

		текСотр = спрСотр.ТекущийЭлемент();
		//ищем пользователя
		спрПользователи = СоздатьОбъект("Справочник.Пользователи");
		спрПользователи.ВыбратьЭлементы();
		Пока спрПользователи.ПолучитьЭлемент() = 1 Цикл
			Если спрПользователи.сотрудник = текСотр Тогда
				Если спрПользователи.флКладовщик = 1 Тогда
					Если текОтгружен = 1 Тогда
						текДатаОтгрузки = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"датаОтгрузки");
						Предупреждение("По документу " + номерДок + " уже было получение " + текДатаОтгрузки + " !!!");
						Возврат;
					Иначе
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"отгружен",1);
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"датаОтгрузки",ТекущаяДата());
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"времяОтгрузки",ТекущееВремя());
						//отборОтгружен = 1;
						Отпустил = текСотр;
						Если Записать() = 1 Тогда
							Форма.Закрыть(0);
						Иначе
							Предупреждение("МЕТКА ПОЛУЧЕНИЯ НЕ УСТАНОВЛЕНА. ПОВТОРИТЕ ПОПЫТКУ.");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
					
		Для сч = 1 по 5 Цикл
			текЗн = ПолучитьАтрибут("грузчик" + сч);
			Если ПустоеЗначение(текЗн) = 1 Тогда
				УстановитьАтрибут("грузчик" + сч,текСотр);
				//Сообщить("Сотрудник " + текСотр + " добавлен.");
				Если этоКладовщикШК = 0 Тогда
					Провести();
				Иначе
					Записать();
				КонецЕсли;
				//Сервис.Пауза(2000);
				Форма.Закрыть(0);
				Возврат;
			ИначеЕсли текЗн = текСотр Тогда
				Сообщить("Сотрудник " + текСотр + " уже указан.");
				//Сервис.Пауза(2000);
				Форма.Закрыть(0);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Используется основной штрих-код товара
		// или свой внутренний штрих-код товара с префиксом "20,21"
		Если Упак.НайтиПоРеквизиту("ШтрихКод",Данные,1)=0 Тогда
			Сообщить("Товар со штрих кодом "+Данные+" не найден");
			Возврат;
		КонецЕсли;
		Упаковка=Упак.ТекущийЭлемент();
		Тов=Упаковка.Владелец;
	КонецЕсли;
	
	тзТЧ = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тзТЧ);

	стр = 0;
	Если тзТЧ.НайтиЗначение(Тов,стр,"Товар") = 1 Тогда
		тзТЧ.ПолучитьСтрокуПоНомеру(стр);
		//проверяем единицу измерения
		Если тзТЧ.Единица = Упаковка Тогда
			тзТЧ.КвоШК = тзТЧ.КвоШК + 1;
		Иначе
			//пересчет
			врКво =  1/тзТЧ.Единица.Коэффициент * Упаковка.Коэффициент;
			тзТЧ.КвоШК = тзТЧ.КвоШК + врКво;
		КонецЕсли;
	Иначе
		//не нашли
		//тзТЧ.НоваяСтрока();
		//тзТЧ.Товар = Тов;
		//тзТЧ.Единица = упаковка;
		//тзТЧ.Количество = 0;
		//тзТЧ.Коэффициент = Упаковка.Коэффициент;
		//тзТЧ.КвоШК = 1;
		Сообщить("товар " + Тов.Код + " " + Тов +" не найден в документе!","!!!");
	КонецЕсли;
	ЗагрузитьТабличнуюЧасть(тзТЧ);
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)	// Предопределенная процедура
	//Сообщить(Данные);
	Если РаботаСоСканеромШтрихКода=2 Тогда
		Если Событие="BarCodeValue" Тогда
			Если Scaner <> 0 Тогда
				Если Scaner.OldVersion<>0 Тогда
					//Работа драйвера совместима с предыдущей версиией
					// Источник="BarCodeScaner" (для других устройств свои названия)
					//Событие="BarCodeValue", Данные=ПолученныеДанные
					//Сообщить("Old Version <> 0");
					//Сообщить("Источник: "+Строка( Источник ));
					//Сообщить("Событие: "+Строка( Событие ));
					//Сообщить(Строка("Данные от устройства: "+ Данные));
				Иначе
					//Работа драйвера не совместима с предыдущей версией
					// Источник="BarCodeScaner" (для других устройств свои названия)
					////Событие="BarCodeValue", Данные=НомерСобытия
					//Сообщить("Old Version = 0");
					Scaner.EventNumber=Число(Данные);
					//Сообщить("Данные от устройства: "+Scaner.ScanData);
					//Сообщить("Порт: "+Scaner.PortDescription);
					//Сообщить("Модель: "+Scaner.DeviceDescription);
					//Сообщить("Лог. устройство: " + Строка(Scaner.CurrentDeviceNumber) + " | " + Scaner.CurrentDeviceName);
					Scaner.DeleteEvent();
				КонецЕсли;
				Scaner.DataEventEnabled = 1;
				//Сообщить("Количество сообщений "+Строка(Scaner.DataCount));
				Если Константа.Отладка = Нет Тогда
					Данные = Scaner.Данные;
				КонецЕсли;
			Иначе
				Попытка
					СканерШтрихКода.ПосылкаДанных = 1; 
				Исключение
				КонецПопытки;
			КонецЕсли;
			ЗагрузитьСоСканера(Данные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//
//######################################################################################
//*** конец ШК ***

//Процедура ОтправитьТаблицуЕмаил(еТабл) Далее
//*****************************************************************************
// "служебные" функции и процедуры 

Функция ПоставитьЗадачуВCRM()
	спсПарам = СоздатьОбъект("Структура");
	спсПарам.Вставить("Заголовок", " " + ТекущийДокумент());
	спсПарам.Вставить("Описание", СокрЛП(ОписаниеЗадачи));
	спсПарам.Вставить("ДатаНачала", ДатаДок);
	спсПарам.Вставить("ДатаКонца", срокИсполненияЗадачи);
	спсПарам.Вставить("users_id", СотрудникЗадачи);
	спсПарам.Вставить("конт", глВернутьКонтекст(Контекст));
	
	API_CRM = СоздатьОбъект("API_CRM");
	рез = API_CRM.ПоставитьЗадачу_API(спсПарам);
	Если рез <> 0 Тогда
		id_задачиВ_CRM = СокрЛП(id_задачиВ_CRM) + ?(ПустаяСтрока(id_задачиВ_CRM) = 1,"",",") + рез;
		Записать();
	КонецЕсли;
	Возврат рез;  //если о то задача не поставлена
КонецФункции // ПоставитьЗадачуВCRM()

Процедура ОбновитьНадписи()
	Форма.ТекстВалюты.Заголовок(глСтрокаВалюты(Контекст));
	Форма.ТекстОснования.Заголовок(СокрП(Основание));
	//Форма.ТекстПорядокОплаты.Заголовок(глСтрокаПорядокОплаты(Контекст));
	//Форма.ТекстВалютыПересчета.Заголовок(глСтрокаВалютыПересчета(Контекст));
КонецПроцедуры

//======================================================================
Процедура ДобавитьФайл()
	Перем ИмяФайла,ИмяКаталога;
	Если ФС.ВыбратьФайл(0,ИмяФайла,ИмяКаталога,"выбор файла","*.*","*.*",20) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = СокрЛП(ИмяКаталога);
	ИмяКаталога = ИмяКаталога + ?(Прав(ИмяКаталога,1) <> "\", "\","");
	полнИмяФайла = ИмяКаталога + СокрЛП(ИмяФайла);
	спсФайлов.ДобавитьЗначение(полнИмяФайла,полнИмяФайла);
	спсФайлов.СортироватьПоПредставлению();
КонецПроцедуры // ДобавитьФайл

//======================================================================
Процедура ДобавитьФайлСтрокой()
	Перем стр;
	Если ВвестиСтроку(стр,"путь к файлу или ссылка",255,0,20) <> 1 Тогда
		Возврат;
	КонецЕсли;
	стр = сокрЛП(стр);
	спсФайлов.ДобавитьЗначение(стр,стр);
	спсФайлов.СортироватьПоПредставлению();
КонецПроцедуры // ДобавитьФайлСтрокой()

//======================================================================
Процедура УдалитьФайл()
	Предупреждение("будет удалена только ссылка на файл. Если Вы хотите удалить файл то Вам необходимо сделать это самостоятельно.");
	спсФайлов.УдалитьЗначение(спсФайлов.ТекущаяСтрока());
	спсФайлов.СортироватьПоПредставлению();
КонецПроцедуры // УдалитьФайл

//======================================================================
Процедура ОткрытьФайл()
	текФайл = """" + спсФайлов.ПолучитьЗначение(спсФайлов.ТекущаяСтрока()) + """";
	ЗапуститьПриложение(текФайл);
	//КомандаСистемы("explorer.exe /select," + текФайл)
	//КомандаСистемы("explorer.exe /select,""R:\1.ert""")
КонецПроцедуры // ОткрытьФайл

// ===============================
Функция НайтиЗаказДвери()
	Перем текЗаказДвери;
	Если Выбран() = 1 Тогда
		док = СоздатьОбъект("Документ");
		док.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока док.ПолучитьДокумент() = 1 Цикл
			Если док.Вид() = "ЗаказДвери" Тогда
				текЗаказДвери = док.ТекущийДокумент();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат текЗаказДвери;
КонецФункции

Функция УстановитьНадписьРаспечатанОтгружен()
	Возврат дополненияТорговля.УстановитьНадписьРаспечатанОтгружен(Контекст);
КонецФункции

//======================================================================
//*ralex, 30-10-22 17:02
//Процедура ПередатьДокументНаОтправку()
//	_email = СоздатьОбъект("_email");
//	//*ralex, 28-08-22 13:42
//	//Расш = _email.создатьСписокПараметров(Контекст,Контрагент.АдресПолучателя,1);
//	// -------- заменено на:
//	Расш = _email.создатьСписокПараметров(Контекст,,1,"pdf");
//	Если Расш.Получить("отправлятьПисьмо") = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	//*/------------------------
//	ТаблДок = текФрейм.ПанельИнструментов.Документ;
//	_email.ОтправкаПисьмаСТаблДок_PDF_Стройбум(Расш,ТаблДок);
//	текЕмаил= Нрег(дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"емаил")); //+ralex, 19-12-21 23:02
//	наКакойЕмаилОтправилиПисьмо = Расш.Получить("емаил");
//	Если Найти(СокрЛП(текЕмаил),Нрег(СокрЛП(наКакойЕмаилОтправилиПисьмо))) = 0 Тогда
//		текЕмаил = СокрЛП(текЕмаил) + ?(ПустаяСтрока(текЕмаил) = 1,"",",") + наКакойЕмаилОтправилиПисьмо;
//	КонецЕсли;
//	
//	дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"емаил",текЕмаил);
//КонецПроцедуры // ПередатьДокументНаОтправку
// -------- заменено на:
//*ralex, 21-04-23 00:23
//Процедура ПередатьДокументНаОтправку()
//	_email = СоздатьОбъект("_email");
//	Расш = _email.создатьСписокПараметров(Контекст,,1,"pdf");
//	ТаблДок = текФрейм.ПанельИнструментов.Документ;
//	_email.ОтправкаПисьма(Расш,ТаблДок);
//КонецПроцедуры // ПередатьДокументНаОтправку
// -------- заменено на:
Процедура ПередатьДокументНаОтправку()
	ОтправленоНаЕмаил = "";
	_email = СоздатьОбъект("_email");
	Расш = _email.создатьСписокПараметров(Контекст,Контрагент.АдресПолучателя,1,"pdf");
	ТаблДок = текФрейм.ПанельИнструментов.Документ;
	_email.ОтправкаПисьма(Расш,ТаблДок);
	Если ПустаяСтрока(ОтправленоНаЕмаил) = 0 Тогда
		//готовим запись в спр. состояний документа
		спсДанные = дополненияТорговля.ПодготовитьДанныеОбОтправкеЕмаил(ОтправленоНаЕмаил,глПользователь);
		дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"инфоОбОтправкеЕмаил",спсДанные);
		флОтправлен = 1;
		ЗаписьЖурналаРегистрации("Письмо отправлено: " + ОтправленоНаЕмаил ,,,,4);
	Иначе
		Сообщить("Письмо не отправлено.");
		ЗаписьЖурналаРегистрации("Письмо не отправлено." ,,,,4);
	КонецЕсли;
КонецПроцедуры // ПередатьДокументНаОтправку
//*/------------------------

//======================================================================
Процедура ПередатьДокументНаОтправку_Телеграм()
	ТаблДок = текФрейм.ПанельИнструментов.Документ;
	спсПарам = СоздатьОбъект("СписокЗначений");
	спсПарам.ДобавитьЗначение("документ","видИсточника");
	спсПарам.ДобавитьЗначение("pdf","форматФайла");
	спсПарам.ДобавитьЗначение(ТаблДок,"исхТаблица");
	спсПарам.ДобавитьЗначение(глВернутьКонтекст(Контекст),"контекст");
	спсПарам.ДобавитьЗначение(СокрЛП(глПользователь.Сотрудник.id_telegram),"id");
	телеграм = СоздатьОбъект("telegramApi");
	
	телеграм.ОтправитьДокументВБот(спсПарам);
КонецПроцедуры // ПередатьДокументНаОтправку

//----работа  с фреймом -------

//======================================================================
//Процедура ОбработкаЯчейкиТаблицы (Значение, ФлагСтандОбр, Таблица, Адрес)
//	Сообщить ("ОбработкаЯчейкиТаблицы: Значение = " + Значение);
//КонецПроцедуры

//Процедура ПриВыбореЯчейки(Документ, НомерСтроки, номерКолонки)
//	Если НазваниеНабораПрав() <> "Администратор" Тогда
//		Возврат;
//	КонецЕсли;
//	//Сообщить("Выбрана ячейка " + номерСтроки + ":" + НомерКолонки);
//	Обл = Документ.область(НомерСтроки,номерКолонки);
//	//Сообщить(обл.цветФона);
//	Если Обл.ЦветФона <> ЦветВыкл Тогда
//		Обл.цветФона = ЦветВыкл;
//	Иначе
//		Обл.ЦветФона = ЦветВкл;
//	КонецЕсли;
//	текФрейм.обновить();
//КонецПроцедуры

Процедура ЗакрытьФрейм ()
	Если ТипЗначенияСтр (текФрейм) <> "ТабличныйДокумент.Фрейм" Тогда
		//Сообщить ("Фрейм не был открыт");
		Возврат;
	КонецЕсли;
	текФрейм.Закрыть ();
КонецПроцедуры

//======================================================================
Функция СоздатьМеню()
	меню = СоздатьОбъект("Йоксель.Меню");
	меню.Добавить("емаил","емаил","емаил1");
	меню.Добавить("telegram","telegram","telegram");
	меню.Добавить("контрагент","выбрать клиента","контрагент1");
	Возврат меню;
КонецФункции // СоздатьМеню

Процедура ДобавитьКнопку(идКн,заголовокКн,значениеКн,доступностьКн = 1,этоФлажок = 0,ВыбКнопкаЗначениеФлажка = 0,ВыбКнопкаСМеню = 0)
	Если ТипЗначенияСтр (текФрейм) <> "ТабличныйДокумент.Фрейм" Тогда
		Сообщить ("Фрейм не был открыт");
		Возврат;
	КонецЕсли;
	
	Панель = текФрейм.ПанельИнструментов;
	Кнопка = Панель.ДобавитьКнопку (идКн);
	Кнопка.Заголовок = заголовокКн;
	Кнопка.Значение = значениеКн;
	Кнопка.Доступность = доступностьКн;
	Кнопка.ЭтоФлажок = этоФлажок;
	Кнопка.ЗначениеФлажка = ВыбКнопкаЗначениеФлажка; //1/0
	Если ВыбКнопкаСМеню = 1 Тогда
		Кнопка.Меню = СоздатьМеню ();
	Иначе
		Кнопка.Меню = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ПоКомандеПользователя (Документ, Команда, Значение)
	//Сообщить ("Поступила команда: " + Команда + ", Ассоциированное значение: " + Значение);
	//Если Значение = "обновить" Тогда
	//	ЗакрытьФрейм();
	//	ОбработкаЯчейкиТаблицы(Расшифровка, 0, Т);
	//КонецЕсли;
	
	//Если Значение = "сохрИзм" Тогда
	//	СохранитьИзмененияВТоварах();
	//КонецЕсли;
	
	Если Значение = "sendEmail" Тогда
		спсПарам = СоздатьОбъект("СписокЗначений");
		спсПарам.Установить("Формат",1); //excel
		спсПарам.Установить("ИДКонтекста",Метаданные.ПолныйИдентификатор());
		спсПарам.Установить("Тема",Метаданные.Идентификатор);
		ПередатьДокументНаОтправку();
		
		//ИначеЕсли Значение = "контрагент1"  Тогда
		//	текКонтрагент = выбКонтрагент;
		//	Если ВвестиЗначение(текКонтрагент,"Справочник.Контрагенты") <> 1 Тогда
		//		Возврат;
		//	КонецЕсли;
		//	Если ПустаяСтрока(текКонтрагент.АдресПолучателя) = 1 Тогда
		//		Предупреждение("У клиента не указан email");
		//		Возврат;
		//	КонецЕсли;
		//	спсПарам = СоздатьОбъект("СписокЗначений");
		//	спсПарам.Установить("Формат",1); //excel
		//	спсПарам.Установить("ИДКонтекста","Отчет.РабочийПрайс");
		//	спсПарам.Установить("Тема","Прайс");
		//	спсПарам.установить("емаил",СокрЛП(текКонтрагент.АдресПолучателя));
		//	ОтправитьЕмаил(спсПарам);
	ИначеЕсли Значение = "sendtelegram" Тогда
		ПередатьДокументНаОтправку_Телеграм();
		
	КонецЕсли;
	//Если Значение = "счРасш" Тогда
	//	ТаблДок = текФрейм.ПанельИнструментов.Документ;
	//	Обл = ТаблДок.область(15,1);
	//	Если Обл.содержитРасшифровку = 1 Тогда
	//		Сообщить(Обл.Расшифровка() + " :: " + Обл.Расшифровка().код);
	//	Иначе
	//		Сообщить(Обл + " не содержит расшифровки");
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

//======================================================================
Процедура ВставитьКолонки(передКолонкой,квоКолонок)
	//ТабЭлемент.Документ.ВставитьКолонки (ВыбКолонка, ВыбКоличествоКолонок);
	//ТабЭлемент.Обновить ();
	текФрейм.ПанельИнструментов.Документ.ВставитьКолонки(передКолонкой,квоКолонок);
КонецПроцедуры // ВставитьКолонки

//======================================================================
Процедура ВызовКонтекстногоМеню()
КонецПроцедуры // гл

Процедура ВывестиВоФрейм(ТаблМХЛ,еМаил = 0)
	ТаблДок = СоздатьОбъект ("ТабличныйДокумент");
	ТаблДок.ЗагрузитьИзТаблицы (ТаблМХЛ);
	
	текФрейм = ТаблДок.Показать ("" + ТекущийДокумент());
	текФрейм.ТолькоПросмотр(1);
	Панель = текФрейм.ПанельИнструментов;
	ЭлемУправления = текФрейм.получитьЭлементУправления(1);
	Панель.ПодписатьсяНаСобытие ("КомандаПользователя", "ПоКомандеПользователя");
	//ЭлемУправления.ПодписатьсяНаСобытие ("ВыборЯчейки", "ПриВыбореЯчейки");
	//ЭлемУправления.ПодписатьсяНаСобытие ("ВызовКонтекстногоМеню", "ВызовКонтекстногоМеню");
	//текФрейм.ФиксироватьСтрокиСверху(фиксСтрок);
	//Панель.ПодписатьсяНаСобытие ("ОбработкаЯчейкиТаблицы", "ОбработкаЯчейкиТаблицы");
	ДобавитьКнопку("email","email","sendEmail",,,,0);
	Если ПустоеЗначение(глПользователь.Сотрудник) = 0 Тогда
		Если ПустаяСтрока(глПользователь.Сотрудник.id_telegram) = 0 Тогда
			ДобавитьКнопку("telegram","telegram","sendtelegram",,,,0);
		КонецЕсли;
	КонецЕсли;	
	
	//ДобавитьКнопку("обновить","Обновить","обновить");
	//Если НазваниеНабораПрав() = "Администратор" Тогда
	//	ДобавитьКнопку("сохрИзм","Записать изм.","сохрИзм");
	//КонецЕсли;
	//ДобавитьКнопку("СчитатьРасшифровку","Расшифровка","счРасш");
	Панель.Видимость = 1;
	Если еМаил = 1 Тогда
		ПередатьДокументНаОтправку();
		ЗакрытьФрейм();
	КонецЕсли;
	//ТаблДок.ВставитьКолонки(ТаблДок.ШиринаТаблицы() + 1, 2);
КонецПроцедуры // ВывестиВоФрейм
//---конец работы с фреймом -------

//*****************************************************************************
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
	Заголовок = "Рекламация ";
	Название ="Рекламация №";
	
	Заголовок = Заголовок + глЗаголовок(Контекст);
	
	Форма.Заголовок(Заголовок);     
	Возврат Название;
КонецФункции //ЗаголовокФормы

//******************************************************************************
Процедура ИзмТовар()
	Если стТовар <> Товар Тогда
		СуммаСкидки = 0;
	КонецЕсли;	
КонецПроцедуры // ИзмТовар

//******************************************************************************
Процедура ИзмДатаДок()
	глПриИзмененииДатыДокумента(Контекст, СтараяДата);
	ОбновитьНадписи();
КонецПроцедуры

//======================================================================
Процедура ИзмЦена()
	СуммаСНДС = ЦенаСНДС * Количество;
КонецПроцедуры // ИзмЦена

//======================================================================
Процедура измРекламацияЗавершена()
	Если ДатаРекламацияЗавершена = Дата(0) Тогда
		ДатаРекламацияЗавершена = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры // измРекламацияЗавершена

//*****************************************************************************
// функции и процедуры, вызываемые из формул элементов диалога
                              
// ===============================
Процедура Подбор()
	Варианы= СоздатьОбъект("СписокЗначений");
	Варианы.ДобавитьЗначение("по каталогу");
	Варианы.ДобавитьЗначение("по прайсу");
	Варианы.ДобавитьЗначение("по штрих-коду");
	Результат = 0;
	Если Варианы.ВыбратьЗначение(,,Результат,,1)=1 Тогда
	    Если Результат = 1 Тогда
			глПодбор(Контекст,"номенклатура","ДляПодбора")
		ИначеЕсли Результат = 2 Тогда
			глПодбор(Контекст,"прайс_лист","ДляПодбора")
		ИначеЕсли Результат = 3 Тогда
			ОткрытьПодбор("Обработка.ПодборПоШтрихКоду");
	    КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//******************************************************************************
Процедура Взаиморасчеты()
	глПоказатьДолг(Контекст, Контрагент, "Продажа");
КонецПроцедуры

//*****************************************************************************
Процедура ВыборФирмы()
	// по кнопке редактирования параметров фирмы в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОфирме", КонтекстДокумента);
	ОбновитьНадписи();
КонецПроцедуры	
	
//*****************************************************************************
Процедура ВыборОплаты()
	// Процедура по кнопке редактирования параметров оплаты в докумнете
	Перем КонтекстДокумента;
	Перем СтараяКатегорияЦен;
	//СтараяКатегорияЦен = КатегорияЦен;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	//Если СтараяКатегорияЦен <> КатегорияЦен Тогда
	    // изменилась категория цен
		// перерисуем
		Если ПустоеЗначение(КонтекстПодбора) = 0 Тогда
		    КонтекстПодбора.Форма.Обновить();
		КонецЕсли;
	//КонецЕсли;
	ОбновитьНадписи();
КонецПроцедуры	

//*****************************************************************************
Процедура ИзмКонтрагент(флПодтвержден = 0) // Процедура при выборе Контрагента в документе
	
    Если Контрагент.Выбран()=1 Тогда     
		Если спрКонтрПрава.ПроверитьРазрешение(Контрагент) = 0 Тогда
			Контрагент = СтарыйКонтрагент;
			Предупреждение("Вам запрещено создавать документы для этого контрагента",10);
			Возврат;
		КонецЕсли;
		
		Если (СтарыйКонтрагент <> Контрагент) Тогда
			// изменили Контрагента
			// очистим договор
			Договор = ПолучитьПустоеЗначение("Документ.Договор");
			Если Константа.ПодставлятьОсновнойДоговор = Да Тогда
				// подставим договор по умолчанию                                 
				Если ПустоеЗначение(Контрагент.ОсновнойДоговорТорг) = 0 Тогда
					Если Фирма = Контрагент.ОсновнойДоговорТорг.Фирма Тогда
						Договор = Контрагент.ОсновнойДоговорТорг;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Не выбран Контрагент - не имеет смысла показывать глубину и дату оплаты и договор
		Договор = ПолучитьПустоеЗначение("Документ.Договор");
	КонецЕсли;
	// Формирует и показывает дату оплаты
	СтарыйКонтрагент = Контрагент;
	ОбновитьНадписи();
	ВыбратьСтроки();
	глПриИзмененииТовара(Контекст);
КонецПроцедуры	
	
//*****************************************************************************
Процедура ВыборОснования()
	// Процедура по кнопке редактирования основания в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ОснованиеДокумента", КонтекстДокумента);
	//ИзмДоговор();
	// Могли изменить Контрагента
	ОбновитьНадписи();
КонецПроцедуры	

//******************************************************************************
//*ralex, 2016-06-14 13:34:23
//Функция КонтрольОстаткаВсего()
//	// Вычислим, сколько всего данного товара
//	ПолныйОстаток= Регистр.ОстаткиТоваров.СводныйОстаток(глПустаяФирма,Товар,,"ОстатокТовара");
//	Резерв= 0;
//	// проверяем резерв товара
//	Если Константа.РазрешитьПродаватьРезерв=Перечисление.ДаНет.Нет Тогда
//		// Вычислим, сколько зарезервировано всего данного товара
//		Резерв= Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара");
//	КонецЕсли;
//    Если Коэффициент>0 Тогда
//		Возврат (ПолныйОстаток-Резерв)/Коэффициент;
//    Иначе
//		Возврат 0;
//	КонецЕсли;
//КонецФункции
// -------- заменено на:
Функция КонтрольОстаткаВсего()
	// Вычислим, сколько всего данного товара
	
	//*ralex, 2017-02-12 12:21:32
	выбСорт = КондиционныйТовар;
	ПолныйОстаток= Регистр.ОстаткиТоваров.СводныйОстаток(?(ТипУчета = Фин,Фирма,глПустаяФирма),Товар,,выбСорт,,"ОстатокТовара"); //0 - управленческий, 2 - фин
    Если Коэффициент>0 Тогда
		Возврат ПолныйОстаток/Коэффициент;
    Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//*/ralex, 2016-06-14 13:34:23

//======================================================================
Функция показатьДатуЗавершенияРекламации()
	Если ДатаРекламацияЗавершена = Дата(0) Тогда
		Возврат "не закрыт.";
	Иначе
		Возврат "закрыт " + ДатаРекламацияЗавершена;
	КонецЕсли;
КонецФункции // показатьДатуЗавершенияРекламации

//======================================================================
Функция ПоказатьОстаток()
	Возврат Формат(КонтрольОстаткаВсего(),"Ч9.2") + " " + Единица;
КонецФункции // ПоказатьОстаток

//======================================================================
Функция ПоказатьРезерв()
	Возврат глКонтрольРезерва(Контекст,РезервыТоваров) + " " + Единица;
КонецФункции // ПоказатьОстаток

//======================================================================
//+ralex, 2015-09-15 22:31:42
Процедура ОстаткиПоСкладам()
	спрМХ = СоздатьОбъект("Справочник.МестаХранения");
	спрМХ.ВыбратьЭлементы();
	спсОстатки = СоздатьОбъект("СписокЗначений");
	выбСорт = КондиционныйТовар;

	Пока спрМХ.ПолучитьЭлемент() = 1 Цикл
		Если спрМХ.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		// Вычислим, сколько всего данного товара
		ПолныйОстаток= Регистр.ОстаткиТоваров.СводныйОстаток(?(ТипУчета = Фин,Фирма,глПустаяФирма),Товар,спрМХ.ТекущийЭлемент(),выбСорт,,"ОстатокТовара");
		Если ПолныйОстаток <>  0 Тогда
			Если Коэффициент>0 Тогда
				ПолнОст = ПолныйОстаток/Коэффициент;
			Иначе
				ПолнОст = ПолныйОстаток;
			КонецЕсли;
			спсОстатки.ДобавитьЗначение(спрМХ.ТекущийЭлемент(),"" + спрМХ.ТекущийЭлемент() + " = " + ПолнОст + " ");
		КонецЕсли;
	КонецЦикла;
	
	Резерв= 0;
	// проверяем резерв товара
	Если Константа.РазрешитьПродаватьРезерв=Перечисление.ДаНет.Нет Тогда
		// Вычислим, сколько зарезервировано всего данного товара
		Резерв= Регистр.РезервыТоваров.СводныйОстаток(Товар,,"РезервТовара");
		Если Резерв <> 0 Тогда
			Если Коэффициент>0 Тогда
				Резерв = Резерв/Коэффициент;
			КонецЕсли;
			спсОстатки.ДобавитьЗначение(Резерв," общий резерв товара = " + Резерв + " ");
		КонецЕсли;
	КонецЕсли;
	спсОстатки.ВыбратьЗначение(,,,,1);
КонецПроцедуры // ОстаткиПоСкладам
//======================================================================
Функция ЭтоОтветственныйМенеджер()
	Если НазваниеНабораПрав() = "Администратор" Тогда
		Возврат 1;
	КонецЕсли;
	Если Контрагент.Выбран() = 0 Тогда
		Возврат 0;
	ИначеЕсли Контрагент.Менеджер = глПользователь.Сотрудник Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции // ЭтоОтветственныйМенеджер

Процедура УстДоступность()
	Если названиенабораправ()<>"Администратор" Тогда
		Если распечатан=1 Тогда
			форма.толькопросмотр(1);
		КонецЕсли;
		Форма.КомментарийАдм.Доступность(0);
		Форма.КомментОтвМенеджера.Доступность(ЭтоОтветственныйМенеджер());
	Иначе
		флОтклКонтрольЦен = 1;
	КонецЕсли;
	
	Если НазваниеНабораПрав() <> "Администратор" Тогда
		форма.кнГрузчик1.Доступность(0);
		форма.кнГрузчик2.Доступность(0);
		форма.кнГрузчик3.Доступность(0);
		форма.кнГрузчик4.Доступность(0);
		форма.кнГрузчик5.Доступность(0);
	КонецЕсли;
	Если НЕ((НазваниеНабораПрав() = "Администратор") или (НазваниеНабораПрав() = "МенеджерСклад")) Тогда
		Форма.грузчик1.Доступность(0);
		Форма.грузчик2.Доступность(0);
		Форма.грузчик3.Доступность(0);
		Форма.грузчик4.Доступность(0);
		Форма.грузчик5.Доступность(0);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура Печать(БыстраяПечать=0,еМаил = 0)

	симвДА = 254; симвНЕТ = 111;
	симвНедостача = симвНЕТ;
	симвПересорт = симвНЕТ;
	симвПовр = симвНЕТ;

	Если ШтрКод = 0 Тогда
		Предупреждение("Для документа не сгенерирован штрихкод. Необходимо провести документ.");
		Возврат;
	КонецЕсли;
	ПечШтрихКод=Строка(ШтрКод);
	текРаспечатан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"распечатан"); //+ralex, 19-12-21 23:02

	Если видРекламации = Перечисление.ВидыРекламации.недостача Тогда
		симвНедостача = симвДА;
	ИначеЕсли видРекламации = Перечисление.ВидыРекламации.пересорт Тогда
		симвПересорт = симвДА;
	ИначеЕсли видРекламации = Перечисление.ВидыРекламации.повреждение Тогда
		симвПовр = симвДА;
	КонецЕсли;
	
	
//	Если (названиенабораправ()="Продавець") ИЛИ (названиенабораправ()="Менеджер") ИЛИ (названиенабораправ()="МенеджерТоварищ") Тогда
//		Если новый=1 Тогда
//			возврат;
//		КонецЕсли;
//	КонецЕсли;                       
//	Если (названиенабораправ()="Продавець") ИЛИ (названиенабораправ()="Менеджер")  ИЛИ (названиенабораправ()="МенеджерТоварищ") Тогда
//		Если Провести() = 0 Тогда
//			СтатусВозврата(0); Возврат;
//		КонецЕсли;			
//		Распечатан=1; 		
//		форма.толькопросмотр(1);
//		Если выбран()=1 Тогда
//			новый=0;
//		КонецЕсли;		
//	КонецЕсли;
//	
//	выбЗн = 0;
//	спсМеню = СоздатьОбъект("СписокЗначений");
//	спсМеню.ДобавитьЗначение("Счет","Счет");
//	спсМеню.ДобавитьЗначение("Заказ","Заказ на бланке");
//	Если спсМеню.ВыбратьЗначение(выбЗн,,,,1) <> 1 Тогда
//		Возврат;
//	КонецЕсли;
//	
	Таб = СоздатьОбъект("Таблица");    
	ПечФорма = "Рекламация";
	Язык = глЯзык(ПечФорма); 	
	глУстПропись(Гривня,Язык);
	Фирма.ИспользоватьДату(ДатаДок,1);

	Таб.ИсходнаяТаблица(ПечФорма);

	Если еМаил = 1 Тогда
		Если ПустаяСтрока(Фирма.АдресОтправителя) = 1 Тогда
			Сообщить("не указан email адрес отправителя: " + Фирма);
			Возврат;
		КонецЕсли;
		//Если ПустаяСтрока(Контрагент.АдресПолучателя) = 1 Тогда
		//	Сообщить("не указан email адрес получателя: " + Контрагент);
		//	Возврат;
		//КонецЕсли;
	КонецЕсли;
	Таб.ВывестиСекцию("Шапка");

	Ном = 1;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл                
		
		Таб.ВывестиСекцию("Строка");
		Ном = Ном+1;
	КонецЦикла;

	Таб.ВывестиСекцию("Дно"); 

	Если (ПустаяСтрока(Фирма.АдресОтправителя) = 0) и (ПустаяСтрока(Контрагент.АдресПолучателя) = 0) Тогда
		Таб.ОбластьПечати(2,1,Таб.ВысотаТаблицы(),Таб.ШиринаТаблицы());
	КонецЕсли;

	Если БыстраяПечать=1 Тогда
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(Константа.ПечКолЭкзСчетаПриБыстройПродаже);
		Таб.Напечатать(глОтладка);
	ИначеЕсли еМаил = 1 Тогда
		ВывестиВоФрейм(Таб,1);
	Иначе
		ВывестиВоФрейм(Таб);
	КонецЕсли;  
	
	дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"распечатан",текРаспечатан + 1);
КонецПроцедуры    

Процедура ВыборВариантаПечати()
		выбЗн = 0;
		спсМеню = СоздатьОбъект("СписокЗначений");
		спсМеню.ДобавитьЗначение("печатьСчета","печать счета");
		спсМеню.ДобавитьЗначение("email"," отправка счета на email");
		спсМеню.ДобавитьЗначение("Заказ","Заказ на бланке");
		Если спсМеню.ВыбратьЗначение(выбЗн,,,,1) <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		Если выбЗн = "email" Тогда
			Печать(0,1);
		ИначеЕсли выбЗн = "печатьСчета" Тогда
			Печать();
		ИначеЕсли выбЗн = "Заказ" Тогда
			спсПарам = СоздатьОбъект("СписокЗначений");
			спсПарам.ДобавитьЗначение(ТекущийДокумент(),"Док");
			ОткрытьФормуМодально("Обработка.ПечатьЗаказаДвери",спсПарам);
			Возврат;
		КонецЕсли;
КонецПроцедуры

//======================================================================
//Процедура ОтправитьТаблицуЕмаил(еТабл)
//	КаталогВложений = КаталогИБ() + СокрЛП(Фирма.КаталогИсхВложений);
//	Если ПустаяСтрока(КаталогВложений) = 1 Тогда
//		Предупреждение("Не указан каталог вложений для исходящих писем для фирмы " + Фирма + ". Письмо не отправлено." );
//		Возврат;
//	Иначе
//		Если Прав(КаталогВложений,1) <> "\" Тогда
//			КаталогВложений = КаталогВложений + "\";
//		КонецЕсли;
//	КонецЕсли;
//	Вложение = КаталогВложений + Шаблон("[ТекущийДокумент().Вид()]_[ТекущийДокумент().номерДок]");
//	еТабл.Записать(Вложение,1); //в формате XLS
//	Если ПустаяСтрока(Фирма.ПутьКЕРТпочты) = 1 Тогда
//		Предупреждение("В справочнике ""Фирмы"" не указан путь к внешней обработке работы с почтой. Отправка почты невозможна.");
//		Возврат;
//	КонецЕсли;
//	спсПар = СоздатьОбъект("СписокЗначений");
//	спсПар.ДобавитьЗначение(Контекст,"Конт");
//	спсПар.ДобавитьЗначение(Вложение + ".xls","Вложение");
//	ОткрытьФорму("Отчет",спсПар,КаталогИБ() + СокрЛП(Фирма.ПутьКЕРТпочты));
//	
//КонецПроцедуры // ОтправитьЕмаил()

//======================================================================
Функция РасшифровкаОбновить(Зн)
	Расш = СоздатьОбъект("СписокЗначений");
	Расш.Установить("Exel",1);
	Возврат Расш;
КонецФункции // РасшифровкаОбновить("Exel")

//======================================================================
//Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица) 
//	Если ПустоеЗначение(Расшифровка.Получить("Exel")) = 0 Тогда
//		ОтправитьТаблицуЕмаил(Таблица);
//		//КаталогВложений = КаталогИБ() + СокрЛП(Фирма.КаталогИсхВложений);
//		//Если ПустаяСтрока(КаталогВложений) = 1 Тогда
//		//	Предупреждение("Не указан каталог вложений для исходящих писем для фирмы " + Фирма + ". Письмо не отправлено." );
//		//	Возврат;
//		//Иначе
//		//	Если Прав(КаталогВложений,1) <> "\" Тогда
//		//		КаталогВложений = КаталогВложений + "\";
//		//	КонецЕсли;
//		//КонецЕсли;
//		//Вложение = КаталогВложений + Шаблон("[ТекущийДокумент().Вид()]_[ТекущийДокумент().номерДок]");
//		//Таблица.Записать(Вложение,1); //в формате XLS
//		//Если ПустаяСтрока(Фирма.ПутьКЕРТпочты) = 1 Тогда
//		//	Предупреждение("В справочнике ""Фирмы"" не указан путь к внешней обработке работы с почтой. Отправка почты невозможна.");
//		//	Возврат;
//		//КонецЕсли;
//		//спсПар = СоздатьОбъект("СписокЗначений");
//		//спсПар.ДобавитьЗначение(Контекст,"Конт");
//		//спсПар.ДобавитьЗначение(Вложение + ".xls","Вложение");
//		//ОткрытьФорму("Отчет",спсПар,КаталогИБ() + СокрЛП(Фирма.ПутьКЕРТпочты));
//	КонецЕсли;
//КонецПроцедуры

//*****************************************************************************
// Предопределенные процедуры

//******************************************************************************
Процедура ВводНового(Скопирован) //Предопределенная процедура
    новый=1;     
	распечатан=0;
	id_задачиВ_CRM = "";
	глЗаполнитьШапку(Контекст);
	Если Скопирован=1 Тогда	//копирование документа
		Сорт = КондиционныйТовар;
		Комментарий = "";
		ПрСкидки = 0;
		подтвержденСМС = 0;

		//+ralex, 27-04-21 23:58
		Если Константа.вклПроверкуКлиентаСМС = Да Тогда
			КатегорияЦен = Константа.РозничнаяКатегорияЦен;
		КонецЕсли;
		ИзмКонтрагент();
		//+/------------------------
		Возврат;
	КонецЕсли;         
	
	ДатаДок=РабочаяДата();
	Если ПустоеЗначение(глАктивныйДоговор) = 0 Тогда
		Контрагент = глАктивныйДоговор.Владелец;
		//+ralex, 2018-04-29 21:50:38
		Если спрКонтрПрава.ПроверитьРазрешение(Контрагент) = 0 Тогда
			Контрагент = СтарыйКонтрагент;
			Предупреждение("Вам запрещено создавать документы для этого контрагента",10);
			СтатусВозврата(0); Возврат;
		КонецЕсли;
		//+/ralex, 2018-04-29 21:50:38
		Договор = глАктивныйДоговор;
		КатегорияЦен = Контрагент.КатегорияЦен;
		СтарыйКонтрагент = Контрагент;
	Иначе
		Контрагент=Константа.ОсновнойПокупатель;
		//+ralex, 2018-04-29 21:50:38
		Если спрКонтрПрава.ПроверитьРазрешение(Контрагент) = 0 Тогда
			Контрагент = СтарыйКонтрагент;
			Предупреждение("Вам запрещено создавать документы для этого контрагента",10);
			СтатусВозврата(0); Возврат;
		КонецЕсли;
		//+/ralex, 2018-04-29 21:50:38
		
		ИзмКонтрагент();
	КонецЕсли;
	
	Валюта=Константа.ОсновнаяВалютаПродажи;
	Дата_Курса = ДатаДок;
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Валюта = Гривня;
	КонецЕсли;
	Курс=глКурсДляВалюты(Валюта,Дата_Курса);

	Если ПустоеЗначение(КатегорияЦен)=1 Тогда
		КатегорияЦен = Автор.КатегорияЦен;
	КонецЕсли;
	
	СрокРезервирования=Константа.ОсновнойСрокРезервирования;
	
	//ИзмДоговор();
	
	Сорт = КондиционныйТовар;
	Комментарий = "";
КонецПроцедуры

//******************************************************************************
Процедура ВводНаОсновании(ДокОснование) //Предопределенная процедура
	ВидДок = ДокОснование.Вид();
	глЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
	Если спрКонтрПрава.ПроверитьРазрешение(Контрагент) = 0 Тогда
		Контрагент = СтарыйКонтрагент;
		Предупреждение("Вам запрещено создавать документы для этого контрагента",10);
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	Сорт = КондиционныйТовар;
	Комментарий = "";
	
	ДокОснование.ВыбратьСтроки();
	Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		Товар = ДокОснование.Товар;
		Количество = ДокОснование.Количество;
		Единица = ДокОснование.Единица;
		Коэффициент = ДокОснование.Коэффициент;
		ЦенаСНДС = ДокОснование.ЦенаСНДС;
		СуммаСНДС = ДокОснование.СуммаСНДС;
	КонецЦикла;
КонецПроцедуры

Функция Итого()
	// Показ итоговых сумм по документу
	итСуммаСНДС = Итог("СуммаСНДС");
	Результат = ?(итСуммаСНДС = 0,""," Всего=" + глФРМ(итСуммаСНДС, Валюта, 1));
	Возврат Результат;
КонецФункции

//======================================================================
Процедура ПриВыбореЗакладки(ном,выбЗн)
	Форма.ИспользоватьСлой("Общий," + выбЗн,2);
	Если выбЗн = "Основной" Тогда
		Форма.кнВводШК.Видимость(0);
	КонецЕсли;
КонецПроцедуры // ПриВыбореЗакладки

//*****************************************************************************
Процедура ПриОткрытии() //Предопределенная процедура
	НачальнаяДатаДокумента = ДатаДок;
	ПриЗаписиПерепроводить(1);
	глПроверкаРазрешенияРедактирования(Контекст);
	Если новый<>1 тогда
		новый=0;
	КонецЕсли;  	
	
	Если ПустоеЗначение(ДокументОснование) = 1 Тогда
		форма.ЦенаСНДС.Доступность(1);
		Форма.СуммаСНДС.Доступность(1);
	Иначе
		форма.ЦенаСНДС.Доступность(0);
		Форма.СуммаСНДС.Доступность(0);
	КонецЕсли;
	Если (названиенабораправ()="Продавець") ИЛИ (названиенабораправ()="Менеджер") ИЛИ (названиенабораправ()="МенеджерТоварищ") ИЛИ (названиенабораправ()="МенеджерСклад")Тогда
		Если распечатан=1 Тогда
		    форма.кнподбор.доступность(0);			
		КонецЕсли;								
		ЕСли (проведен()=1) ИЛИ (ПометкаУдаления()=1) тогда		
			форма.толькопросмотр(1);
		КонецЕсли;		
		форма.распечатан.доступность(0); 
		Если Константа.РазрешитьПечатьСчетовМенеджерам = 0 Тогда
			АтрФормы = СоздатьОбъект("АтрибутФормы");
			АтрФормы.УстановитьАтрибут(Форма,"кнПечать");
			АтрФормы.Формула = "Печать(,1)";
		КонецЕсли;
	Иначе
		форма.распечатан.доступность(1);
		АтрФормы = СоздатьОбъект("АтрибутФормы");
		АтрФормы.УстановитьАтрибут(Форма,"кнПечать");
		АтрФормы.Формула = "Печать(0)";
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кнОК.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнДействия.Доступность(0);
		//Форма.кнСмс.Видимость(0);
		Форма.кнОснование.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кДобавитьКатегорию.Доступность(0);
		Форма.кУдалитьКатегорию.Доступность(0);
		Форма.кДобавитьСсылку.Доступность(0);
	Иначе
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	          
	глУстановкаРеквизитаТип(Контекст);
    ОбновитьНадписи();
	СтараяДата = ДатаДок;           

	УстДоступность();
	
	Если (Форма.ТолькоПросмотр() = 1) и (ПустаяСтрока(КомментОтвМенеджера) = 1) и (ЭтоОтветственныйМенеджер() = 1) Тогда
		//нужно разрешить заполнить коммет отв. менеджера
		стрДостРеквизиты = Врег("кнПечать,кнПоСкладам,КомментОтвМенеджера,кнОК,кнЗакрыть,тКомментОтвМенеджера");
		Форма.ТолькоПросмотр(0);
		расшФорм = СоздатьОбъект("РасширениеФормы");
		расшФорм.УстановитьФорму(Форма);
		Для сч = 1 По расшФорм.КоличествоАтрибутов() - 1 Цикл
			текАтр = расшФорм.ПолучитьАтрибут(сч);
			Если текАтр.тип = 1 Тогда //надписи
				Продолжить;
			КонецЕсли;
			Если Найти(стрДостРеквизиты,Врег(текАтр.идентификатор)) <> 0 Тогда
				текАтр.Доступность = 1;
			Иначе
				текАтр.Доступность = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		Если ТипЗначенияСтр(Форма.Параметр)="Строка" Тогда
			Если ВРег(Форма.Параметр)="БЫСТРАЯПЕЧАТЬ" Тогда
				Печать(1);
				СтатусВозврата(0); 
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	//-ralex, 23-08-22 00:45
	//Форма.ИспользоватьЗакладки(1);
	//Форма.Закладки.ДобавитьЗначение("Основной","Основное");
	//Форма.Закладки.ДобавитьЗначение("Дополнительно","Дополнительно");
	//Если НазваниеНабораПрав() = "Администратор" Тогда
	//	Форма.Закладки.ДобавитьЗначение("CRM","CRM");
	//КонецЕсли;
	//-/------------------------
	
	Форма.ИспользоватьЗакладки(1);
	Если этоКладовщикШК = 0 Тогда
		Форма.Закладки.ДобавитьЗначение("Основной","Основные");
		Форма.Закладки.ДобавитьЗначение("Дополнительно","Дополнительно");
		Форма.Закладки.ДобавитьЗначение("Склад","Склад");
		Если НазваниеНабораПрав() = "Администратор" Тогда
			Форма.Закладки.ДобавитьЗначение("CRM","CRM");
		КонецЕсли;
		Форма.ИспользоватьСлой("Общий,Основной",2);  
		ПриВыбореЗакладки(,"Основной");
	Иначе
		Форма.Закладки.ДобавитьЗначение("Склад","Склад");
		Форма.ИспользоватьСлой("Общий,Склад",2);  
		ПриВыбореЗакладки(,"Склад");
	КонецЕсли;
	
	спс = СоздатьОбъект("СписокЗначений");
	Если ПустаяСтрока(ссылкифото) = 0 Тогда
		спс.изСтрокиСРазделителями(ссылкифото);
		спс.Выгрузить(спсФайлов);
	КонецЕсли;
	Если НазваниеНабораПрав() <> "Администратор" Тогда
		форма.РекламацияЗавершена.Доступность(0);
		Форма.РазобратьсяСДокументом.Видимость(0);
	КонецЕсли;
	ОбновитьНадписи();
КонецПроцедуры //При открытии

//======================================================================
Функция ОткрытьПодборСкладскогоМеста()	
	выбМесто = "";
	спсМест = дополненияТорговля.получитьСписокСкладскихМест(Товар,Склад,Единица,КондиционныйТовар);
	Если спсМест.ВыбратьЗначение(выбМесто,,,15,1) <> 1 Тогда
		Возврат 0;
	КонецЕсли;
	складскоеМесто = выбМесто;
	Возврат 1;
КонецФункции // ОткрытьПодборПартииПоставщика

//*****************************************************************************
Процедура ПриНачалеВыбораЗначения(Рекв,Флаг)
	Флаг=0;
	Если (Рекв = "Фирма") или (Рекв = "РСчет") Тогда
		Флаг = 0;
		ВыборФирмы();                             
	ИначеЕсли Рекв="Товар" Тогда
		Флаг = 1;
		стТовар = Товар;
	ИначеЕсли Найти(рекв,"складскоеМесто") <> 0 Тогда
		ОткрытьПодборСкладскогоМеста();
	Иначе
		Флаг=1;
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
Процедура ОбработкаПодбора(Выб) //Предопределенная процедура
	глПриОбработкеПодбора(Выб,Контекст);
КонецПроцедуры //Обработка подбора

//*****************************************************************************
Процедура ПриЗаписи() //Предопределенная процедура
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
		
	ШтрКод = СформироватьШтрихКодДокумента(Контекст,ТекущийДокумент());

	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ЦенаПрибыль = 0; СуммаПрибыльВР = 0; //переменные не используются, но нужны для совместимости
		РассчитатьПрибыль(Контекст,1,ЦенаПрибыль,СуммаПрибыльВР);
	КонецЦикла;
	
	новый=0;
	ОтборАвтор=фирма;	
	Пользователь = Автор;
	ГруппаПользователей = Автор.Родитель;
	ссылкифото = спсФайлов.ВСтрокуСРазделителями();
	
	//+ralex, 13-12-21 00:02
	Если ПустаяСтрока(id_задачиВ_CRM) = 1 Тогда
		СтатусЗадачиВCRM = 0;
	ИначеЕсли ЗадачаВCRMВыполнена = 0 Тогда
		СтатусЗадачиВCRM = 1;
	ИначеЕсли ЗадачаВCRMВыполнена = 1 Тогда
		СтатусЗадачиВCRM = 2;
	КонецЕсли;
	//+/------------------------

КонецПроцедуры

// ===============================
Процедура ПриЗакрытии()
КонецПроцедуры	

Функция Раскраска()
	стр = "";
	Если (Товар.Акция.Получить(ДатаДок) = 1) и (Товар.Распродажа.Получить(ДатаДок) = 1) Тогда
		стр = "(BRUSH[" + цветАкция +"])()(BRUSH[" + цветРаспродажа + "])(BRUSH[NONE])";
	ИначеЕсли Товар.Акция.Получить(ДатаДок) = 1 Тогда
		стр = "(BRUSH[" + цветАкция + "])()(BRUSH[NONE])";
	ИначеЕсли Товар.Распродажа.Получить(ДатаДок) = 1 Тогда
		стр = "(BRUSH[" + цветРаспродажа + "])()(BRUSH[NONE])";
	КонецЕсли;
	Возврат стр;
КонецФункции

// ===============================
Функция РассчитатьМаржу()
	Если НазваниеНабораПрав() <> "Администратор" Тогда
		Возврат "";
	КонецЕсли;

	итогСуммаСНДС = Итог("СуммаСНДС");
	
	Если итогСуммаСНДС = 0 Тогда
		Возврат "";
	КонецЕсли;
	сс = Итог("СуммаСНДС") - итог("СуммаПрибыль");
	Возврат "наценка: " + Окр((итогСуммаСНДС - сс)/сс * 100,0) + "%";
КонецФункции

//======================================================================
Процедура ПоказатьНаКарте()
	Если Контрагент.Выбран() = 1 Тогда
		ЗапуститьПриложение("https://www.google.com.ua/maps/place/" + СокрЛП(Контрагент.ЮридическийАдрес));
	КонецЕсли;
КонецПроцедуры // ПоказатьНаКарте()

//======================================================================
Процедура подтвердитьСМС()
	ОткрытьФормуМодально("Отчет.АвторизацияКлиента",Контекст);
КонецПроцедуры // подтвердитьСМС

Форма.Товар.ВыполнятьФормулуТолькоПриИзменении(1);

//*****************************************************************************
//Инициализирум список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
|СтруктураПодчиненности,
|ДвиженияДокумента,
|ВводНаОсновании,
|ОткрытьВЖурнале,
|Подчиненные,
|ИзмКомментария");
	
спрКонтрПрава = СоздатьОбъект("КонтрагентыПрава");
флОтклКонтрольЦен = 1;
этоКладовщикШК = ?(НазваниеНабораПрав() = "КладовщикШК",1,0);
