//*****************************************************************************
// Описание переменных 
Перем СписокДействий;  // Список действий по документу
Перем СтараяДата;
Перем текПрибыль;
Перем тхтСтатус,текРаспечатан, текВыдан;

//Перем НачальнаяДатаДокумента; // Для контроля даты документа
//*****************************************************************************
// "служебные" функции и процедуры 

//зн = 1 - шк этого документа, зн = 0 - другой шк
Процедура ГенерироватьСобытиеШК(зн)
	Сообщить(ШтрКод);
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	спсВрем = СоздатьОбъект("СписокЗначений");
	спсВрем.ИзСтрокиСРазделителями(?(зн = 1,ШтрКод,"3020002170010")); 
	Для сч = 1 По спсВрем.РазмерСписка() Цикл
		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
	КонецЦикла;
КонецПроцедуры // ГенерироватьСобытие

//======================================================================
Процедура ПолучитьДанныеСоСканераШК()
	парам = "";
	Если ВвестиСтроку(парам,"Введите штрихкод",13,0,20) <> 1 Тогда
		Возврат;
	КонецЕсли;
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	Сервис.ВнешнееСобытие(Источник,"BarCodeValue",парам);
КонецПроцедуры // ПолучитьДанныеСоСканераШК()

//======================================================================
Функция показатьСтатусОтгружен()
	Возврат ?(отгружен = 0,1,5);
КонецФункции // показатьСтатусОтгружен()

//======================================================================
Процедура УстановитьНадписьСтатус()
	текРаспечатан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"распечатан"); //+ralex, 19-12-21 23:02
	текВыдан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"выдан"); //+ralex, 19-12-21 23:02

	тхтРаспечатан = "распечатан (" + текРаспечатан + ")";
	Если текРаспечатан = 0 Тогда
		тхтРаспечатан = "не распечатан";
	КонецЕсли;
	тхтВыдан = ?(текВыдан <> 0," выдан", " не выдан");
	тхтСтатус = тхтРаспечатан + "," + тхтВыдан;
	форма.Обновить(0);
КонецПроцедуры // УстановитьНадпись

//======================================================================
Процедура УстановитьСостояниеДокумента(статус,ЗнСч = 1)
	ЗнСтатуса = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,статус);
	дополненияТорговля.УстановитьСостояниеДокумента(Контекст,статус,ЗнСтатуса + ЗнСч);
	УстановитьНадписьСтатус();
КонецПроцедуры // УстановитьСостояниеДокумента

Процедура ПоказатьНаКарте(выбАдрес)
	Если ПустаяСтрока(выбАдрес) = 1 Тогда
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение("https://www.google.com.ua/maps/place/" + СокрЛП(выбАдрес));
КонецПроцедуры // ПоказатьНаКарте()

//======================================================================
Функция ПоказатьАдрес()
	ЮрАдрес = РасхНакл.Контрагент.ЮридическийАдрес;
	Возврат ?(ПустаяСтрока(ЮрАдрес) = 1,0,1);
КонецФункции // ПоказатьАдрес

//*****************************************************************************
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
	Заголовок = "Путевой лист";
	Название = "Путевой лист №";

	Заголовок = Заголовок + глЗаголовок(Контекст);
	
	Форма.Заголовок(Заголовок);     
	Возврат Название;
КонецФункции //ЗаголовокФормы

//======================================================================
Функция ПоказатьГород()
	Если РасхНакл.Выбран() = 1 Тогда
		Возврат РасхНакл.Контрагент.город;
	КонецЕсли;
	Возврат "";
КонецФункции // ПоказатьГород

Функция ПоказатьКонтрагента()
	Если РасхНакл.Выбран() = 1 Тогда
		Возврат РасхНакл.Контрагент;
	КонецЕсли;
	Возврат "";
КонецФункции // ПоказатьКонтрагента

Функция ПоказатьСклад()
	Если РасхНакл.Выбран() = 1 Тогда
		Возврат РасхНакл.Склад;
	КонецЕсли;
	Возврат "";
КонецФункции // ПоказатьСклад

Функция ПоказатьСумму()
	Если РасхНакл.Выбран() = 1 Тогда
		Возврат РасхНакл.Итог("СуммаСНДС");
	КонецЕсли;
	Возврат "";
КонецФункции // ПоказатьГород

//======================================================================
Функция ПоказатьСуммуИтого()
	суммаИтого = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		СуммаИтого = СуммаИтого + РасхНакл.Итог("СуммаСНДС");
	КонецЦикла;
	Возврат "Итого сумма: " + Формат(СуммаИтого,"Ч12.2") + " грн.";
КонецФункции // ПоказатьСуммуИтого

//======================================================================
Функция ПолучитьВесРН(РН)
	масса = 0;	
	РН.ВыбратьСтроки();
	Пока РН.ПолучитьСтроку() = 1 Цикл
		текМасса = РН.Товар.Вес * РН.Коэффициент * РН.Количество;
		масса = масса + текМасса;
		Если РН.Товар.Вес = 0 Тогда
			Сообщить("У товара " + РН.Товар.Код + " " + РН.Товар +" не указан вес. Его вес не учтен в общей массе груза.");
		КонецЕсли;
	КонецЦикла;
	Возврат Окр(масса,2);
КонецФункции // ПолучитьВесРН

//======================================================================
Функция показатьГрузоподъемность()
	Если объектЗатрат.Выбран() = 1 Тогда
		Возврат "грузоподъемность " + объектЗатрат.грузоподъемность * 1000 + " кг.";
	КонецЕсли;
	Возврат "";
КонецФункции // показатьГрузоподъемность()

//======================================================================
Функция ПоказатьВес()
	Если РасхНакл.Выбран() = 1 Тогда
		Возврат ПолучитьВесРН(РасхНакл);
	КонецЕсли;
	Возврат 0;
КонецФункции // ПоказатьВес

//======================================================================
Процедура РассчитатьПрибыль()
	ДляПутевогоЛиста = СоздатьОбъект("ДляПутевогоЛиста");
	текПрибыль = ДляПутевогоЛиста.ПолучитьПрибыльПоРнПутевогоЛиста(ТекущийДокумент());
КонецПроцедуры // РассчитатьПрибыль

//======================================================================
Функция УстДоступность()
	Форма.кнПечать.Доступность(проведен());
	Форма.кнЗаполнить.Доступность(?(проведен() = 1,0,1));
	Форма.Маршрут.Доступность(?(проведен() = 1,0,1));
	Если НазваниеНабораПрав() <> "Администратор" Тогда
		Форма.тхтПрибыль.Видимость(0);
		форма.кнПрибыль.Видимость(0);
	КонецЕсли;
	//сорт_УстДоступностьРеквизитов(Контекст);
КонецФункции // УстДоступность//******************************************************************************

Процедура ИзмДата()
	глПриИзмененииДатыДокумента(Контекст, СтараяДата);
КонецПроцедуры

//======================================================================
Процедура ИзмРасхНакл()
	вес = ПоказатьВес();
КонецПроцедуры // ИзмРасхНакл

//======================================================================
Процедура ПересчитатьВес()
	текРН = СоздатьОбъект("Документ." + РасхНакл.Вид());
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		текРН.НайтиДокумент(РасхНакл);
		вес = ПолучитьВесРН(текРН.текущийДокумент());
	КонецЦикла;
КонецПроцедуры // ПересчитатьВес

Процедура приНачалеВыбораЗначения(ид,фл)
	Если ид = "Маршрут" Тогда
		Если КоличествоСтрок() <> 0 Тогда
			Если Вопрос("Все строки документа будут удалены. Продолжить?",4) <> 6 Тогда
				СтатусВозврата(0);
				Возврат;
			Иначе
				УдалитьСтроки();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
конецПроцедуры

Процедура ПриНачалеРедактированияСтроки()
	текКолонка = Форма.ТекущаяКолонка();
	Если текКолонка = "Адрес" Тогда
		ПоказатьНаКарте(РасхНакл.Контрагент.ЮридическийАдрес);
		Возврат;
	КонецЕсли;
	
	Если Проведен() = 1 Тогда
		Зн = 0;
		спсМеню = СоздатьОбъект("СписокЗначений");
		спсМеню.ДобавитьЗначение(РасхНакл,"открыть документ");
		Если спсМеню.ВыбратьЗначение(Зн,,,,1) = 1 Тогда
			ОткрытьФормуМодально(Зн,,0); //редактирование
		КонецЕсли;
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПриУдаленииСтроки()
	Если Проведен() = 1 Тогда
		Предупреждение("Доступно редактирование только непроведенного документа.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	
	Если РаботаСоСканеромШтрихКода<>2 Тогда
		Возврат;
	КонецЕсли;
	
	Если Событие="BarCodeValue"	Тогда
		Если Scaner <> 0 Тогда
			Если Scaner.OldVersion<>0 Тогда
				//Работа драйвера совместима с предыдущей версиией
				// Источник="BarCodeScaner" (для других устройств свои названия)
				//Событие="BarCodeValue", Данные=ПолученныеДанные
				//Сообщить("Old Version <> 0");
				//Сообщить("Источник: "+Строка( Источник ));
				//Сообщить("Событие: "+Строка( Событие ));
				//Сообщить(Строка("Данные от устройства: "+ Данные));
			Иначе
				//Работа драйвера не совместима с предыдущей версиией
				// Источник="BarCodeScaner" (для других устройств свои названия)
				////Событие="BarCodeValue", Данные=НомерСобытия
				//Сообщить("Old Version = 0");
				Scaner.EventNumber=Число(Данные);
				//Сообщить("Данные от устройства: "+Scaner.ScanData);
				//Сообщить("Порт: "+Scaner.PortDescription);
				//Сообщить("Модель: "+Scaner.DeviceDescription);
				//Сообщить("Лог. устройство: " + Строка(Scaner.CurrentDeviceNumber) + " | " + Scaner.CurrentDeviceName);
				Scaner.DeleteEvent();
			КонецЕсли;
			Scaner.DataEventEnabled = 1;
			//Сообщить("Количество сообщений "+Строка(Scaner.DataCount));
			Данные = Scaner.Данные;
		ИначеЕсли СканерШтрихКода <> 0 Тогда
			СканерШтрихКода.ПосылкаДанных = 1;
		КонецЕсли;
		
		// Определение типа штрих-кода
		Если ШтрихКодИмеетПрефикс=1 Тогда
			Если Найти("MPJS",Лев(Данные,1))<>0 Тогда
				// Штрих-код определяет товар
				Данные=Сред(Данные,2,СтрДлина(Данные)-1);
			Иначе
				Сообщить("Формат считанного штрих-кода не предназначен для товаров");
			КонецЕсли;
		КонецЕсли;
		
		Лев2 = Лев(Данные,2);
		Если Лев2 = "22" Тогда
			Возврат; //это внутренний ШК товара
		Иначе
			текВидДок = "";
			поз = спсПрефиксыШК.НайтиЗначение(Лев2);
			Если поз = 0 Тогда
				Возврат; //это не документ
			КонецЕсли;
			спсПрефиксыШК.ПолучитьЗначение(поз,текВидДок);
			Если текВидДок = "РасходнаяНакладная" Тогда
				//сюда попали если ШК имеет префикс  расходной накладной
				Данные = Число(Данные);
				//ищем док по ШК
				ВыбратьСтроки();
				Пока ПолучитьСтроку() = 1 Цикл
					Если РасхНакл.ШтрКод = Данные Тогда
						Отгружен = 1;
					КонецЕсли;
				КонецЦикла;
				
				Если Итог("Отгружен") = КоличествоСтрок()  Тогда
					УстановитьСостояниеДокумента("отгружен");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//******************************************************************************
//*ralex, 2018-04-17 23:32:19
//Процедура Печать()
//	Фирма.ИспользоватьДату(ДатаДок);
//    
//	Таб=СоздатьОбъект("Таблица");
//	
//	ПечФорма = "Таблица";
//	Язык = глЯзык(ПечФорма); 	
//	Таб.ИсходнаяТаблица(ПечФорма);
//	глУстПропись(Гривня,Язык);
//	
//	Таб.ВывестиСекцию("Шапка");
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку() = 1 Цикл
//		ном = НомерСтроки;
//		тРН = РасхНакл.НомерДок;
//		тГород = РасхНакл.Контрагент.Город;
//		тКлиент = РасхНакл.Контрагент.полнНаименование;
//		Таб.ВывестиСекцию("Строка");
//	КонецЦикла;
//	
//	
//	Таб.ВывестиСекцию("Подвал");
//	Таб.Опции(0,0,0,0,ПарСтрДок);
//	Таб.Защита(Константа.ФлагЗащитыТаблиц);
//	Таб.ТолькоПросмотр(1);
//	Таб.Показать("Печать путевого листа","");
//КонецПроцедуры	// Печать
// -------- заменено на:
Процедура Печать()
	Фирма.ИспользоватьДату(ДатаДок);
	Если ШтрКод = 0 Тогда
		Предупреждение("Для документа не сгенерирован штрихкод. Необходимо записать документ.");
		Возврат;
	КонецЕсли;
	ПечШтрихКод=Строка(ШтрКод);
	
	Таб=СоздатьОбъект("Таблица");
	
	ПечФорма = "Таблица";
	Язык = глЯзык(ПечФорма); 	
	Таб.ИсходнаяТаблица(ПечФорма);
	глУстПропись(Гривня,Язык);
	
	Таб.ВывестиСекцию("Шапка");
	тз = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(тз);
	тз.НоваяКолонка("Клиент","Справочник.Контрагенты");
	тз.НоваяКолонка("Сумма","Число",12,2);
	тз.НоваяКолонка("Город","Справочник.Города");
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		тз.Клиент = тз.РасхНакл.Контрагент;
		тз.Сумма = тз.РасхНакл.Итог("СуммаСНДС");
		тз.Город = тз.Клиент.город;
	КонецЦикла;
	тз.Сортировать("Город,Клиент");
	
	стКлиент = ""; итогоСумма = 0; ИтогоВес = 0;
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		Если стКлиент <> тз.Клиент Тогда
			Если стКлиент <> "" Тогда
				тВес = Формат(ИтогоВес,"Ч012.2");
				тСумма = Формат(ИтогоСумма,"Ч012.2");
				Таб.ВывестиСекцию("ИтогоКлиент");
				итогоСумма = 0; ИтогоВес = 0;
			КонецЕсли;
			стКлиент = тз.Клиент;
		КонецЕсли;
		тКлиент = тз.Клиент;
		тРН = тз.РасхНакл;
		тСклад = Врег(Лев(СокрЛП(тз.РасхНакл.Склад),2));
		тГород = тз.Город;
		тВес = Формат(тз.Вес,"Ч012.2");
		тСумма = Формат(тз.Сумма,"Ч012.2");
		Таб.ВывестиСекцию("Клиент");
		итогоСумма = итогоСумма + тз.Сумма;
		ИтогоВес = ИтогоВес + тз.Вес;
	КонецЦикла;
	//итог по последнему клиенту
	тВес = Формат(ИтогоВес,"Ч012.2");
	тСумма = Формат(ИтогоСумма,"Ч012.2");
	Таб.ВывестиСекцию("ИтогоКлиент");
	
	
	//общий итог
	тСумма = Формат(тз.Итог("Сумма"),"Ч012.2");
	тВес = Формат(тз.Итог("Вес"),"Ч012.2");
	
	Таб.ВывестиСекцию("Итог");

	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать путевого листа","");
	УстановитьСостояниеДокумента("распечатан");
КонецПроцедуры	// Печать
//*/ralex, 2018-04-17 23:32:19
                                              
//*****************************************************************************
// Предопределенные процедуры
                         
//******************************************************************************
Процедура ВводНового(Скопирован)	// предопределенная процедура	
	Если Скопирован = 1 Тогда
		УдалитьСтроки();
	КонецЕсли;
	отборЗаДней = Константа.рнДнейНазад;
	глЗаполнитьШапку(Контекст);
КонецПроцедуры

//******************************************************************************
Процедура ПриОткрытии()	// предопределенная процедура
	//НачальнаяДатаДокумента = ДатаДок;
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	//Если Проведен() = 1 Тогда //нельзя редактировать проведенный документ т.к. при проведении и отмене проведения он вносит 
	//	//изменения в документы, указанные в табличной части
	//	Форма.ТолькоПросмотр(1);
	//КонецЕсли;
	
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кнОК.Доступность(0);
		Форма.кнПровести.Доступность(0);
	Иначе
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;

	СтараяДата = ДатаДок;
	Маршрут.ВидыДляВыбора("МаршрутыИЗоны,Города");
	УстановитьНадписьСтатус();

КонецПроцедуры	// ПриОткрытии

//*****************************************************************************
Процедура ПриЗаписи() //Предопределенная процедура
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, СтараяДата)=1 Тогда
		СтатусВозврата(0);
	Иначе
		ЗаголовокФормы();
	КонецЕсли;
	ГруппаПользователей = Автор.Родитель;
	ШтрКод = СформироватьШтрихКодДокумента(Контекст,ТекущийДокумент());

КонецПроцедуры
 
//======================================================================
Функция получитьСписокГородов()
	спс = СоздатьОбъект("СписокЗначений");
	Если Маршрут.Вид() = "Города" Тогда
		спс.ДобавитьЗначение(Маршрут);
	Иначе
		спрТочки = СоздатьОбъект("Справочник.точкиМаршрута");
		спрТочки.ИспользоватьВладельца(Маршрут);
		спрТочки.ВыбратьЭлементы();
		Пока спрТочки.ПолучитьЭлемент() = 1 Цикл
			Если ПустоеЗначение(спрТочки.Город) = 1 Тогда
				Продолжить;
			КонецЕсли;
			спс.ДобавитьЗначение(спрТочки.Город);
		КонецЦикла;
	КонецЕсли;
	//спс.ВыбратьЗначение(,);
	Возврат спс;
КонецФункции // получитьСписокГородов

//======================================================================
Процедура Заполнить()
	Если ПустоеЗначение(Маршрут) = 1 Тогда
		Предупреждение("Не выбран маршрут!");
		Возврат;
	КонецЕсли;
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Все строки документа будут удалены. Продолжить?",4) <> 6 Тогда
			Возврат;
		Иначе
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
	
	Дата2 = ДатаДок;
	Дата1 = ДатаДок - отборЗаДней;
	
	спсГорода = получитьСписокГородов();
	Если спсГорода.РазмерСписка() = 0 Тогда
		Предупреждение("В маршруте не указан ни один населенный пункт.");
		Возврат;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с Дата1 по Дата2;
	|РасходнаяНакладная = Документ.РасходнаяНакладная.ТекущийДокумент;
	|город = Документ.РасходнаяНакладная.Контрагент.город;
	|Товар = Документ.РасходнаяНакладная.Товар;
	|флВкл = Документ.РасходнаяНакладная.флВклПутевойЛист;
	|Вес = Документ.РасходнаяНакладная.Товар.Вес;
	|Единица = Документ.РасходнаяНакладная.Единица;
	|Коэффициент = Документ.РасходнаяНакладная.Единица.Коэффициент;
	|Количество = Документ.РасходнаяНакладная.Количество;
	|Группировка город без групп;
	|Группировка РасходнаяНакладная упорядочить по РасходнаяНакладная.ДатаДок;
	|Группировка Товар без групп;
	|Группировка Единица;
	|Условие(город в спсГорода);
	|Условие(флВкл = 0);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	тз = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз,1,0);
	//тз.выбратьСтроку();
	
	//вес в спр. полагаем в кг.
	тз.ВыбратьСтроки();
	тз.НоваяКолонка("масса","Число",14,3);
	Пока тз.ПолучитьСтроку() = 1 Цикл
		тз.масса = тз.вес * тз.Коэффициент * тз.Количество;
		Если тз.Вес = 0 Тогда
			Сообщить("У товара " + тз.Товар.Код + " " + тз.Товар +" не указан вес. Его вес не учтен в общей массе груза.");
		КонецЕсли;
	КонецЦикла;
	//тз.ВыбратьСтроку();
	тз.Свернуть("РасходнаяНакладная","масса");
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		новаяСтрока();
		РасхНакл = тз.РасходнаяНакладная;
		вес = тз.масса;
	КонецЦикла;
	//тз.выбратьСтроку();
КонецПроцедуры // Заполнить

Процедура ОбработкаЯчейкиТаблицы(Зн,Фл)
	Фл = 1;
	Если Зн.Вид() = "МестаХранения" Тогда
		Фл = 0; выб = 0;
		спсМеню = СоздатьОбъект("СписокЗначений");
		спсМеню.ДобавитьЗначение("" + Зн);
		спсМеню.ВыбратьЗначение(выб,,,15,1); //просто показать
	КонецЕсли;
КонецПроцедуры //ОбработкаВыбораЯчейки()


//*****************************************************************************
//Инициализирум список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|СтруктураПодчиненности,
	|ОткрытьВЖурнале");
	
текПрибыль = 0;
