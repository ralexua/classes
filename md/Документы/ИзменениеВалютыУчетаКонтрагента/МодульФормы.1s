Процедура ПриОткрытии()
	ПриЗаписиПерепроводить(1);
КонецПроцедуры

//======================================================================
Процедура измВыбКонтрагент()
	изВалюты = "";
	Если выбКонтрагент.Выбран() = 1 Тогда
		изВалюты = выбКонтрагент.ВалютаВзаиморасчетов;
	КонецЕсли;
КонецПроцедуры // измВыбКонтрагент

//======================================================================
Процедура измКурс()
	курс = поКурсу;
	Если глЕстьРеквизитШапки("ДатаКурса",КредДокумент.Вид()) = Да Тогда
		датаКурса = КредДокумент.Дата_Курса;
	Иначе
		датаКурса = КредДокумент.ДатаДок;
	КонецЕсли;
	новДолг = глПересчет(Долг,изВалюты,глКурсДляВалюты(изВалюты,датаКурса),вВалюту,курс);
КонецПроцедуры // измкурс

// ======================================
Процедура приЗаписи()
	//док = СоздатьОбъект("Документ.ИзменениеВалютыУчетаКонтрагента");
	//док.ОбратныйПорядок(1);
	//док.ВыбратьДокументы();
	//Если Док.ПолучитьДокумент() = 1 тогда
	//	Если док.ДатаДок > ДатаДок Тогда
	//		Сообщить("Существуют более поздние документы. перевести контрагента на другую валюту учета можно только 
	//		|датой не ранее " + КонМесяца(док.ДатаДок));
	//		СтатусВозврата(0);
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры 

//======================================================================
Процедура ИзмДата()
	
КонецПроцедуры // ИзмДата

//======================================================================
Процедура ПриНачалеВыбораЗначения(ид,фл)
	фл = 1;
	Если ид = "ДатаДок" Тогда
		Если КоличествоСтрок() <> 0 Тогда
			Если Вопрос("Все строки документа будут удалены. Продолжить?",4) <> 6 Тогда
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриНачалеВібораЗначения

Процедура Заполнить()
	//*ralex, 29-11-20 20:36
	//Если ДатаДок <> КонМесяца(ДобавитьМесяц(ТекущаяДата(),-1)) Тогда
	//	Предупреждение("Рекомендуется делать документ последним днем предыдущего месяца.");
	//	Возврат;
	//КонецЕсли;   
	// -------- заменено на:
	Если ДатаДок <> КонМесяца(ДатаДок) Тогда
		Предупреждение("Рекомендуется делать документ последним днем предыдущего месяца.");
		//Возврат;
	КонецЕсли;   
	док = СоздатьОбъект("Документ.ИзменениеВалютыУчетаКонтрагента");
	док.ОбратныйПорядок(1);
	док.ВыбратьДокументы();
	Если Док.ПолучитьДокумент() = 1 Тогда
		Если док.ДатаДок > ДатаДок Тогда
			Сообщить("Существуют более поздние документы. перевести контрагента на другую валюту учета можно только 
			|датой не ранее " + КонМесяца(док.ДатаДок));
		КонецЕсли;
	КонецЕсли;
	
	//*/ralex, 29-11-20 20:36
	Если ввалюту.Выбран() = 0 Тогда
		Предупреждение(" в начале выберите валюту.");
		Возврат;
	КонецЕсли;
	АвтоВремяКонецДня();
	Если Выбран() = 0 Тогда
		Если Вопрос("Документ не записан. Записать?",4) = 6 Тогда
			записать();
		иначе
			возврат;
		КонецЕсли;
	КонецЕсли;
	УдалитьСтроки();
	рег = СоздатьОбъект("Регистр.ВзаиморасчетыПоставщиков");
	
	Если (выбКонтрагент.Выбран() = 0) Тогда
		Сообщить("Не выбран контрагент!","!!!");
		Возврат;
	КонецЕсли;
	рег.УстановитьЗначениеФильтра("Контрагент",выбКонтрагент,1);
	
	Рег.ВременныйРасчет();
	РассчитатьРегистрыПо(ДатаДок);
	тз = СоздатьОбъект("ТаблицаЗначений");
	рег.выгрузитьИтоги(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		Фирма1 = тз.Фирма;
		Договор = тз.Договор;  
		СтавкаНДС = тз.СтавкаНДС; 
		КредДокумент = тз.КредДокумент;
		Долг = тз.Долг;
		постПок = Перечисление.поставщикПокупатель.Поставщик;
		Если какойКурс = 1 Тогда
			Если глЕстьРеквизитШапки("Валюта",КредДокумент.Вид()) = Да Тогда
				Если КредДокумент.валюта = вВалюту Тогда
					курс = КредДокумент.курс;
					датаКурса = КредДокумент.Дата_Курса;
					новДолг = глПересчет(Долг,изВалюты,глКурсДляВалюты(изВалюты,датаКурса),вВалюту,курс);
					поКурсу = курс;
				Иначе
					курс = глКурсДляВалюты(вВалюту,КредДокумент.ДатаДок);
					датаКурса = КредДокумент.Дата_Курса;
					новДолг = глПересчет(Долг,изВалюты,глКурсДляВалюты(изВалюты,датаКурса),вВалюту,курс);
					поКурсу = курс;
				КонецЕсли;
			КонецЕсли;
		Иначе //по указанному курсу
			новДолг = глПересчет(Долг,изВалюты,глКурсДляВалюты(изВалюты,датаДок),вВалюту,выбКурс);
			поКурсу = выбКурс;
		КонецЕсли;
	КонецЦикла;
	
	//а теперь как покупатель

	рег = СоздатьОбъект("Регистр.ВзаиморасчетыПокупателей");
	рег.УстановитьЗначениеФильтра("Контрагент",выбКонтрагент,1);
	Рег.ВременныйРасчет();
	РассчитатьРегистрыПо(ДатаДок);

	тз = СоздатьОбъект("ТаблицаЗначений");
	рег.выгрузитьИтоги(тз);
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		Фирма1 = тз.Фирма;
		Договор = тз.Договор;  
		СтавкаНДС = тз.СтавкаНДС; 
		КредДокумент = тз.КредДокумент;
		Долг = тз.Долг;
		постПок = Перечисление.поставщикПокупатель.Покупатель;
		
		Если какойКурс = 1 Тогда
			Если глЕстьРеквизитШапки("Валюта",КредДокумент.Вид()) = Да Тогда
				Если КредДокумент.валюта = вВалюту Тогда
					Если глЕстьРеквизитШапки("Курс",КредДокумент.Вид()) = Да Тогда
						курс = КредДокумент.курс;
						датаКурса = КредДокумент.Дата_Курса;
					Иначе
						датаКурса = КредДокумент.ДатаДок;
						курс = глКурсДляВалюты(КредДокумент.валюта,датаКурса);
					КонецЕсли;
					новДолг = глПересчет(Долг,изВалюты,глКурсДляВалюты(изВалюты,датаКурса),вВалюту,курс);
					поКурсу = курс;
				Иначе
					курс = глКурсДляВалюты(вВалюту,КредДокумент.ДатаДок);
					Если глЕстьРеквизитШапки("Дата_Курса",КредДокумент.Вид()) = Да Тогда
						датаКурса = КредДокумент.Дата_Курса;
					Иначе
						датаКурса = КредДокумент.ДатаДок;
					КонецЕсли;	
					новДолг = глПересчет(Долг,изВалюты,глКурсДляВалюты(изВалюты,датаКурса),вВалюту,курс);
					поКурсу = курс;
				КонецЕсли;
			КонецЕсли;
		Иначе
			новДолг = глПересчет(Долг,изВалюты,глКурсДляВалюты(изВалюты,датаДок),вВалюту,выбКурс);
			поКурсу = выбКурс;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

//======================================================================
Процедура СоздатьНовогоКонтрагента()
	Если вВалюту.Выбран() = 0 Тогда
		Предупреждение("В начале выберите валюту.");
		Возврат;
	КонецЕсли;
	спрКонтр = СоздатьОбъект("Справочник.Контрагенты");
	Если новКонтрагент.Выбран() = 1 Тогда
		спрКонтр.НайтиЭлемент(новКонтрагент);
	Иначе
		спрКонтр.Новый();
		спрКонтр.Записать();
	КонецЕсли;
	
	пер = СоздатьОбъект("Периодический");
	пер1 = СоздатьОбъект("Периодический");
	метаспр = метаданные.Справочник("Контрагенты");
	
	квоРекв = метаспр.Реквизит();
	Для сч = 1 по квоРекв Цикл
		ид = метаспр.Реквизит(сч).Идентификатор;
		дляГруппы = метаспр.Реквизит(сч).Использование;
		Если дляГруппы = "ДляГруппы" Тогда
			Продолжить;
		КонецЕсли;
		флПер = метаспр.Реквизит(сч).периодический;
		Если флПер = 1 Тогда
			пер.ИспользоватьОбъект(ид,выбКонтрагент);
			пер1.ИспользоватьОбъект(ид,спрконтр.ТекущийЭлемент());
			пер.ВыбратьЗначения();
			Пока пер.ПолучитьЗначение() = 1 Цикл
				пер1.Значение = пер.Значение;
				пер1.ДатаЗнач = пер.ДатаЗнач;
				пер1.Записать();
			КонецЦикла;
		Иначе
			спрКонтр.УстановитьАтрибут(ид,выбКонтрагент.ПолучитьАтрибут(ид));
		КонецЕсли;
	КонецЦикла;
	спрКонтр.Наименование = выбКонтрагент.ПолнНаименование + " ("+вВалюту.Кратко + ")";
	спрКонтр.Родитель = выбКонтрагент.Родитель;
	спрКонтр.ВалютаВзаиморасчетов = вВалюту;
	спрКонтр.Записать();
	новКонтрагент = спрКонтр.ТекущийЭлемент();
	
	спр = СоздатьОбъект("Справочник.Контрагенты");
	спр.НайтиЭлемент(выбКонтрагент);
	Если Найти(спр.Наименование,спр.ВалютаВзаиморасчетов.Кратко) = 0 Тогда
		спр.Наименование = "не исп. " + спр.Наименование + " (" + спр.ВалютаВзаиморасчетов.Кратко + ")";
		спр.Записать();
	КонецЕсли;
	форма.Обновить();
	
	Для счСпр = 1 По Метаданные.Справочник() Цикл
		Если Метаданные.Справочник(счСпр).Владелец = "Контрагенты" Тогда
			
			метаспр = метаданные.Справочник(счСпр);
			спр = СоздатьОбъект(Метаданные.справочник(счСпр).полныйИдентификатор);
			спрН = СоздатьОбъект(Метаданные.справочник(счСпр).полныйИдентификатор);
			
			спр.использоватьВладельца(выбКонтрагент);
			спр.ВыбратьЭлементы();
			Пока спр.получитьЭлемент() = 1 Цикл
				спрН.новый();
				спрН.Записать();
				
				пер = СоздатьОбъект("Периодический");
				пер1 = СоздатьОбъект("Периодический");
				
				квоРекв = метаспр.Реквизит();
				Для сч = 1 по квоРекв Цикл
					ид = метаспр.Реквизит(сч).Идентификатор;
					флПер = метаспр.Реквизит(сч).периодический;
					Если флПер = 1 Тогда
						пер.ИспользоватьОбъект(ид,спр.ТекущийЭлемент());
						пер1.ИспользоватьОбъект(спрН.ТекущийЭлемент());
						пер.ВыбратьЗначения();
						Пока пер.ПолучитьЗначение() = 1 Цикл
							пер1.Значение = пер.Значение;
							пер1.ДатаЗнач = пер.ДатаЗнач;
							пер1.Записать();
						КонецЦикла;
					Иначе
						спрН.УстановитьАтрибут(ид,спр.ПолучитьАтрибут(ид));
					КонецЕсли;
					
				КонецЦикла;
				спрН.Наименование = спр.Наименование;
				спрН.Родитель = спр.Родитель;
				спрН.Владелец = новКонтрагент;
				спрн.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СоздатьНовогоКонтрагента()

//Функция Перезачесть()
//	стрОбр = 0; СуммаЗакр = 0; СуммаЗакрОсн = 0;
//	СуммаЗачетаОсн = 0; СуммаЗачета = 0;
//	текСтрока = 0;
//	тз = СоздатьОбъект("ТаблицаЗначений");
//	ВыгрузитьТабличнуюЧасть(тз);
//	тз.НоваяКолонка("СуммаКорОсн","Число",12,3);
//	тз.НоваяКолонка("СуммаКор","Число",12,3);
//	
//	тз.ВыбратьСтроки();
//	Пока тз.ПолучитьСтроку() = 1 Цикл
//		Если тз.ДолгОсн < 0 Тогда
//			стрОбр = тз.НомерСтроки;
//			СуммаЗакрОсн = тз.ДолгОсн;
//			СуммаЗакр	= тз.Долг;
//			тз.ВыбратьСтроки();
//			Пока тз.ПолучитьСтроку() = 1 Цикл
//				Если тз.ДолгОсн > 0 Тогда
//					Если СуммаЗакрОсн < 0 Тогда
//						Если тз.ДолгОсн + СуммаЗакрОсн >=0 Тогда
//							СуммаЗачетаОсн	= СуммаЗакрОсн; //суммы с "-"
//							СуммаЗачета		= СуммаЗакр;
//						Иначе
//							СуммаЗачетаОсн	= -1 * тз.ДолгОсн;
//							СуммаЗачета		= -1 * тз.Долг;
//						КонецЕсли;
//						тз.ДолгОсн = тз.ДолгОсн + СуммаЗачетаОсн;
//						тз.Долг = тз.Долг + СуммаЗачета;	
//						СуммаЗакрОсн = СуммаЗакрОсн - СуммаЗачетаОсн;
//						СуммаЗакр = СуммаЗакр - СуммаЗачета;
//						тз.СуммаКорОсн = тз.СуммаКорОсн + СуммаЗачетаОсн;
//						тз.СуммаКор = тз.СуммаКор + СуммаЗачета;
//						
//						текСтрока = тз.НомерСтроки;
//						тз.ПолучитьСтрокуПоНомеру(стрОбр); //переход на строку долг по которой закрываем
//						тз.ДолгОсн = тз.ДолгОсн - СуммаЗачетаОсн;
//						тз.Долг 	= тз.Долг - СуммаЗачета;	
//						тз.СуммаКорОсн = тз.СуммаКорОсн - СуммаЗачетаОсн;
//						тз.СуммаКор = тз.СуммаКор - СуммаЗачета;
//						
//						Если СуммаЗакрОсн = 0 Тогда
//							Прервать;
//						Иначе
//							тз.ПолучитьСтрокуПоНомеру(текСтрока); //возврат на строку, суммой которой закрывали долг
//						КонецЕсли;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЦикла;
//				тз.ПолучитьСтрокуПоНомеру(стрОбр); //переход на строку долг по которой закрываем если не нашли ни одной строки с "+" остатком
//		КонецЕсли;
//		
//	КонецЦикла;
//	//тз.ВыбратьСтроку();
//	тз.ВыбратьСтроки();
//	Пока тз.ПолучитьСтроку() = 1 Цикл
//		ПолучитьСтрокуПоНомеру(тз.НомерСтроки);
//		ДолгОсн = тз.СуммаКорОсн;
//		Долг 	= тз.СуммаКор;
//	КонецЦикла;
//	
//	Возврат 1;
//КонецФункции // Перезачесть(
