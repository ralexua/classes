Перем СтараяДата;
//Перем ФирмаПоставщику, ПокупательФирме;
Перем КонтрагентПоставщик, КонтрагентПокупатель;
Перем НачальнаяДатаДокумента; // Для контроля даты документа

Перем ОстаткиДебетовыхДокументов, ОстаткиКредитовыхДокументов;
Перем ДобавлениеНовой;
Перем СписокДействий; 

//*****************************************************************************
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
	Заголовок = "Акт взаимозачетов";
	Название ="Акт взаимозачетов №";
	
	Заголовок = Заголовок + глЗаголовок(Контекст);
	
	Форма.Заголовок(Заголовок);     
	Возврат Название;
КонецФункции //ЗаголовокФормы     

//******************************************************************************
Процедура ИзмТип()
	Перем ВремТип;
	
	ТипУчета = Тип.ТекущаяСтрока()-1;
	ВремФинУчет = ?(ТипУчета>Упр,1,0);
	
	Если (ФинУчет <> ВремФинУчет) Тогда
		// изменился учет
		Если КоличествоСтрок()>0 Тогда
			// в документе заполнена табличная часть
			// при смене типа учета данные скорее всего будет другими
			Если Вопрос("При смене типа учета будет очищена спецификация. Продолжить?","Да+Нет")="Нет" Тогда
			    // по другому типа учета могут быть совсем другие данные
				Поз = Тип.НайтиЗначение(ТипУчета);
				Если Поз>0 Тогда
					// отменим изменения типа учета
				    Тип.ТекущаяСтрока(Поз);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// очистить многострочную часть
		УдалитьСтроки();
		Если Вопрос("Изменить номер документа?","Да+Нет")="Да" Тогда
			глУстановитьНомерДок(Контекст);
		КонецЕсли;
		
		ФинУчет = ВремФинУчет;
	КонецЕсли;
КонецПроцедуры       

//******************************************************************************
Функция ПоказатьСуммыЗадолженностей()
	Возврат "Долг поставщику: " + глФРМТ(Итог("ДолгПоставщику"),Гривня,1) + 
	        " Долг покупателя: " + глФРМТ(Итог("ДолгПокупателя"),Гривня,1);
КонецФункции // ПоказатьСуммыЗадолженностей
		
//******************************************************************************
Функция ПоказатьСуммуВзаимозачета()
	Перем Наш, Их;
	Наш = Итог("ДолгПоставщику");
	Их =  Итог("ДолгПокупателя");
	
	Если Наш = Их Тогда
		// сальдо документа = 0
		Возврат "Взаимозачет: " + глФРМТ(Наш,Гривня,1);
	ИначеЕсли Наш > Их Тогда
		// долг фирмы больше, чем долг Контрагентов
		Возврат "Итого долг поставщику " + глФРМТ(Наш - Их,Гривня,1);
	Иначе
		// долг Контрагентов больше
		Возврат "Итого долг покупателя " + глФРМТ(Их - Наш,Гривня,1);
	КонецЕсли;
КонецФункции // ПоказатьСуммуВзаимозачета

//******************************************************************************
Процедура Печать()
	Предупреждение("Не реализована");
КонецПроцедуры // Печать

//******************************************************************************
Процедура ИзмДата()
	глПриИзмененииДатыДокумента(Контекст, СтараяДата);
КонецПроцедуры

//******************************************************************************
Процедура ВыборФирмы()
	// по кнопке редактирования параметров фирмы в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОфирме", КонтекстДокумента);
	
КонецПроцедуры

//******************************************************************************
Функция ПроверкаДокумента(ВыбЗнач)
	Перем ВидДок, Флаг;
	                  
	Флаг = 0;
	ВидДок = ВыбЗнач.Вид();
	// для некоторых документов есть условия
	Если ВидКонтрагента = КонтрагентПоставщик Тогда
		Если ВидДок="ПриходнаяНакладная" Тогда
			Если ВыбЗнач.ВидОперации = 1 Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="ПриходнаяРеализатора" Тогда
			Если ВыбЗнач.ВидОперации = 1 Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="ВводОстатковКредита" Тогда	
			Если ВыбЗнач.ВидКонтрагента = КонтрагентПокупатель Тогда
				Флаг = 4;
			КонецЕсли;
		Иначе
			Если ВидДок="РасходнаяНакладная" Тогда
				Если ВыбЗнач.ВидОперации = 1 Тогда
					Флаг = 1;
				КонецЕсли;
			ИначеЕсли ВидДок="ПродажаРеализатора" Тогда
				Если ВыбЗнач.ВидОперации = 1 Тогда
					Флаг = 1;
				КонецЕсли;
			ИначеЕсли глЕстьРеквизитШапки("Контрагент",ВидДок) = Да Тогда
				Если ВыбЗнач.Контрагент <> Поставщик Тогда
					Флаг = 2;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидКонтрагента= КонтрагентПокупатель Тогда
		Если ВидДок="РасходнаяНакладная" Тогда
			Если ВыбЗнач.ВидОперации = 1 Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="РасходнаяРеализатора" Тогда
			Если ВыбЗнач.ВидОперации = 1 Тогда
				Флаг = 1;
			КонецЕсли;
		ИначеЕсли ВидДок="ВводОстатковКредита" Тогда	
			Если ВыбЗнач.ВидКонтрагента = КонтрагентПоставщик Тогда
				Флаг = 4;
			КонецЕсли;
		КонецЕсли;
		Если глЕстьРеквизитШапки("Контрагент",ВидДок) = Да Тогда
			Если ВыбЗнач.Контрагент <> Покупатель Тогда
				Флаг = 3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Флаг;
КонецФункции
	
//******************************************************************************
Процедура ПриВыбореПоставщика()
	Если ПустоеЗначение(Покупатель) = 1 Тогда
		Покупатель = Поставщик;
	КонецЕсли;
	Если ПустоеЗначение(Поставщик) = 1 Тогда
		Поставщик = Покупатель;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ВидКонтрагента = КонтрагентПоставщик Тогда
			Если ПустоеЗначение(ДокументКредита) = 0 Тогда
				Если ДокументКредита.Контрагент <> Поставщик Тогда
					ДокументКредита = ПолучитьПустоеЗначение("Документ." + ДокументКредита.Вид());
					ДолгПоставщику = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

//******************************************************************************
Процедура ПриВыбореПокупателя()
	Если ПустоеЗначение(Поставщик) = 1 Тогда
		Поставщик = Покупатель ;
	КонецЕсли;
	Если ПустоеЗначение(Покупатель) = 1 Тогда
		Покупатель = Поставщик;
	КонецЕсли;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ВидКонтрагента = КонтрагентПокупатель Тогда
			Если ПустоеЗначение(ДокументКредита) = 0 Тогда
				Если ДокументКредита.Контрагент <> Покупатель Тогда
					ДокументКредита = ПолучитьПустоеЗначение("Документ." + ДокументКредита.Вид());
					ДолгПокупателя = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 


//******************************************************************************
Процедура ОчиститьТабличнуюЧасть() Экспорт
	Если КоличествоСтрок() > 0 Тогда
		Если Вопрос("Таблица будет очищена, а существующие строки удалены.", "ОК+Отмена") = "ОК" Тогда
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

//********************************************************************************
Процедура РассчитатьДолги(РегистрУчета, Фильтр)
	Перем Результат;
	
	Если РегистрУчета="ВзаиморасчетыПоставщиков" Тогда
		ОстаткиДебетовыхДокументов.УдалитьСтроки();
	ИначеЕсли РегистрУчета="ВзаиморасчетыПокупателей" Тогда
		ОстаткиКредитовыхДокументов.УдалитьСтроки();
	Иначе
		// неправильно задан регистр
		Возврат;
	КонецЕсли;
	
	// создаем структуру результирующей таблицы
	Результат=СоздатьОбъект("ТаблицаЗначений");
	Результат.НоваяКолонка("КредДокумент","Документ");
	Результат.НоваяКолонка("Долг","Число",15,5);
	
	Если ФинУчет=1 Тогда
	    ИспФирма=Фирма;
		ВалютаПоставщика=Гривня;
		ВалютаПокупателя=Гривня;
	Иначе
		ИспФирма=глПустаяФирма;
		ВалютаПоставщика=Поставщик.ВалютаВзаиморасчетов;
		ВалютаПокупателя=Покупатель.ВалютаВзаиморасчетов;
	КонецЕсли;

	Рег=СоздатьОбъект("Регистр."+РегистрУчета);
	Рег.УстановитьЗначениеФильтра("Фирма",ИспФирма,1);
	
	Если ТипЗначенияСтр(Фильтр)="СписокЗначений" Тогда
		// установим фильтр на документы
		Рег.УстановитьЗначениеФильтра("КредДокумент",Фильтр,2);
	Иначе
		// фильтр на Контрагента
		Рег.УстановитьЗначениеФильтра("Контрагент",Фильтр,1);
	Конецесли;
	
	РезСравнения=СравнитьТА();
	Если РезСравнения=-2 Тогда
		// новый
		Если ДатаДок<ПолучитьДатуТА() Тогда
			// расчитываем остатки на конец дня
			Рег.ВременныйРасчет();
			РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	ИначеЕсли (РезСравнения=-1) ИЛИ (РезСравнения=0) Тогда
		// если документ проведен или сохранен,
		// нужно расчитать итоги регистра без учета
		// изменений. сделанных документом
		Рег.ВременныйРасчет();
		РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	ИтогиРегистра=СоздатьОбъект("ТаблицаЗначений");
	Рег.ВыгрузитьИтоги(ИтогиРегистра);
	ИтогиРегистра.Свернуть("КредДокумент","Долг");
	ИтогиРегистра.ВыбратьСтроки();
	Пока ИтогиРегистра.ПолучитьСтроку()=1 Цикл
	    Если ПустоеЗначение(ИтогиРегистра.КредДокумент)=1 Тогда
	        Продолжить;
		КонецЕсли;
		
		Если РегистрУчета="ВзаиморасчетыПоставщиков" Тогда
			// наши долги со знаком минус
			//-ralex, 12-03-21 21:27
			//Если ИтогиРегистра.Долг>0 Тогда
			//	Продолжить;
			//КонецЕсли;
			//-/ralex, 12-03-21 21:27
	    	//  Если Найти("ПриходнаяНакладная,ПриходнаяРеализатора,
			//  	|ВводОстатковКредита,РасходнаяНакладная,ПродажаРеализатора",ИтогиРегистра.КредДокумент.Вид()) = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			ВремДолг=-ИтогиРегистра.Долг;                  
			ОстаткиДебетовыхДокументов.НоваяСтрока();
			ОстаткиДебетовыхДокументов.КредДокумент=ИтогиРегистра.КредДокумент;
			ОстаткиДебетовыхДокументов.Долг=глПересчет(ВремДолг,ВалютаПоставщика,ДатаДок,Гривня,ДатаДок);
		ИначеЕсли РегистрУчета="ВзаиморасчетыПокупателей" Тогда
			// долги Контрагентов со знаком плюс
			//-ralex, 12-03-21 21:27
			//Если ИтогиРегистра.Долг<0 Тогда
			//	Продолжить;
			//КонецЕсли;
			//-/ralex, 12-03-21 21:27
	    	//  Если Найти("РасходнаяНакладная, РасходнаяРеализатора, ВводОстатковКредита",ИтогиРегистра.КредДокумент.Вид()) = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			ВремДолг=ИтогиРегистра.Долг;
			ОстаткиКредитовыхДокументов.НоваяСтрока();
			ОстаткиКредитовыхДокументов.КредДокумент=ИтогиРегистра.КредДокумент;
			ОстаткиКредитовыхДокументов.Долг=глПересчет(ВремДолг,ВалютаПокупателя,ДатаДок,Гривня,ДатаДок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//********************************************************************************
Функция ПолучитьДолг(Док,Вид)
	Перем Результат, Поз;
	Результат=0;
	Если Проведен()=0 Тогда
		Если Вид=КонтрагентПоставщик Тогда
			Если ОстаткиДебетовыхДокументов.НайтиЗначение(ДокументКредита,Поз,"КредДокумент")=1 Тогда
				Результат=ОстаткиДебетовыхДокументов.ПолучитьЗначение(Поз,"Долг");
			КонецЕсли;
		ИначеЕсли Вид=КонтрагентПокупатель Тогда
			Если ОстаткиКредитовыхДокументов.НайтиЗначение(ДокументКредита,Поз,"КредДокумент")=1 Тогда
				Результат=ОстаткиКредитовыхДокументов.ПолучитьЗначение(Поз,"Долг");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Формат(Результат,"Ч012.2");
КонецФункции

//******************************************************************************
Процедура Заполнить(ЗаполнитьСуммыСуществующихСтрок = 0)
	Перем ТаблицаСостава;
	
	//Параметры
	// ЗаполнитьСуммыСуществующихСтрок - 0 перезаполняем всю табличную часть, 1 - пересчитываем текущую строку

    Если Проведен()=1 Тогда
        Предупреждение("Автоматическое изменение спецификации выполняется только для непроведенного документа!");
		Возврат;
    КонецЕсли;
	
	Если ПустоеЗначение(Поставщик)=1 Тогда
	    // не выбран поставщик
		Предупреждение("Не выбран поставщик!");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Покупатель)=1 Тогда
	    // не выбран покупатель
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;
	
	Если ЗаполнитьСуммыСуществующихСтрок = 0 Тогда
		ОчиститьТабличнуюЧасть();
		Если КоличествоСтрок() <> 0 Тогда
			Возврат;
		КонецЕсли;
		
		// заполним долги поставщику
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		ОстаткиДебетовыхДокументов.ВыбратьСтроки();
		Пока ОстаткиДебетовыхДокументов.ПолучитьСтроку()=1 Цикл
		    Если ПустоеЗначение(ОстаткиДебетовыхДокументов.КредДокумент)=1 Тогда
		        Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			ДокументКредита=ОстаткиДебетовыхДокументов.КредДокумент;
			ВидКонтрагента=КонтрагентПоставщик;
			ДолгПоставщику=ОстаткиДебетовыхДокументов.Долг;
		КонецЦикла;
		
		 // заполним долги покупателя
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
		ОстаткиКредитовыхДокументов.ВыбратьСтроки();
		Пока ОстаткиКредитовыхДокументов.ПолучитьСтроку()=1 Цикл
		    Если ПустоеЗначение(ОстаткиКредитовыхДокументов.КредДокумент)=1 Тогда
		        Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			ДокументКредита=ОстаткиКредитовыхДокументов.КредДокумент;
			ВидКонтрагента=КонтрагентПокупатель;
			ДолгПокупателя=ОстаткиКредитовыхДокументов.Долг;
		КонецЦикла;
			
	Иначе // Рассчитать
		
		Если КоличествоСтрок()=0 Тогда
			Предупреждение("Отсутствует спецификация!");
		Иначе
			Если Вопрос("Пересчитать значения долгов по документам в строках спецификации?", "ОК+Отмена") = "Отмена" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
		    // найдем документ
			Поз=0;
			Если ВидКонтрагента=КонтрагентПоставщик Тогда
				Если ОстаткиДебетовыхДокументов.НайтиЗначение(ДокументКредита,Поз,"КредДокумент")=1 Тогда
					ДолгПоставщику=ОстаткиДебетовыхДокументов.ПолучитьЗначение(Поз,"Долг");
				КонецЕсли;
			ИначеЕсли ВидКонтрагента=КонтрагентПокупатель Тогда
				Если ОстаткиКредитовыхДокументов.НайтиЗначение(ДокументКредита,Поз,"КредДокумент")=1 Тогда
					ДолгПокупателя=ОстаткиКредитовыхДокументов.ПолучитьЗначение(Поз,"Долг");
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры // Заполнить

//******************************************************************************
Процедура УстановитьВидыДляВыбора()
	Если ВидКонтрагента = КонтрагентПоставщик Тогда
	    ДокументКредита.ВидыДляВыбора("ПриходнаяНакладная, ПриходнаяРеализатора, ВводОстатковКредита, РасходнаяНакладная, ПродажаРеализатора");
							   
		// Меняем доступность полей
		Форма.ДолгПоставщику.Доступность(1);
		Форма.ДолгПокупателя.Доступность(0);
		// Очищаем поля
		ДолгПокупателя = 0;
		
	ИначеЕсли ВидКонтрагента = КонтрагентПокупатель Тогда
	    ДокументКредита.ВидыДляВыбора("РасходнаяНакладная, РасходнаяРеализатора, ВводОстатковКредита");
							   
		// Меняем доступность полей
		Форма.ДолгПоставщику.Доступность(0);
		Форма.ДолгПокупателя.Доступность(1);
		// Очищаем поля
		ДолгПоставщику = 0;
		
	Иначе
		ДокументКредита.ВидыДляВыбора("");
		// запретить редактировать суммы
		// Меняем доступность полей
		Форма.ДолгПоставщику.Доступность(0);
		Форма.ДолгПокупателя.Доступность(0);
		// Очищаем поля
		ДолгПоставщику = 0;
		ДолгПокупателя = 0;
	КонецЕсли;
	// Проверим значение поля документ
	Если ПустоеЗначение(ДокументКредита) = 0 Тогда
	    Если ПроверкаДокумента(ДокументКредита) > 0 Тогда
			ДокументКредита = 0;       
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//******************************************************************************
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//******************************************************************************
Процедура ВводНаОсновании()
	Предупреждение("Документ "+ПредставлениеВида()+" не вводят на основании других документов!");
	СтатусВозврата(0);
КонецПроцедуры

//******************************************************************************
Процедура ВводНового(ВведенКопированием) // Предопределенная процедура
	Перем ДефТип;
                 
	Валюта = Гривня;
	
	глЗаполнитьШапку(Контекст);
	Если ВведенКопированием = 1 Тогда
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВводНового

//******************************************************************************
Процедура ПриОткрытии() // Предопределенная процедура
	

	НачальнаяДатаДокумента = ДатаДок;

	глПроверкаРазрешенияРедактирования(Контекст);
	глУстановкаРеквизитаТип(Контекст);
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнОК.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнДействия.Доступность(0);
		
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнРассчитать.Доступность(0);
	КонецЕсли;
	СтараяДата = ДатаДок;
	
	ПриЗаписиПерепроводить(1);
	
	ИзмТип();
	
	ДобавлениеНовой=Нет;
	Если Проведен()=1 Тогда
		Форма.ПоДокументу.Видимость(0);
	ИначеЕсли Выбран()=1 Тогда
	    // нужно посчитать итоги по документам
		РассчитатьДолги("ВзаиморасчетыПоставщиков", Поставщик);
		РассчитатьДолги("ВзаиморасчетыПокупателей", Покупатель);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии

//******************************************************************************
Процедура ПриРедактированииНовойСтроки()
	УстановитьВидыДляВыбора();
	ДобавлениеНовой=Да;
КонецПроцедуры                            

//******************************************************************************
Процедура ПриНачалеРедактированияСтроки()
	УстановитьВидыДляВыбора();
КонецПроцедуры

//********************************************************************************
Процедура ПриОкончанииРедактированияСтроки()
	Перем Поз;
	Если Проведен()=0 Тогда
		Если ДобавлениеНовой=Да Тогда
		    ДобавлениеНовой=Нет;
			Поз=0;
			Если ВидКонтрагента=Перечисление.ВидыКлиентов.Поставщик Тогда
				ОстаткиДебетовыхДокументов.НайтиЗначение(ДокументКредита,Поз,"КредДокумент");
				Если Поз=0 Тогда
				    ОстаткиДебетовыхДокументов.НоваяСтрока();
					ОстаткиДебетовыхДокументов.КредДокумент=ДокументКредита;
					ОстаткиДебетовыхДокументов.Долг=ДолгПоставщику;
				Иначе
					Если ДолгПоставщику=0 Тогда
					    ДолгПоставщику=ОстаткиДебетовыхДокументов.ПолучитьЗначение(Поз,"Долг");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидКонтрагента=Перечисление.ВидыКлиентов.Покупатель Тогда
				ОстаткиКредитовыхДокументов.НайтиЗначение(ДокументКредита,Поз,"КредДокумент");
				Если Поз=0 Тогда
				    ОстаткиКредитовыхДокументов.НоваяСтрока();
					ОстаткиКредитовыхДокументов.КредДокумент=ДокументКредита;
					ОстаткиКредитовыхДокументов.Долг=ДолгПокупателя;
				Иначе
					Если ДолгПокупателя=0 Тогда
						ДолгПокупателя=ОстаткиКредитовыхДокументов.ПолучитьЗначение(Поз,"Долг");
					КонецЕсли;
				КонецЕсли;
		    КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Если (ИдентЭлемДиалога = "ДокументКредита") и (ПустоеЗначение(ВидКонтрагента) = 1)Тогда
	    ВидКонтрагента = КонтрагентПоставщик;
		УстановитьВидыДляВыбора();
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
	Перем Флаг;
	Если ИдентЭлемДиалога="ДокументКредита" Тогда
		Флаг = 0; // документ можно выбрать
		Флаг = ПроверкаДокумента(ВыбЗнач);
		Если Флаг = 1 Тогда
		    Предупреждение("Не допускается выбор накладных на возврат.");
		ИначеЕсли Флаг = 2 Тогда
			Если ПустоеЗначение(Поставщик) = 0 Тогда
			    Предупреждение("Выбранный документ выписан от имени контрагента, не совпадающего с заданным поставщиком.");
			Иначе            
				Если Вопрос("В Акте взаимозачетов не задан поставщик.
				             |Установить его по выбранному документу?","Да+Нет")="Да" Тогда
					Поставщик = ВыбЗнач.Контрагент;
					Флаг =0;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Флаг = 3 Тогда
			Если ПустоеЗначение(Покупатель) = 0 Тогда
			    Предупреждение("Выбранный документ выписан от имени контрагента, не совпадающего с заданным покупателем.");
			Иначе            
				Если Вопрос("В Акте взаимозачетов не задан покупатель.
				             |Установить его по выбранному документу?","Да+Нет")="Да" Тогда
					Покупатель = ВыбЗнач.Контрагент;
					Флаг =0;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Флаг = 4 Тогда
		    Предупреждение("Выбранный документ ввода остатков кредита выписан для другого типа клиента.");
		КонецЕсли;
		ФлагСтандОбр = ?(Флаг = 0,1,0);
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
Процедура ПриЗаписи() //Предопределенная процедура
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры


//ФирмаПоставщику = Перечисление.ВидыКлиентов.Поставщик;
//ПокупательФирме = Перечисление.ВидыКлиентов.Покупатель;
КонтрагентПоставщик  = Перечисление.ВидыКлиентов.Поставщик;
КонтрагентПокупатель = Перечисление.ВидыКлиентов.Покупатель;

ОстаткиДебетовыхДокументов=СоздатьОбъект("ТаблицаЗначений");
ОстаткиДебетовыхДокументов.НоваяКолонка("КредДокумент","Документ");
ОстаткиДебетовыхДокументов.НоваяКолонка("Долг","Число",15,5);

ОстаткиКредитовыхДокументов=СоздатьОбъект("ТаблицаЗначений");
ОстаткиКредитовыхДокументов.НоваяКолонка("КредДокумент","Документ");
ОстаткиКредитовыхДокументов.НоваяКолонка("Долг","Число",15,5);

//*****************************************************************************
//Инициализирум список действий по кнопке "Действия"
СписокДействий = глПолучитьСписокДействий("
	|СтруктураПодчиненности,
	|ДвиженияДокумента,
	|ОткрытьВЖурнале,
	|ИзмКомментария");
