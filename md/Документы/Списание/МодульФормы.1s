// Описание переменных 
Перем СписокДействий;  // Список действий по документу
Перем СтараяДата;
Перем НачальнаяДатаДокумента; // Для контроля даты документа
Перем ОстаткиТоваров, РезервыТоваров, ОбщРег;
Перем стНеликвид,стСортНач,стСортКон;
перем дополненияТорговля;
перем этоКладовщикШК;

////Для отладки
//Процедура ГенерироватьСобытиеСотр1()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
//	спсВрем.ИзСтрокиСРазделителями("5000000027019");
//	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
//Процедура ГенерироватьСобытиеСотр2()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
//	спсВрем.ИзСтрокиСРазделителями("5000000007011");
//	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
//Процедура ГенерироватьСобытиеСотрВербицкая()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	спсВрем.ИзСтрокиСРазделителями(" 5000000011018"); //Таня Назаренко
//	//спсВрем.ИзСтрокиСРазделителями("5000000020010"); //вербицкая
//	//спсВрем.ИзСтрокиСРазделителями("5000000007011");
//	//спсВрем.ИзСтрокиСРазделителями("3010012525016");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
//
//Процедура ГенерироватьСобытиеТовар()
//	Источник = "";
//	РаботаСоСканеромШтрихКода = 2;
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	спсВрем.ИзСтрокиСРазделителями("4820026540139");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//
////======================================================================
//Процедура ГенерироватьСобытие()
//	Источник = "";
//	спсВрем = СоздатьОбъект("СписокЗначений");
//	спсВрем.ИзСтрокиСРазделителями("4823065814308");
//	//спсВрем.ИзСтрокиСРазделителями("4823065814308, 4823065814315, 4823065813882, 4823065813899, 4823065813905");
//	Для сч = 1 По спсВрем.РазмерСписка() Цикл
//		Сервис.ВнешнееСобытие(Источник,"BarCodeValue",спсВрем.ПолучитьЗначение(сч,));
//	КонецЦикла;
//КонецПроцедуры // ГенерироватьСобытие
//

//======================================================================
Процедура ПолучитьДанныеСоСканераШК()
	парам = "";
	Если ВвестиСтроку(парам,"Введите штрихкод",13,0,20) <> 1 Тогда
		Возврат;
	КонецЕсли;
	Источник = "";
	РаботаСоСканеромШтрихКода = 2;
	Сервис.ВнешнееСобытие(Источник,"BarCodeValue",парам);
КонецПроцедуры // ПолучитьДанныеСоСканераШК()

Функция ПоставитьЗадачуВCRM()
	спсПарам = СоздатьОбъект("Структура");
	спсПарам.Вставить("Заголовок", " " + ТекущийДокумент());
	спсПарам.Вставить("Описание", СокрЛП(ОписаниеЗадачи));
	спсПарам.Вставить("ДатаНачала", ДатаДок);
	спсПарам.Вставить("ДатаКонца", срокИсполненияЗадачи);
	спсПарам.Вставить("users_id", СотрудникЗадачи);
	спсПарам.Вставить("конт", глВернутьКонтекст(Контекст));
	
	API_CRM = СоздатьОбъект("API_CRM");
	рез = API_CRM.ПоставитьЗадачу_API(спсПарам);
	Если рез <> 0 Тогда
		id_задачиВ_CRM = СокрЛП(id_задачиВ_CRM) + ?(ПустаяСтрока(id_задачиВ_CRM) = 1,"",",") + рез;
		Записать();
	КонецЕсли;
	Возврат рез;  //если о то задача не поставлена
КонецФункции // ПоставитьЗадачуВCRM()

//*****************************************************************************
// "служебные" функции и процедуры 

//======================================================================
Функция РассчитатьСуммуВЗакупочныхЦенах()
	СуммаИтого = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ЦенаТовара = глВернутьЦену(Товар,Константа.Закупочная);
		// получим параметры цены
		//+ralex, 2018-01-17 22:55:28
		//может вернуть не элемент справочника а пустое значение, если нет цены такой категории
		Попытка
			ЦенаТовара.ИспользоватьДату(ДатаДок);
		Исключение
			//Сообщить("Для товара " + Товар + " не найдена цена категории " + Константа.Закупочная);
			Продолжить;
		КонецПопытки;
		//+/ralex, 2018-01-17 22:55:28
		ЦенаЦены = ЦенаТовара.Цена;
		ВалютаЦены = ЦенаТовара.Валюта;
		ЕдЦены = ЦенаТовара.Единица;
		
		Попытка		
			ЦенаЦены = ЦенаЦены * Коэффициент / ЕдЦены.Коэффициент;
		Исключение       
			// если на дату документа у единицы еще не было коэффициента
			ЦенаЦены = 0;
			глТрассировка(Шаблон("У единицы [ЕдЦены] на дату [ДатаДок] не установлен коэффициент."),1);
		КонецПопытки;
		
		ЦенаЦены = глПересчет(ЦенаЦены,ВалютаЦены,ДатаДок,Гривня,ДатаДок);
		ЦенаЦены = Окр(ЦенаЦены,Константа.КоэффОкрГрнЦены,1);
		Сумма = ЦенаЦены *Количество;
		СуммаИтого = СуммаИтого + Сумма;
	КонецЦикла;
	Возврат СуммаИтого;
КонецФункции // РассчитатьСуммуВЗакупочныхЦенах

//======================================================================
Функция СуммаВЗакупочнойЦене()
	Если НазваниеНабораПрав() <> "Администратор" Тогда
		Возврат "";
	КонецЕсли;
	//СуммаИтого = 0;
	//ВыбратьСтроки();
	//Пока ПолучитьСтроку() = 1 Цикл
	//		ЦенаТовара = глВернутьЦену(Товар,Константа.Закупочная);
	//		// получим параметры цены
	//		//+ralex, 2018-01-17 22:55:28
	//		//может вернуть не элемент справочника а пустое значение, если нет цены такой категории
	//		Попытка
	//			ЦенаТовара.ИспользоватьДату(ДатаДок);
	//		Исключение
	//			//Сообщить("Для товара " + Товар + " не найдена цена категории " + Константа.Закупочная);
	//			Продолжить;
	//		КонецПопытки;
	//		//+/ralex, 2018-01-17 22:55:28
	//		ЦенаЦены = ЦенаТовара.Цена;
	//		ВалютаЦены = ЦенаТовара.Валюта;
	//		ЕдЦены = ЦенаТовара.Единица;
	//		
	//		Попытка		
	//			ЦенаЦены = ЦенаЦены * Коэффициент / ЕдЦены.Коэффициент;
	//		Исключение       
	//			// если на дату документа у единицы еще не было коэффициента
	//			ЦенаЦены = 0;
	//			глТрассировка(Шаблон("У единицы [ЕдЦены] на дату [ДатаДок] не установлен коэффициент."),1);
	//		КонецПопытки;
	//		
	//		ЦенаЦены = глПересчет(ЦенаЦены,ВалютаЦены,ДатаДок,Гривня,ДатаДок);
	//		ЦенаЦены = Окр(ЦенаЦены,Константа.КоэффОкрГрнЦены,1);
	//		Сумма = ЦенаЦены *Количество;
	//		СуммаИтого = СуммаИтого + Сумма;
	//КонецЦикла;
	Возврат "сумма в закупочных ценах: " + РассчитатьСуммуВЗакупочныхЦенах() + " грн.";
КонецФункции // СуммаВЗакупочнойЦене

//*****************************************************************************
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
	Заголовок = "Акт списания";
	Название = "Акт списания №";

	Заголовок = Заголовок + глЗаголовок(Контекст);
	
	Форма.Заголовок(Заголовок);     
	Возврат Название;
КонецФункции //ЗаголовокФормы

//******************************************************************************
Процедура ОбновитьНадписи()
	Форма.ТекстОснования.Заголовок(СокрП(Основание));
КонецПроцедуры

//*****************************************************************************
// функции и процедуры, вызываемые из формул элементов диалога
 
//+ralex, 2016-12-04 18:18:37
//======================================================================
Функция УстДоступность()
	Форма.флОткКонтрольПартийПоставщика.Видимость(0);
	Если ИмяПользователя() = "1САдм" Тогда
		Форма.флОткКонтрольПартийПоставщика.Видимость(1);
	КонецЕсли;
	
	текЗакладка = Форма.Закладки.получитьЗначение(Форма.Закладки.ТекущаяСтрока(),);
	Если текЗакладка <> "Основной" Тогда
	Иначе
		сорт_УстДоступностьРеквизитов(Контекст);
	КонецЕсли;
	
	Если ВидСписания = Перечисление.ВидыСписания.Списание Тогда
		Форма.новоеСкладскоеМесто.Видимость(0);
	Иначе
		Форма.новоеСкладскоеМесто.Видимость(1);
	КонецЕсли;	
	//но можно и так
	//Форма.новоеСкладскоеМесто.Видимость(ВидСписания = Перечисление.ВидыСписания.Списание,0,1);

	Если названиенабораправ()<>"Администратор" Тогда
		Форма.КомментарийАдм.Видимость(0);
		Форма.тхтКомментарийАдм.Видимость(0);
		Форма.Отпустил.Доступность(0);
		Форма.грузчик1.Доступность(0);
		Форма.грузчик2.Доступность(0);
		Форма.грузчик3.Доступность(0);
		Форма.грузчик4.Доступность(0);
		Форма.грузчик5.Доступность(0);
	КонецЕсли;
КонецФункции // УстДоступность//******************************************************************************
//+/ralex, 2016-12-04 18:18:37

//======================================================================
Функция УстановитьНадписьРаспечатанОтгружен()
	Возврат дополненияТорговля.УстановитьНадписьРаспечатанОтгружен(Контекст);
КонецФункции

Процедура ИзмДата()
	глПриИзмененииДатыДокумента(Контекст, СтараяДата);
	ОбновитьНадписи();
КонецПроцедуры

Процедура ПриВыбореЗакладки(Ном,Зн)
	Форма.ИспользоватьСлой("Общий," + Зн,2);
КонецПроцедуры

//*****************************************************************************
Процедура ВыборФирмы()
	// по кнопке редактирования параметров фирмы в докумнете
	Перем КонтекстДокумента;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОфирме", КонтекстДокумента);
	ОбновитьНадписи();
КонецПроцедуры	

//*****************************************************************************
Процедура Заполнить()     
    Если пустоезначение(выбтовар)=0 Тогда 
		Если КоличествоСтрок()>0 Тогда
			Рез = Вопрос("Удалить строки?","Да+Нет+Отмена");
			Если Рез ="Да" Тогда
				УдалитьСтроки();
			ИначеЕсли Рез = "Отмена" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	       
	
		ВремРегистры=СоздатьОбъект("Регистры");
		Рег=ВремРегистры.ПартииТоваров;
		Запрос=СоздатьОбъект("Запрос");
	
		ДатаКон = ДатаДок;
		Если ДатаКон>=ПолучитьДатуТА() Тогда
			ТекстЗапроса="";
		Иначе
			ТекстЗапроса="
			|ПЕРИОД С ДатаКон По ДатаКон;";
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса + "
		|ИзмФирма=Регистр.ОстаткиТоваров.Фирма;
		|ИзмТовар=Регистр.ОстаткиТоваров.Товар;
		|ИзмСклад=Регистр.ОстаткиТоваров.Склад;
		|Кол=Регистр.ОстаткиТоваров.ОстатокТовара;";
	
		Если ТипУчета>Упр Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмФирма=Фирма);";
			
			Рег.УстановитьЗначениеФильтра("Фирма",Фирма,1);
		Иначе
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмФирма=глПустаяФирма);";
			Рег.УстановитьЗначениеФильтра("Фирма",глПустаяФирма,1);
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|Группировка ИзмТовар Без групп;// Упорядочить по ИзмТовар.Код;
		|Функция КонКол=КонОст(Кол);
		|";
	
		Если Склад.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмСклад=Склад);";
		КонецЕсли;
			
		Если выбтовар.Выбран()=1 Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|Условие (ИзмТовар в выбтовар);";
		КонецЕсли;

		Флаг=Запрос.Выполнить(ТекстЗапроса);
		Если Флаг=0 Тогда
			Предупреждение("запрос по регистру ОстаткиТоваров не выполнился!");
			Возврат;
		КонецЕсли;
	
		Если ДатаДок<ПолучитьДатуТА() Тогда
			Рег.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыНа(ДатаДок);
		КонецЕсли;
	
		Пока Запрос.Группировка("ИзмТовар") = 1 Цикл
			Если Запрос.ИзмТовар.Выбран()=0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока();
			Товар=Запрос.ИзмТовар;
			Единица = глВернутьБазовуюЕдиницуТовара(Товар);
			Коэффициент = Единица.Коэффициент;
			Если ТипУчета>Упр Тогда
				ВП=Гривня;
			Иначе
				ВП=Товар.ВалютаУчета;
			КонецЕсли;
			Количество=Запрос.КонКол; 
			ИнвКоличество=Запрос.КонКол;
	
			Рег.УстановитьЗначениеФильтра("Товар",Запрос.ИзмТовар,1);
			тбИтоги = 0;
			ОбщаяСтоимость = 0;
			ОбщееКоличество = 0;
			Рег.ВыгрузитьИтоги(тбИтоги,1,1);
			тбИтоги.Свернуть("Товар","ОстатокТовара,Стоимость");
			
			тбИтоги.ВыбратьСтроки();
			Если тбИтоги.ПолучитьСтроку()=1 Тогда
				ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,ДатаДОК,гРИВНЯ,ДатаДОК);
				ОбщееКоличество = тбИтоги.ОстатокТовара;
			КонецЕсли;
			
			Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Количество/ОбщееКоличество);
		КонецЦикла;
	Иначе	
		УдалитьСтроки();
		Если ПустоеЗначение(ДокументОснование)=0 Тогда
			ДокОснования = ДокументОснование;
			ДокОснования.ВыбратьСтроки();
			Пока ДокОснования.ПолучитьСтроку()=1 Цикл
				Если ДокОснования.Количество>ДокОснования.ИнвКоличество Тогда
					НоваяСтрока();
					Товар=ДокОснования.Товар;
					Количество=ДокОснования.Количество-ДокОснования.ИнвКоличество;
					Единица=ДокОснования.Единица;
					Коэффициент=ДокОснования.Коэффициент;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;        
    КонецЕсли;
КонецПроцедуры	

Процедура ЗаполнитьПоРекламации()  
	Если КоличествоСтрок()>0 Тогда
		Рез = Вопрос("Удалить строки?","Да+Нет+Отмена");
		Если Рез ="Да" Тогда
			УдалитьСтроки();
		ИначеЕсли Рез = "Отмена" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	       
	
	ВремРегистры=СоздатьОбъект("Регистры");
	Рег=ВремРегистры.ПартииТоваров;
	Запрос=СоздатьОбъект("Запрос");
	
	ДатаКон = ДатаДок;
	Если ДатаКон>=ПолучитьДатуТА() Тогда
		ТекстЗапроса="";
	Иначе
		ТекстЗапроса="
		|ПЕРИОД С ДатаКон По ДатаКон;";
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса + "
	|ИзмФирма=Регистр.Рекламации.Поставщик;
	|ИзмТовар=Регистр.Рекламации.Товар;
	|ПН=Регистр.Рекламации.ПриходнаяНакладная;
	|ДокРекламация=Регистр.Рекламации.ДокРекламация;
	|Кол = Регистр.Рекламации.Кво;";
	
	ТекстЗапроса=ТекстЗапроса+"
	|Группировка ИзмТовар Без групп;// Упорядочить по ИзмТовар.Код;
	|Функция КонКол=КонОст(Кол);
	|";
	
	ТекстЗапроса=ТекстЗапроса+"
	|Условие (докРекламация=ДокументОснование);";
	
	Если выбтовар.Выбран()=1 Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|Условие (ИзмТовар в выбтовар);";
	КонецЕсли;
	
	Флаг=Запрос.Выполнить(ТекстЗапроса);
	Если Флаг=0 Тогда
		Предупреждение("запрос по регистру ОстаткиТоваров не выполнился!");
		Возврат;
	КонецЕсли;
	
	Если ДатаДок<ПолучитьДатуТА() Тогда
		Рег.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыНа(ДатаДок);
	КонецЕсли;
	
	Пока Запрос.Группировка("ИзмТовар") = 1 Цикл
		Если Запрос.ИзмТовар.Выбран()=0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока();
		Товар=Запрос.ИзмТовар;
		Единица = глВернутьБазовуюЕдиницуТовара(Товар);
		Коэффициент = Единица.Коэффициент;
		Если ТипУчета>Упр Тогда
			ВП=Гривня;
		Иначе
			ВП=Товар.ВалютаУчета;
		КонецЕсли;
		Количество=Запрос.КонКол; 
		ИнвКоличество=Запрос.КонКол;
		
		Рег.УстановитьЗначениеФильтра("Товар",Запрос.ИзмТовар,1);
		тбИтоги = 0;
		ОбщаяСтоимость = 0;
		ОбщееКоличество = 0;
		Рег.ВыгрузитьИтоги(тбИтоги,1,1);
		тбИтоги.Свернуть("Товар","ОстатокТовара,Стоимость");
		
		тбИтоги.ВыбратьСтроки();
		Если тбИтоги.ПолучитьСтроку()=1 Тогда
			ОбщаяСтоимость = глПересчет(тбИтоги.Стоимость,ВП,ДатаДОК,гРИВНЯ,ДатаДОК);
			ОбщееКоличество = тбИтоги.ОстатокТовара;
		КонецЕсли;
		
		Стоимость=?(ОбщееКоличество=0,0,ОбщаяСтоимость*Количество/ОбщееКоличество);
	КонецЦикла;
КонецПроцедуры	

// ===============================
Процедура ВыборПредпочтения()
	
	спОтбор = СоздатьОбъект("СписокЗначений");
	
	спСтатусы=СоздатьОбъект("СписокЗначений");
	Если Склад.ВидСклада = Перечисление.ВидыСкладов.Оптовый Тогда
		спСтатусы.ДобавитьЗначение(Купленный);
		спСтатусы.ДобавитьЗначение(Принятый);
		спСтатусы.ДобавитьЗначение(ПринятыйБезПраваПередачи);	
	Иначе
		спСтатусы.ДобавитьЗначение(РозницаКупленный);
		спСтатусы.ДобавитьЗначение(РозницаПринятый);
		спСтатусы.ДобавитьЗначение(РозницаПринятыйБезПраваПередачи);	
	КонецЕсли;
	спОтбор.Установить("Статус",спСтатусы);
	
	спОтбор.Установить("Контекст",глВзятьКонтекст(Контекст));  
	
	ОткрытьФормуМодально("Справочник.Контрагенты.ВыборПредпочтения", спОтбор);
КонецПроцедуры

//*****************************************************************************
Процедура ВыборОснования()
	// Процедура по кнопке редактирования основания в докумнете
	Перем КонтекстДокумента;             
	ДокОснование=ДокументОснование;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ОснованиеДокумента", КонтекстДокумента);
	Если (ДокОснование<>ДокументОснование) И (ПустоеЗначение(ДокументОснование)=0) Тогда
		Заполнить();
	КонецЕсли;
	ОбновитьНадписи();
КонецПроцедуры	

//******************************************************************************
Процедура Печать()
	Фирма.ИспользоватьДату(ДатаДок);
	Если ШтрКод = 0 Тогда
		Предупреждение("Для документа не сгенерирован штрихкод. Необходимо записать документ.");
		Возврат;
	КонецЕсли;
	печШтрихКод=Строка(ШтрКод);
	тхтИмяДокумента = ""; тхтСорта = "";
	Если ВидСписания = Перечисление.ВидыСписания.Списание Тогда
		тхтИмяДокумента = "Акт списання";
	ИначеЕсли ВидСписания = Перечисление.ВидыСписания.ИзменениеСорта Тогда
		тхтИмяДокумента = "Акт зміни сорту";
		тхтСорта = "" + СортНач + " у " + СортКон;
	КонецЕсли;
	
	Таб=СоздатьОбъект("Таблица");
	
	ПечФорма = "Таблица";
	Язык = глЯзык(ПечФорма); 	
	Таб.ИсходнаяТаблица(ПечФорма);
	глУстПропись(Гривня,Язык);
	
	Таб.ВывестиСекцию("Шапка");
	Ном = 1;
	ВСоставе = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл                
		Если Набор.Выбран()=1 Тогда
			Если ПустоеЗначение(ВСоставе)=1 Тогда
				Таб.ВывестиСекцию("ВСоставе");
				ВСоставе=Набор;
			ИначеЕсли ВСоставе<>Набор Тогда
				Таб.ВывестиСекцию("ВСоставе");
				ВСоставе=Набор;
			КонецЕсли;
		Иначе
			Если ПустоеЗначение(ВСоставе)=0 Тогда
				ВСоставе=0;
			КонецЕсли;
		КонецЕсли;
		Таб.ВывестиСекцию("Строка");
		Ном = Ном+1;
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	Таб.Опции(0,0,0,0,ПарСтрДок);
	Таб.Защита(Константа.ФлагЗащитыТаблиц);
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Печать накладной","");
	
	текРаспечатан = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"распечатан"); //+ralex, 19-12-21 23:02
	дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"распечатан",текРаспечатан + 1);
	
КонецПроцедуры	// Печать
                                              
//*****************************************************************************
// Предопределенные процедуры
    
//======================================================================
Функция ОткрытьПодборСкладскогоМеста()	
	выбМесто = "";
	спсМест = дополненияТорговля.получитьСписокСкладскихМест(Товар,Склад,Единица,СортНач);
	Если спсМест.ВыбратьЗначение(выбМесто,,,15,1) <> 1 Тогда
		Возврат 0;
	КонецЕсли;
	складскоеМесто = выбМесто;
	новоеСкладскоеМесто = выбМесто;
	Возврат 1;
КонецФункции // ОткрытьПодборПартииПоставщика

//*****************************************************************************
Процедура ПриНачалеВыбораЗначения(Рекв,Флаг)
	Флаг=0;
	Если (Рекв="Фирма") или (Рекв="Склад") Тогда
		ВыборФирмы();
	ИначеЕсли Рекв="Предпочтение" Тогда
		ВыборПредпочтения();
	ИначеЕсли Рекв = "ПартияПост" Тогда
		Если дополненияТорговля.ПолучитьПараметрГруппыСправочника(Товар,"разрешеныПартииПост") = 0 Тогда
			Флаг = 0; Возврат;
		КонецЕсли;
		конт = глВернутьКонтекст(Контекст);
		ОткрытьПодбор("ПартииТоваровПоставщика","ДляПодбора",конт);
		Флаг = 0;
	ИначеЕсли Найти(рекв,"складскоеМесто") <> 0 Тогда
		ОткрытьПодборСкладскогоМеста();
	Иначе
		Флаг=1;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ВводНового(Скопирован)	// предопределенная процедура
	
	глЗаполнитьШапку(Контекст);
	Если Скопирован=1 Тогда	//копирование документа
		Если ПустоеЗначение(СортКон) = 1 Тогда
			СортКон = КондиционныйТовар;
		КонецЕсли;
		сорт_УстановитьПозициюВспискеСортов(Контекст);
		Возврат;
	КонецЕсли;
	ВидСписания = Перечисление.ВидыСписания.Списание;
	СортКон = КондиционныйТовар;
	сорт_УстановитьПозициюВспискеСортов(Контекст);
	ДатаДок=РабочаяДата();
КонецПроцедуры

//******************************************************************************
Процедура ВводНаОсновании(ДокОснование)	// предопределенная процедура
	ВидДок = ДокОснование.Вид();
	Если ВидДок = "Рекламация" Тогда
		Сорт = гл_ПолучитьЗначениеДопКонстанты("первыйСорт");
		Автор = глПользователь;
		ДатаДок=РабочаяДата();
		глЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		ВидСписания = Перечисление.ВидыСписания.ПереводВНеликвид;
		ЗаполнитьПоРекламации();
	Иначе
		
		Если ДокОснование.ТипИнвентаризации <> 2 Тогда
			СтатусВозврата(0);
			Предупреждение("Списание можно вводить только на основании Инвентаризации"+РазделительСтрок+
			"с типом инвентаризации <по складу>");
			Возврат;
		КонецЕсли;
		Сорт = КондиционныйТовар;
		Автор = глПользователь;
		ДатаДок=РабочаяДата();
		глЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
		Заполнить();
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
Процедура ПриОткрытии()	// предопределенная процедура
	НачальнаяДатаДокумента = ДатаДок;

	спс = сорт_ПолучитьСписокСортов(1);
	спс.Выгрузить(спсСортаНач);
	спс.Выгрузить(спсСортаКон);
	
	сорт_УстановитьПозициюВспискеСортов(Контекст);	
	стСорт = СортКон;
	сорт_УстДоступностьРеквизитов(Контекст);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	глУстановкаРеквизитаТип(Контекст);
	Если Форма.ТолькоПросмотр()=1 Тогда
		Форма.кнОК.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнДействия.Доступность(0);
		
		Форма.кнОснование.Доступность(0);
		Форма.кнПодборПоКаталогу.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
	Иначе
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;

	ОбновитьНадписи();
	СтараяДата = ДатаДок;
	
	Форма.ИспользоватьЗакладки(1);
	//*ralex, 11-08-22 00:51
	//Форма.Закладки.ДобавитьЗначение("Основной","Основное");
	//Если НазваниеНабораПрав() = "Администратор" Тогда
	//	Форма.Закладки.ДобавитьЗначение("CRM","CRM");
	//КонецЕсли;
	// -------- заменено на:
	Если этоКладовщикШК = 0 Тогда
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.ДобавитьЗначение("Основной","Основные");
		Форма.Закладки.ДобавитьЗначение("Склад","Склад");
		Если НазваниеНабораПрав() = "Администратор" Тогда
			Форма.Закладки.ДобавитьЗначение("CRM","CRM");
		КонецЕсли;
		Форма.ИспользоватьСлой("Общий,Основной");
	Иначе
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.ДобавитьЗначение("Склад","Склад");
		Форма.ИспользоватьСлой("Совместный,Склад",2);  
	КонецЕсли;
	//*/------------------------

	Форма.флОткКонтрольПартийПоставщика.Видимость(0);
	Если ИмяПользователя() = "1САдм" Тогда
		Форма.флОткКонтрольПартийПоставщика.Видимость(1);
	КонецЕсли;
КонецПроцедуры	// ПриОткрытии

//======================================================================
Процедура ИзмВидСписания()
	Если ВидСписания = Перечисление.ВидыСписания.Списание Тогда
		СортНач = КондиционныйТовар;
		СортКон = КондиционныйТовар;
	Иначе
		СортНач = спсСортаНач.ПолучитьЗначение(спсСортаНач.ТекущаяСтрока(),);
		СортКон = спсСортаКон.ПолучитьЗначение(спсСортаКон.ТекущаяСтрока(),);
	КонецЕсли;
	сорт_УстановитьПозициюВспискеСортов(Контекст);
КонецПроцедуры // ИзмВидСписания()

//*****************************************************************************
Процедура ОбработкаПодбора(Выб) //Предопределенная процедура
	глПриОбработкеПодбора(Выб,Контекст);
КонецПроцедуры //Обработка подбора

Процедура ЗагрузитьСоСканера(Данные)
	// Определение типа штрих-кода
	Лев2 = Лев(Данные,2);
	Если Лев2 = "50" Тогда//сотрудник
		текОтгружен = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"отгружен");
		Если текОтгружен = 1 Тогда
			перемещениеПолучен = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"перемещениеПолучен");
			Если перемещениеПолучен = 1 Тогда
				Предупреждение("По документу уже было получение товара.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		спрСотр = СоздатьОбъект("Справочник.Сотрудники");
		Если спрСотр.НайтиПоРеквизиту("ШтрихКод",Данные,1) = 0 Тогда
			Сообщить("Сотрудник с ШК " + Данные + " не найден.");
			Форма.Закрыть(0);
			Возврат;
		КонецЕсли;
		
		текСотр = спрСотр.ТекущийЭлемент();
		//ищем пользователя
		спрПользователи = СоздатьОбъект("Справочник.Пользователи");
		спрПользователи.ВыбратьЭлементы();
		Пока спрПользователи.ПолучитьЭлемент() = 1 Цикл
			Если спрПользователи.сотрудник = текСотр Тогда
				//*ralex, 10-08-22 00:08
				//Если спрПользователи.флКладовщик = 1 Тогда
				//	Если текОтгружен = 1 Тогда
				//		текДатаОтгрузки = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"датаОтгрузки");
				//		Предупреждение("По документу " + номерДок + " уже было получение " + текДатаОтгрузки + " !!!");
				//		Возврат;
				//	Иначе
				//		дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"отгружен",1);
				//		дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"датаОтгрузки",ТекущаяДата());
				//		дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"времяОтгрузки",ТекущееВремя());
				//		СкладОтгрузки = Склад;
				//		СкладНеОтгрузки = 0;
				//		Отпустил = текСотр;
				//		Если Записать() = 1 Тогда
				//			//Сообщить("Метка ""Отгружено"" установлена.");
				//			Форма.Закрыть(0);
				//		Иначе
				//			Предупреждение("МЕТКА ПОЛУЧЕНИЯ НЕ УСТАНОВЛЕНА. ПОВТОРИТЕ ПОПЫТКУ.");
				//			Возврат;
				//		КонецЕсли;
				//	КонецЕсли;
				//	Возврат;
				//КонецЕсли;
				// -------- заменено на:
				Если спрПользователи.флКладовщик = 1 Тогда
					//Если текОтгружен = 1 Тогда
					//	Если перемещениеПолучен = 1 Тогда
					//		текДатаПолучения = дополненияТорговля.ПолучитьСостояниеДокумента(Контекст,"перемещениеДатаОтгрузки");
					//		Предупреждение("По документу " + номерДок + " уже было получение " + текДатаПолучения + " !!!");
					//		Возврат;
					//	КонецЕсли;
					//КонецЕсли;
					Если текОтгружен = 0 Тогда
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"отгружен",1);
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"датаОтгрузки",ТекущаяДата());
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"времяОтгрузки",ТекущееВремя());
						СкладОтгрузки = Склад;
						СкладНеОтгрузки = 0;
						Отпустил = текСотр;
						Если Записать() = 1 Тогда
							//Сообщить("Метка ""Отгружено"" установлена.");
							Форма.Закрыть(0);
						Иначе
							Предупреждение("МЕТКА ОТГРУЗКИ НЕ УСТАНОВЛЕНА. ПОВТОРИТЕ ПОПЫТКУ.");
							Возврат;
						КонецЕсли;
					ИначеЕсли перемещениеПолучен = 0 Тогда
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"перемещениеПолучен",1);
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"перемещениеДатаПолучения",ТекущаяДата());
						дополненияТорговля.УстановитьСостояниеДокумента(Контекст,"перемещениеВремяПолучения",ТекущееВремя());
						//СкладОтгрузки = Склад;
						//СкладНеОтгрузки = 0;
						Получил = текСотр;
						Если Записать() = 1 Тогда
							//Сообщить("Метка ""Отгружено"" установлена.");
							Форма.Закрыть(0);
						Иначе
							Предупреждение("МЕТКА ПОЛУЧЕНИЯ НЕ УСТАНОВЛЕНА. ПОВТОРИТЕ ПОПЫТКУ.");
							Возврат;
						КонецЕсли;
					КонецЕсли;
					Возврат;
				КонецЕсли;
				//*/------------------------
			КонецЕсли;
		КонецЦикла;
					
		Для сч = 1 по 8 Цикл
			текЗн = ПолучитьАтрибут("грузчик" + сч);
			Если ПустоеЗначение(текЗн) = 1 Тогда
				УстановитьАтрибут("грузчик" + сч,текСотр);
				Записать();
				Форма.Закрыть(0);
				Возврат;
			ИначеЕсли текЗн = текСотр Тогда
				Сообщить("Сотрудник " + текСотр + " уже указан.");
				Форма.Закрыть(0);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ШтрихКодИмеетПрефикс=1 Тогда
			Если Найти("MPJS",Лев(Данные,1))<>0 Тогда
				// Штрих-код определяет товар
				Данные=Сред(Данные,2,СтрДлина(Данные)-1);
			Иначе
				Сообщить("Формат считанного штрих-кода не предназначен для товаров");
			КонецЕсли;
		КонецЕсли;
		
		Тов=СоздатьОбъект("Справочник.Номенклатура");
		Упак=СоздатьОбъект("Справочник.Единицы");
		
		нашлиШК = 0;
		
		// Используется основной штрих-код товара
		// или свой внутренний штрих-код товара с префиксом "20,21"
		Если Упак.НайтиПоРеквизиту("ШтрихКод",Данные,1) <> 0 Тогда
			нашлиШК = 1;
			Упаковка=Упак.ТекущийЭлемент();
			Тов=Упаковка.Владелец;
			Сообщить("" + Данные + " " + Тов.Код + " " + Тов.Наименование);
		КонецЕсли;
		
		Если нашлиШК = 0 Тогда
			//Лев2 = Лев(Данные,2);
			//Если Лев2 = "22" Тогда
			//	//вероятно Используется свой внутренний штрих-код товара
			//	//хотя уже нарвались что поставщик на свой товар поставил такие коды :(
			//	// Штрих-код построен по коду товара и весу
			//	Если Тов.НайтиПоКоду(Сред(Данные,3,5))=0 Тогда
			//		Сообщить("Товар с кодом "+Сред(Данные,3,5)+" не найден");
			//		Возврат;
			//	Иначе
			//		Упаковка = Тов.ЕдиницаПоУмолчанию;
			//		Сообщить("" + Данные + " " + Тов.Код + " " + Тов.Наименование);
			//	КонецЕсли;
			//Иначе
				Сообщить("Товар со штрих кодом "+Данные+" не найден");
				Возврат;
			//КонецЕсли;
		КонецЕсли;
		
		тзТЧ = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(тзТЧ);

		стр = 0;
		Если тзТЧ.НайтиЗначение(Тов,стр,"Товар") = 1 Тогда
			тзТЧ.ПолучитьСтрокуПоНомеру(стр);
			//проверяем единицу измерения
			Если тзТЧ.Единица = Упаковка Тогда
				тзТЧ.КвоШК = тзТЧ.КвоШК + 1;
			Иначе
				//пересчет
				врКво =  1/тзТЧ.Единица.Коэффициент * Упаковка.Коэффициент;
				тзТЧ.КвоШК = тзТЧ.КвоШК + врКво;
			КонецЕсли;
		Иначе
			//не нашли
			Сообщить("товар " + Тов.Код + " " + Тов +" не найден в документе!","!!!");
		КонецЕсли;
		ЗагрузитьТабличнуюЧасть(тзТЧ);
		Если стр <> 0 Тогда
			АктивизироватьСтроку(стр);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)	// Предопределенная процедура
	//Сообщить(Данные);
	//+ralex, 01-08-22 21:36
	Если РаботаСоСканеромШтрихКода<>2 Тогда
		Возврат;
	КонецЕсли;
	Если Событие="BarCodeValue"	Тогда
		
		Если Scaner <> 0 Тогда
			Если Scaner.OldVersion<>0 Тогда
				//Работа драйвера совместима с предыдущей версиией
				// Источник="BarCodeScaner" (для других устройств свои названия)
				//Событие="BarCodeValue", Данные=ПолученныеДанные
				//Сообщить("Old Version <> 0");
				//Сообщить("Источник: "+Строка( Источник ));
				//Сообщить("Событие: "+Строка( Событие ));
				//Сообщить(Строка("Данные от устройства: "+ Данные));
			Иначе
				//Работа драйвера не совместима с предыдущей версиией
				// Источник="BarCodeScaner" (для других устройств свои названия)
				////Событие="BarCodeValue", Данные=НомерСобытия
				//Сообщить("Old Version = 0");
				Scaner.EventNumber=Число(Данные);
				//Сообщить("Данные от устройства: "+Scaner.ScanData);
				//Сообщить("Порт: "+Scaner.PortDescription);
				//Сообщить("Модель: "+Scaner.DeviceDescription);
				//Сообщить("Лог. устройство: " + Строка(Scaner.CurrentDeviceNumber) + " | " + Scaner.CurrentDeviceName);
				Scaner.DeleteEvent();
			КонецЕсли;
			Scaner.DataEventEnabled = 1;
			//Сообщить("Количество сообщений "+Строка(Scaner.DataCount));
			Если Константа.Отладка = Нет Тогда
				Данные = Scaner.Данные; //отключить для отладки эмулятором
			КонецЕсли;
		ИначеЕсли СканерШтрихКода <> 0 Тогда
			СканерШтрихКода.ПосылкаДанных = 1;
		КонецЕсли;
		
		ЗагрузитьСоСканера(Данные);
	КонецЕсли;
	//+/------------------------
	
	//-ralex, 01-08-22 21:35
	//Если РаботаСоСканеромШтрихКода=2 Тогда
	//	Если Событие="BarCodeValue" Тогда
	//		ЗагрузитьСоСканера(Данные);
	//	КонецЕсли;
	//	СканерШтрихКода.ПосылкаДанных=1; //выкл при отладке с эмулятором вн. события
	//КонецЕсли;
	//-/------------------------
КонецПроцедуры

//*****************************************************************************
Процедура ПриЗаписи() //Предопределенная процедура
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		ЗаголовокФормы();
	КонецЕсли;
	СуммаПоЗакупке = РассчитатьСуммуВЗакупочныхЦенах();
	Если ШтрКод = 0 Тогда
		ШтрКод = СформироватьШтрихКодДокумента(Контекст,ТекущийДокумент());
	КонецЕсли;

	//+ralex, 13-12-21 00:02
	Если ПустаяСтрока(id_задачиВ_CRM) = 1 Тогда
		СтатусЗадачиВCRM = 0;
	ИначеЕсли ЗадачаВCRMВыполнена = 0 Тогда
		СтатусЗадачиВCRM = 1;
	ИначеЕсли ЗадачаВCRMВыполнена = 1 Тогда
		СтатусЗадачиВCRM = 2;
	КонецЕсли;
	//+/------------------------
КонецПроцедуры
                                                                    
Форма.Товар.ВыполнятьФормулуТолькоПриИзменении(1);
этоКладовщикШК = ?(НазваниеНабораПрав() = "КладовщикШК",1,0);

//*****************************************************************************
//Инициализирум список действий по кнопке "Действия"
Если этоКладовщикШК = 0 Тогда
	СписокДействий = глПолучитьСписокДействий("
	|ТоварныйСостав,
	|СтруктураПодчиненности,
	|ДвиженияДокумента,
	|ОткрытьВЖурнале,
	|ИзмКомментария");
Иначе
	СписокДействий = глПолучитьСписокДействий("
	|СтруктураПодчиненности,
	|ОткрытьВЖурнале");
КонецЕсли;

форма.выбтовар.выборгруппы(1);
дополненияТорговля = СоздатьОбъект("дополненияТорговля");